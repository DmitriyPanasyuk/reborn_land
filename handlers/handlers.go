package handlers

import (
	"fmt"
	"log"
	"reborn_land/database"
	"strings"
	"time"
	"unicode/utf8"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type BotHandlers struct {
	bot            *tgbotapi.BotAPI
	db             *database.DB
	waitingForName map[int64]bool
}

func New(bot *tgbotapi.BotAPI, db *database.DB) *BotHandlers {
	return &BotHandlers{
		bot:            bot,
		db:             db,
		waitingForName: make(map[int64]bool),
	}
}

func (h *BotHandlers) HandleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		h.handleMessage(update.Message)
	}
}

func (h *BotHandlers) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è
	if h.waitingForName[userID] {
		h.handleNameInput(message)
		return
	}

	switch message.Text {
	case "/start":
		h.handleStart(message)
	case "/profile":
		h.handleProfile(message)
	case "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
		h.handleInventory(message)
	case "üåø –î–æ–±—ã—á–∞":
		h.handleGathering(message)
	case "üî® –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ":
		h.handleWorkplace(message)
	case "üõ† –í–µ—Ä—Å—Ç–∞–∫":
		h.handleWorkbench(message)
	case "üß± –ü–µ—á—å":
		h.handleFurnace(message)
	case "üî• –ö–æ—Å—Ç–µ—Ä":
		h.handleCampfire(message)
	default:
		// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
		h.bot.Send(msg)
	}
}

func (h *BotHandlers) handleStart(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	exists, err := h.db.PlayerExists(userID)
	if err != nil {
		log.Printf("Error checking player existence: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	if exists {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		player, err := h.db.GetPlayer(userID)
		if err != nil {
			log.Printf("Error getting player: %v", err)
			msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			h.bot.Send(msg)
			return
		}

		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, %s! üëã", player.Name))
		h.sendWithKeyboard(msg)
		return
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	h.startRegistration(message)
}

func (h *BotHandlers) startRegistration(message *tgbotapi.Message) {
	// –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	welcomeText := `üèù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ó–µ–º–ª—é –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è!

–¢—ã –ø—Ä–∏—à—ë–ª –≤ –∫—Ä–∞–π, –≥–¥–µ –ø—Ä–µ–∂–¥–µ –Ω–µ —Å—Ç—É–ø–∞–ª–∞ –Ω–æ–≥–∞ —á–µ–ª–æ–≤–µ–∫–∞. –ù–µ—Ç –Ω–∏ –¥–æ–º–æ–≤, –Ω–∏ –¥–æ—Ä–æ–≥ ‚Äî –ª–∏—à—å –±–µ—Å–∫—Ä–∞–π–Ω—è—è –¥–∏–∫–∞—è –∑–µ–º–ª—è, –±–æ–≥–∞—Ç–∞—è —Ä–µ—Å—É—Ä—Å–∞–º–∏, —Ç–∞–π–Ω–∞–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.

ü™® –í —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö ‚Äî —Å—Ç–∞—Ä–∞—è, –Ω–æ –∫—Ä–µ–ø–∫–∞—è –∫–∏—Ä–∫–∞. –° –Ω–µ—ë –Ω–∞—á–Ω—ë—Ç—Å—è —Ç–≤–æ–π –ø—É—Ç—å.

üîß –ó–¥–µ—Å—å –Ω–µ—Ç –Ω–∏—á–µ–≥–æ, –Ω–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω —Å–æ–∑–¥–∞—Ç—å –≤—Å—ë.
–ü–æ—Å—Ç—Ä–æ–π —Å–≤–æ—é —Ö–∏–∂–∏–Ω—É, —Ä–∞–∑–≤–µ–¥–∞–π –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏, –¥–æ–±—É–¥—å –ø–µ—Ä–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –∑–∞–ª–æ–∂–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –Ω–æ–≤–æ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏.
–í—Å—ë ‚Äî –æ—Ç –∫–æ—Å—Ç—Ä–∞ –¥–æ —Ö—Ä–∞–º–æ–≤ ‚Äî –±—É–¥–µ—Ç –¥–µ–ª–æ–º —Ç–≤–æ–∏—Ö —Ä—É–∫.`

	msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
	h.bot.Send(msg)

	// –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	go func() {
		time.Sleep(2 * time.Second)

		secondText := `üß≠ –ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:
ü™µ –î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (–¥–µ—Ä–µ–≤–æ, –∫–∞–º–µ–Ω—å, –ø–∏—â–∞)
üõñ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø–æ—Å–µ–ª–µ–Ω–∏—è
üåÑ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
üê∫ –ë–æ—Ä—å–±–∞ —Å –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–æ–π
üë• –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
üîÆüîÆ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥—Ä–µ–≤–Ω–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤`

		msg2 := tgbotapi.NewMessage(message.Chat.ID, secondText)
		h.bot.Send(msg2)

		// –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å–∏–º –∏–º—è
		nameMsg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –∏–º—è:")
		h.bot.Send(nameMsg)

		// –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∂–¥–µ–º –∏–º—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		h.waitingForName[message.From.ID] = true
	}()
}

func (h *BotHandlers) handleNameInput(message *tgbotapi.Message) {
	userID := message.From.ID
	name := strings.TrimSpace(message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
	if utf8.RuneCountInString(name) < 1 || utf8.RuneCountInString(name) > 30 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		h.bot.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	player, err := h.db.CreatePlayer(userID, name)
	if err != nil {
		log.Printf("Error creating player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.bot.Send(msg)
		return
	}

	// –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
	delete(h.waitingForName, userID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	successText := fmt.Sprintf(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s! üëã

–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: %d
–û–ø—ã—Ç: %d/100
–°—ã—Ç–æ—Å—Ç—å: %d/100`, player.Name, player.Level, player.Experience, player.Satiety)

	msg := tgbotapi.NewMessage(message.Chat.ID, successText)
	h.sendWithKeyboard(msg)
}

func (h *BotHandlers) handleProfile(message *tgbotapi.Message) {
	userID := message.From.ID

	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.bot.Send(msg)
		return
	}

	profileText := fmt.Sprintf(`üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
–ò–º—è: %s
–£—Ä–æ–≤–µ–Ω—å: %d
–û–ø—ã—Ç: %d/100
–°—ã—Ç–æ—Å—Ç—å: %d/100`, player.Name, player.Level, player.Experience, player.Satiety)

	msg := tgbotapi.NewMessage(message.Chat.ID, profileText)
	h.bot.Send(msg)
}

func (h *BotHandlers) handleInventory(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
	inventory, err := h.db.GetPlayerInventory(player.ID)
	if err != nil {
		log.Printf("Error getting inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.")
		h.bot.Send(msg)
		return
	}

	if len(inventory) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
		h.bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
	inventoryText := "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n"
	for _, item := range inventory {
		if item.Type == "tool" && item.Durability > 0 {
			inventoryText += fmt.Sprintf("%s - %d —à—Ç. (–ü—Ä–æ—á–Ω–æ—Å—Ç—å: %d/100)\n", item.ItemName, item.Quantity, item.Durability)
		} else {
			inventoryText += fmt.Sprintf("%s - %d —à—Ç.\n", item.ItemName, item.Quantity)
		}
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, inventoryText)
	h.bot.Send(msg)
}

func (h *BotHandlers) handleGathering(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üåø –§—É–Ω–∫—Ü–∏—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.bot.Send(msg)
}

func (h *BotHandlers) handleWorkplace(message *tgbotapi.Message) {
	workplaceText := `üî® –¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ —Ä–∞–±–æ—á–µ–º—É –º–µ—Å—Ç—É.

–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã.`

	msg := tgbotapi.NewMessage(message.Chat.ID, workplaceText)
	h.sendWorkplaceKeyboard(msg)
}

func (h *BotHandlers) handleWorkbench(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üõ† –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä—Å—Ç–∞–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.bot.Send(msg)
}

func (h *BotHandlers) handleFurnace(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üß± –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.bot.Send(msg)
}

func (h *BotHandlers) handleCampfire(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üî• –§—É–Ω–∫—Ü–∏—è –∫–æ—Å—Ç—Ä–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.bot.Send(msg)
}

func (h *BotHandlers) sendWithKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
			tgbotapi.NewKeyboardButton("üåø –î–æ–±—ã—á–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üî® –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

func (h *BotHandlers) sendWorkplaceKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üõ† –í–µ—Ä—Å—Ç–∞–∫"),
			tgbotapi.NewKeyboardButton("üß± –ü–µ—á—å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üî• –ö–æ—Å—Ç–µ—Ä"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

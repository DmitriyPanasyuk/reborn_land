package handlers

import (
	"fmt"
	"log"
	"reborn_land/database"
	"reborn_land/models"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type BotHandlers struct {
	bot                     *tgbotapi.BotAPI
	db                      *database.DB
	waitingForName          map[int64]bool
	waitingForCraftQuantity map[int64]string // –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞)
	mineSessions            map[int64]*models.MineSession
	forestSessions          map[int64]*models.ForestSession
	gatheringSessions       map[int64]*models.GatheringSession
	huntingSessions         map[int64]*models.HuntingSession
	miningTimers            map[int64]*time.Timer
	choppingTimers          map[int64]*time.Timer
	gatheringTimers         map[int64]*time.Timer
	huntingTimers           map[int64]*time.Timer
	craftingTimers          map[int64]*time.Timer // –¢–∞–π–º–µ—Ä—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
	mineCooldowns           map[int64]time.Time   // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞ —à–∞—Ö—Ç—ã
	forestCooldowns         map[int64]time.Time   // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞ –ª–µ—Å–∞
	gatheringCooldowns      map[int64]time.Time   // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞ —Å–±–æ—Ä–∞
	huntingCooldowns        map[int64]time.Time   // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞ –æ—Ö–æ—Ç—ã
	playerLocation          map[int64]string      // –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
	restingTimers           map[int64]*time.Timer // –¢–∞–π–º–µ—Ä—ã –¥–ª—è –æ—Ç–¥—ã—Ö–∞
}

func New(bot *tgbotapi.BotAPI, db *database.DB) *BotHandlers {
	return &BotHandlers{
		bot:                     bot,
		db:                      db,
		waitingForName:          make(map[int64]bool),
		waitingForCraftQuantity: make(map[int64]string),
		mineSessions:            make(map[int64]*models.MineSession),
		forestSessions:          make(map[int64]*models.ForestSession),
		gatheringSessions:       make(map[int64]*models.GatheringSession),
		huntingSessions:         make(map[int64]*models.HuntingSession),
		miningTimers:            make(map[int64]*time.Timer),
		choppingTimers:          make(map[int64]*time.Timer),
		gatheringTimers:         make(map[int64]*time.Timer),
		huntingTimers:           make(map[int64]*time.Timer),
		craftingTimers:          make(map[int64]*time.Timer),
		mineCooldowns:           make(map[int64]time.Time),
		forestCooldowns:         make(map[int64]time.Time),
		gatheringCooldowns:      make(map[int64]time.Time),
		huntingCooldowns:        make(map[int64]time.Time),
		playerLocation:          make(map[int64]string),
		restingTimers:           make(map[int64]*time.Timer),
	}
}

func (h *BotHandlers) HandleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		h.handleMessage(update.Message)
	}
	if update.CallbackQuery != nil {
		h.handleCallbackQuery(update.CallbackQuery)
	}
}

func (h *BotHandlers) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–¥—ã—Ö–∞–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫
	if _, exists := h.restingTimers[userID]; exists {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –æ—Ç–¥—ã—Ö.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è
	if h.waitingForName[userID] {
		h.handleNameInput(message)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
	if itemName, exists := h.waitingForCraftQuantity[userID]; exists {
		h.handleCraftQuantityInput(message, itemName)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –∫—Ä–∞—Ñ—Ç
	if _, exists := h.craftingTimers[userID]; exists {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞ –∏–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
		h.sendMessage(msg)
		return
	}

	switch message.Text {
	case "/start":
		h.handleStart(message)
	case "/profile":
		h.handleProfile(message)
	case "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
		h.handleInventory(message)
	case "üåø –î–æ–±—ã—á–∞":
		h.handleGathering(message)
	case "üî® –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ":
		h.handleWorkplace(message)
	case "üìú –ö–≤–µ—Å—Ç—ã":
		h.handleQuest(message)
	case "üõ† –í–µ—Ä—Å—Ç–∞–∫":
		h.handleWorkbench(message)
	case "üß± –ü–µ—á—å":
		h.handleFurnace(message)
	case "üî• –ö–æ—Å—Ç–µ—Ä":
		h.handleCampfire(message)
	case "‚óÄÔ∏è –ù–∞–∑–∞–¥":
		h.handleBack(message)
	case "‚õè –®–∞—Ö—Ç–∞":
		h.handleMine(message)
	case "üåæ –ü–æ–ª–µ":
		h.handleField(message)
	case "üé£ –û–∑–µ—Ä–æ":
		h.handleLake(message)
	case "üèû –õ–µ—Å":
		h.handleForest(message)
	case "/create_axe":
		h.handleCreateAxe(message)
	case "/create_pickaxe":
		h.handleCreatePickaxe(message)
	case "/create_bow":
		h.handleCreateBow(message)
	case "/create_arrows":
		h.handleCreateArrows(message)
	case "/create_knife":
		h.handleCreateKnife(message)
	case "/create_fishing_rod":
		h.handleCreateFishingRod(message)
	case "/create_birch_plank":
		h.handleCreateBirchPlank(message)
	case "/create_simple_hut":
		h.handleCreateSimpleHut(message)
	case "/eat":
		h.handleEat(message)
	case "üéØ –û—Ö–æ—Ç–∞":
		h.handleHunting(message)
	case "üåø –°–±–æ—Ä":
		h.handleForestGathering(message)
	case "ü™ì –†—É–±–∫–∞":
		h.handleChopping(message)
	case "üìñ –õ–æ—Ä":
		h.handleLore(message)
	case "üóìÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ":
		h.handleDailyQuests(message)
	case "üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ":
		h.handleWeeklyQuests(message)
	case "üèòÔ∏è –ü–æ—Å—Ç—Ä–æ–π–∫–∏":
		h.handleBuildings(message)
	case "/look":
		h.handleLookPages(message)
	case "/read":
		h.handleReadPage(message)
	case "/read1":
		h.handleReadPage1(message)
	case "/read2":
		h.handleReadPage2(message)
	case "/read3":
		h.handleReadPage3(message)
	case "/read4":
		h.handleReadPage4(message)
	case "/read5":
		h.handleReadPage5(message)
	case "/read6":
		h.handleReadPage6(message)
	case "/read7":
		h.handleReadPage7(message)
	case "/read8":
		h.handleReadPage8(message)
	case "/open":
		h.handleOpenHut(message)
	case "/rest":
		h.handleRest(message)
	default:
		// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
		h.sendMessage(msg)
	}
}

func (h *BotHandlers) handleStart(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	exists, err := h.db.PlayerExists(userID)
	if err != nil {
		log.Printf("Error checking player existence: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	if exists {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		player, err := h.db.GetPlayer(userID)
		if err != nil {
			log.Printf("Error getting player: %v", err)
			msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			h.sendMessage(msg)
			return
		}

		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, %s! üëã", player.Name))
		h.sendWithKeyboard(msg)
		return
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	h.startRegistration(message)
}

func (h *BotHandlers) startRegistration(message *tgbotapi.Message) {
	// –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	welcomeText := `üèù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ó–µ–º–ª—é –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è!

–¢—ã –ø—Ä–∏—à—ë–ª –≤ –∫—Ä–∞–π, –≥–¥–µ –ø—Ä–µ–∂–¥–µ –Ω–µ —Å—Ç—É–ø–∞–ª–∞ –Ω–æ–≥–∞ —á–µ–ª–æ–≤–µ–∫–∞. –ù–µ—Ç –Ω–∏ –¥–æ–º–æ–≤, –Ω–∏ –¥–æ—Ä–æ–≥ ‚Äî –ª–∏—à—å –±–µ—Å–∫—Ä–∞–π–Ω—è—è –¥–∏–∫–∞—è –∑–µ–º–ª—è, –±–æ–≥–∞—Ç–∞—è —Ä–µ—Å—É—Ä—Å–∞–º–∏, —Ç–∞–π–Ω–∞–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.

ü™® –í —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö ‚Äî —Å—Ç–∞—Ä–∞—è, –Ω–æ –∫—Ä–µ–ø–∫–∞—è –∫–∏—Ä–∫–∞. –° –Ω–µ—ë –Ω–∞—á–Ω—ë—Ç—Å—è —Ç–≤–æ–π –ø—É—Ç—å.

üîß –ó–¥–µ—Å—å –Ω–µ—Ç –Ω–∏—á–µ–≥–æ, –Ω–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω —Å–æ–∑–¥–∞—Ç—å –≤—Å—ë.
–ü–æ—Å—Ç—Ä–æ–π —Å–≤–æ—é —Ö–∏–∂–∏–Ω—É, —Ä–∞–∑–≤–µ–¥–∞–π –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏, –¥–æ–±—É–¥—å –ø–µ—Ä–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –∑–∞–ª–æ–∂–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –Ω–æ–≤–æ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏.
–í—Å—ë ‚Äî –æ—Ç –∫–æ—Å—Ç—Ä–∞ –¥–æ —Ö—Ä–∞–º–æ–≤ ‚Äî –±—É–¥–µ—Ç –¥–µ–ª–æ–º —Ç–≤–æ–∏—Ö —Ä—É–∫.`

	msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
	h.sendMessage(msg)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
	go func() {
		// –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		time.Sleep(2 * time.Second)

		secondText := `üß≠ –ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:
ü™µ –î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (–¥–µ—Ä–µ–≤–æ, –∫–∞–º–µ–Ω—å, –ø–∏—â–∞)
üõñ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø–æ—Å–µ–ª–µ–Ω–∏—è
üåÑ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
üê∫ –ë–æ—Ä—å–±–∞ —Å –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–æ–π
üë• –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
üîÆüîÆ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥—Ä–µ–≤–Ω–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤`

		msg2 := tgbotapi.NewMessage(message.Chat.ID, secondText)
		h.sendMessage(msg2)

		// –ñ–¥–µ–º –µ—â–µ 2 —Å–µ–∫—É–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		time.Sleep(2 * time.Second)

		thirdText := `–ú–∏—Ä –ø–∞–ª ‚Äî –Ω–µ –≤ –æ–≥–Ω–µ –∏ –Ω–µ –≤ –∫—Ä–æ–≤–∏,
–∞ –≤ –º–æ–ª—á–∞–Ω–∏–∏. –¶–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—á–µ–∑–ª–∏, –≥–æ—Ä–æ–¥–∞ –∑–∞—Ä–æ—Å–ª–∏, 
–∑–Ω–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ø–∞–ª–∏—Å—å, —Å–ª–æ–≤–Ω–æ –ø—ã–ª—å. 
–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–º–Ω–∏—Ç, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å. 
–û—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –ó–µ–º–ª—è. 
–î–∏–∫–∞—è, –ø–µ—Ä–≤–æ–±—ã—Ç–Ω–∞—è. –ù–æ –æ–Ω–∞ –ø–æ–º–Ω–∏—Ç...

–¢—ã ‚Äî –æ–¥–∏–Ω –∏–∑ –ø–µ—Ä–≤—ã—Ö, –∫—Ç–æ –ø—Ä–æ–±—É–¥–∏–ª—Å—è. 
–ë–µ–∑ –∏–º–µ–Ω–∏, –±–µ–∑ –ø–∞–º—è—Ç–∏. –ù–æ —Å –∏—Å–∫—Ä–æ–π –≤–Ω—É—Ç—Ä–∏. 
–ò—Å–∫—Ä–æ–π –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è. –í—Å—ë, —á—Ç–æ —Ç—ã –ø–æ—Å—Ç—Ä–æ–∏—à—å, ‚Äî –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º —à–∞–≥–æ–º –∫ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—é —ç—Ç–æ–≥–æ –º–∏—Ä–∞. 
–ê –º–æ–∂–µ—Ç, –∏ –ø—Ä–∞–≤–¥—ã...`

		msg3 := tgbotapi.NewMessage(message.Chat.ID, thirdText)
		h.sendMessage(msg3)

		// –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç—Ä–µ—Ç—å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å–∏–º –∏–º—è
		nameMsg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –∏–º—è:")
		h.sendMessage(nameMsg)

		// –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∂–¥–µ–º –∏–º—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		h.waitingForName[message.From.ID] = true
	}()
}

func (h *BotHandlers) handleNameInput(message *tgbotapi.Message) {
	userID := message.From.ID
	name := strings.TrimSpace(message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
	if utf8.RuneCountInString(name) < 1 || utf8.RuneCountInString(name) > 30 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		h.sendMessage(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	player, err := h.db.CreatePlayer(userID, name)
	if err != nil {
		log.Printf("Error creating player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
	err = h.db.AddItemToInventoryWithDurability(player.ID, "–ü—Ä–æ—Å—Ç–æ–π –ª—É–∫", 1, 100)
	if err != nil {
		log.Printf("Error adding bow to new player: %v", err)
	}

	err = h.db.AddItemToInventory(player.ID, "–°—Ç—Ä–µ–ª—ã", 100)
	if err != nil {
		log.Printf("Error adding arrows to new player: %v", err)
	}

	// –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
	delete(h.waitingForName, userID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	successText := fmt.Sprintf(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s! üëã

–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: %d
–û–ø—ã—Ç: %d/100
–°—ã—Ç–æ—Å—Ç—å: %d/100

üéÅ –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –ª—É–∫ - 1 —à—Ç. (–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 100/100)
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –Ω–æ–∂ - 1 —à—Ç. (–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 100/100)
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∫–∏—Ä–∫–∞ - 1 —à—Ç. (–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 100/100)
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π —Ç–æ–ø–æ—Ä - 1 —à—Ç. (–ü—Ä–æ—á–Ω–æ—Å—Ç—å: 100/100)
‚Ä¢ –°—Ç—Ä–µ–ª—ã - 100 —à—Ç.
‚Ä¢ –õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞ - 10 —à—Ç.`, player.Name, player.Level, player.Experience, player.Satiety)

	msg := tgbotapi.NewMessage(message.Chat.ID, successText)
	h.sendWithKeyboard(msg)
}

func (h *BotHandlers) handleCraftQuantityInput(message *tgbotapi.Message, itemName string) {
	userID := message.From.ID
	quantityStr := strings.TrimSpace(message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
	quantity, err := strconv.Atoi(quantityStr)
	if err != nil || quantity <= 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Ä–µ–∑—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –¥–ª—è –±–µ—Ä–µ–∑–æ–≤–æ–≥–æ –±—Ä—É—Å–∞
	if itemName == "–ë–µ—Ä–µ–∑–æ–≤—ã–π –±—Ä—É—Å" {
		birchQuantity, err := h.db.GetItemQuantityInInventory(player.ID, "–ë–µ—Ä–µ–∑–∞")
		if err != nil {
			log.Printf("Error getting birch quantity: %v", err)
			birchQuantity = 0
		}

		// –î–ª—è –±–µ—Ä–µ–∑–æ–≤–æ–≥–æ –±—Ä—É—Å–∞ –Ω—É–∂–Ω–æ 2 –±–µ—Ä–µ–∑—ã –∑–∞ 1 –±—Ä—É—Å
		requiredBirch := quantity * 2
		if birchQuantity < requiredBirch {
			msg := tgbotapi.NewMessage(message.Chat.ID, `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–∞ "–ë–µ—Ä–µ–∑–∞".`)
			h.sendMessage(msg)
			// –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
			delete(h.waitingForCraftQuantity, userID)
			return
		}

		// –ù–∞—á–∏–Ω–∞–µ–º –∫—Ä–∞—Ñ—Ç
		h.startCrafting(userID, message.Chat.ID, itemName, quantity)
	}

	// –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
	delete(h.waitingForCraftQuantity, userID)
}

func (h *BotHandlers) handleProfile(message *tgbotapi.Message) {
	userID := message.From.ID

	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	profileText := fmt.Sprintf(`üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
–ò–º—è: %s
Telegram ID: %d
–£—Ä–æ–≤–µ–Ω—å: %d
–û–ø—ã—Ç: %d/100
–°—ã—Ç–æ—Å—Ç—å: %d/100`, player.Name, player.TelegramID, player.Level, player.Experience, player.Satiety)

	msg := tgbotapi.NewMessage(message.Chat.ID, profileText)
	h.sendMessage(msg)
}

func (h *BotHandlers) handleInventory(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
	inventory, err := h.db.GetPlayerInventory(player.ID)
	if err != nil {
		log.Printf("Error getting inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.")
		h.sendMessage(msg)
		return
	}

	// –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var regularItems []models.InventoryItem
	var pages []models.InventoryItem

	for _, item := range inventory {
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞") {
			pages = append(pages, item)
		} else {
			regularItems = append(regularItems, item)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
	if len(regularItems) == 0 && len(pages) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
		h.sendMessage(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
	inventoryText := "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n"

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
	for _, item := range regularItems {
		if item.Type == "tool" && item.Durability > 0 {
			inventoryText += fmt.Sprintf("%s - %d —à—Ç. (–ü—Ä–æ—á–Ω–æ—Å—Ç—å: %d/100)\n", item.ItemName, item.Quantity, item.Durability)
		} else if item.ItemName == "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞" {
			inventoryText += fmt.Sprintf("%s - %d —à—Ç. /eat\n", item.ItemName, item.Quantity)
		} else {
			inventoryText += fmt.Sprintf("%s - %d —à—Ç.\n", item.ItemName, item.Quantity)
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
	if len(pages) > 0 {
		inventoryText += "\nüìñ –°—Ç—Ä–∞–Ω–∏—Ü—ã: /look\n"
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, inventoryText)
	h.sendMessage(msg)
}

func (h *BotHandlers) handleEat(message *tgbotapi.Message) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
	player, err := h.db.GetPlayer(message.From.ID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
	inventory, err := h.db.GetPlayerInventory(player.ID)
	if err != nil {
		log.Printf("Error getting inventory: %v", err)
		return
	}

	// –ò—â–µ–º —è–≥–æ–¥—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	var berryItem *models.InventoryItem
	for i, item := range inventory {
		if item.ItemName == "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞" && item.Quantity > 0 {
			berryItem = &inventory[i]
			break
		}
	}

	if berryItem == nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ —Ç–µ–±—è –Ω–µ—Ç —è–≥–æ–¥ –¥–ª—è –µ–¥—ã!")
		h.sendMessage(msg)
		return
	}

	// –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–≥–æ–¥
	err = h.db.ConsumeItem(player.ID, "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞", 1)
	if err != nil {
		log.Printf("Error consuming berries: %v", err)
		return
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—ã—Ç–æ—Å—Ç—å
	err = h.db.UpdatePlayerSatiety(player.ID, 5)
	if err != nil {
		log.Printf("Error updating satiety: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—ã—Ç–æ—Å—Ç–∏
	updatedPlayer, err := h.db.GetPlayer(message.From.ID)
	if err != nil {
		log.Printf("Error getting updated player: %v", err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—ä–µ–¥–µ–Ω–Ω—ã—Ö —è–≥–æ–¥–∞—Ö
	msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–¢—ã —Å—ä–µ–ª —è–≥–æ–¥—ã! –°—ã—Ç–æ—Å—Ç—å: %d/100", updatedPlayer.Satiety))
	h.sendMessage(msg)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ 7
	h.checkBerryEatingQuestProgress(message.From.ID, message.Chat.ID, player.ID)
}

func (h *BotHandlers) checkBerryEatingQuestProgress(userID int64, chatID int64, playerID int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç 7 (—Å—ä–µ—Å—Ç—å 3 —è–≥–æ–¥—ã)
	quest, err := h.db.GetPlayerQuest(playerID, 7)
	if err != nil {
		log.Printf("Error getting quest 7: %v", err)
		return
	}

	// –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	if quest == nil || quest.Status != "active" {
		return
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
	newProgress := quest.Progress + 1
	err = h.db.UpdateQuestProgress(playerID, 7, newProgress)
	if err != nil {
		log.Printf("Error updating quest 7 progress: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –∫–≤–µ—Å—Ç
	if newProgress >= quest.Target {
		// –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!
		err = h.db.UpdateQuestStatus(playerID, 7, "completed")
		if err != nil {
			log.Printf("Error completing quest 7: %v", err)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
		// 10 –æ–ø—ã—Ç–∞ –∏–≥—Ä–æ–∫—É
		err = h.db.UpdatePlayerExperience(playerID, 10)
		if err != nil {
			log.Printf("Error updating player experience: %v", err)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
		err = h.db.AddItemToInventory(playerID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª", 1)
		if err != nil {
			log.Printf("Error adding quest item to inventory: %v", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞
		questCompleteText := `üçá –ö–≤–µ—Å—Ç 7: –ü–µ—Ä–µ–∫—É—Å –í–´–ü–û–õ–ù–ï–ù!
–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞:
üéñ 10 –æ–ø—ã—Ç–∞
üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª`

		msg := tgbotapi.NewMessage(chatID, questCompleteText)
		h.sendMessage(msg)
	}
}

func (h *BotHandlers) handleGathering(message *tgbotapi.Message) {
	gatheringText := `üåø –¢—ã —Å–æ–±—Ä–∞–ª—Å—è –≤ –ø—É—Ç—å –∑–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏.

–í—ã–±–µ—Ä–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è:

üèû –õ–µ—Å ‚Äî –¥—Ä–µ–≤–µ—Å–∏–Ω–∞, –æ—Ö–æ—Ç–∞, —è–≥–æ–¥—ã  
‚õè –®–∞—Ö—Ç–∞ ‚Äî –∫–∞–º–µ–Ω—å, —Ä—É–¥–∞, —É–≥–æ–ª—å  
üåæ –ü–æ–ª–µ ‚Äî —Ç—Ä–∞–≤—ã, –∑–ª–∞–∫–∏, —Ä–µ–¥–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è  
üé£ –û–∑–µ—Ä–æ ‚Äî —Ä—ã–±–∞–ª–∫–∞ –∏ –≤–æ–¥–∞`

	msg := tgbotapi.NewMessage(message.Chat.ID, gatheringText)
	h.sendGatheringKeyboard(msg)
}

func (h *BotHandlers) handleWorkplace(message *tgbotapi.Message) {
	workplaceText := `üî® –¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ —Ä–∞–±–æ—á–µ–º—É –º–µ—Å—Ç—É.

–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã.`

	msg := tgbotapi.NewMessage(message.Chat.ID, workplaceText)
	h.sendWorkplaceKeyboard(msg)
}

func (h *BotHandlers) handleWorkbench(message *tgbotapi.Message) {
	workbenchText := `üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:

–ë–µ—Ä–µ–∑–æ–≤—ã–π –±—Ä—É—Å ‚Äî /create_birch_plank
–ü—Ä–æ—Å—Ç–æ–π —Ç–æ–ø–æ—Ä ‚Äî /create_axe
–ü—Ä–æ—Å—Ç–∞—è –∫–∏—Ä–∫–∞ ‚Äî /create_pickaxe
–ü—Ä–æ—Å—Ç–æ–π –ª—É–∫ ‚Äî /create_bow
–°—Ç—Ä–µ–ª—ã ‚Äî /create_arrows
–ü—Ä–æ—Å—Ç–æ–π –Ω–æ–∂ ‚Äî /create_knife
–ü—Ä–æ—Å—Ç–∞—è —É–¥–æ—á–∫–∞ ‚Äî /create_fishing_rod`

	msg := tgbotapi.NewMessage(message.Chat.ID, workbenchText)
	h.sendMessage(msg)
}

func (h *BotHandlers) handleFurnace(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üß± –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.sendMessage(msg)
}

func (h *BotHandlers) handleCampfire(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üî• –§—É–Ω–∫—Ü–∏—è –∫–æ—Å—Ç—Ä–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.sendMessage(msg)
}

func (h *BotHandlers) handleBack(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–∞ –∏–ª–∏ —Ä—É–±–∫–∞
	if _, isMining := h.miningTimers[userID]; isMining {
		// –ï—Å–ª–∏ –∏–¥–µ—Ç –¥–æ–±—ã—á–∞, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–π—Ç–∏
		msg := tgbotapi.NewMessage(chatID, "–ò–¥–µ—Ç –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–∞.")
		h.sendMessage(msg)
		return
	}

	if _, isChopping := h.choppingTimers[userID]; isChopping {
		// –ï—Å–ª–∏ –∏–¥–µ—Ç —Ä—É–±–∫–∞, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–π—Ç–∏
		msg := tgbotapi.NewMessage(chatID, "–ò–¥–µ—Ç —Ä—É–±–∫–∞ –¥–µ—Ä–µ–≤–∞.")
		h.sendMessage(msg)
		return
	}

	if _, isGathering := h.gatheringTimers[userID]; isGathering {
		// –ï—Å–ª–∏ –∏–¥–µ—Ç —Å–±–æ—Ä, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–π—Ç–∏
		msg := tgbotapi.NewMessage(chatID, "–ò–¥–µ—Ç —Å–±–æ—Ä —è–≥–æ–¥.")
		h.sendMessage(msg)
		return
	}

	if _, isHunting := h.huntingTimers[userID]; isHunting {
		// –ï—Å–ª–∏ –∏–¥–µ—Ç –æ—Ö–æ—Ç–∞, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–π—Ç–∏
		msg := tgbotapi.NewMessage(chatID, "–ò–¥–µ—Ç –æ—Ö–æ—Ç–∞.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —à–∞—Ö—Ç—ã
	if session, exists := h.mineSessions[userID]; exists {
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º —à–∞—Ö—Ç—ã
		deleteFieldMsg := tgbotapi.NewDeleteMessage(chatID, session.FieldMessageID)
		h.requestAPI(deleteFieldMsg)

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞—Ö—Ç–µ
		deleteInfoMsg := tgbotapi.NewDeleteMessage(chatID, session.InfoMessageID)
		h.requestAPI(deleteInfoMsg)

		// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é —à–∞—Ö—Ç—ã
		delete(h.mineSessions, userID)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥–æ–±—ã—á–∏
		msg := tgbotapi.NewMessage(chatID, "üåø –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:")
		h.sendGatheringKeyboard(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –ª–µ—Å–∞
	if session, exists := h.forestSessions[userID]; exists {
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º –ª–µ—Å–∞
		deleteFieldMsg := tgbotapi.NewDeleteMessage(chatID, session.FieldMessageID)
		h.requestAPI(deleteFieldMsg)

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–µ—Å–µ
		deleteInfoMsg := tgbotapi.NewDeleteMessage(chatID, session.InfoMessageID)
		h.requestAPI(deleteInfoMsg)

		// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –ª–µ—Å–∞
		delete(h.forestSessions, userID)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ª–µ—Å–∞
		msg := tgbotapi.NewMessage(chatID, "üå≤ –¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –≥—É—Å—Ç–æ–π –ª–µ—Å. –ü–æ–¥ –Ω–æ–≥–∞–º–∏ —Ö—Ä—É—Å—Ç–∏—Ç —Ç—Ä–∞–≤–∞, –≤ –∫—Ä–æ–Ω–∞—Ö –ø–æ—é—Ç –ø—Ç–∏—Ü—ã, –∞ –≥–¥–µ-—Ç–æ –≤–¥–∞–ª–µ–∫–µ —Å–ª—ã—à–µ–Ω —Ç—Ä–µ—Å–∫ –≤–µ—Ç–∫–∏ ‚Äî —Ç—ã –∑–¥–µ—Å—å –Ω–µ –æ–¥–∏–Ω...\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\nü™ì –†—É–±–∏—Ç—å –¥–µ—Ä–µ–≤—å—è\nüéØ –û—Ö–æ—Ç–∏—Ç—å—Å—è –Ω–∞ –¥–∏—á—å\nüåø –°–æ–±–∏—Ä–∞—Ç—å —Ç—Ä–∞–≤—ã –∏ —è–≥–æ–¥—ã")
		h.sendForestKeyboard(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–±–æ—Ä–∞
	if session, exists := h.gatheringSessions[userID]; exists {
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º —Å–±–æ—Ä–∞
		deleteFieldMsg := tgbotapi.NewDeleteMessage(chatID, session.FieldMessageID)
		h.requestAPI(deleteFieldMsg)

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±–æ—Ä–µ
		deleteInfoMsg := tgbotapi.NewDeleteMessage(chatID, session.InfoMessageID)
		h.requestAPI(deleteInfoMsg)

		// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å–±–æ—Ä–∞
		delete(h.gatheringSessions, userID)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ª–µ—Å–∞
		msg := tgbotapi.NewMessage(chatID, "üå≤ –¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –≥—É—Å—Ç–æ–π –ª–µ—Å. –ü–æ–¥ –Ω–æ–≥–∞–º–∏ —Ö—Ä—É—Å—Ç–∏—Ç —Ç—Ä–∞–≤–∞, –≤ –∫—Ä–æ–Ω–∞—Ö –ø–æ—é—Ç –ø—Ç–∏—Ü—ã, –∞ –≥–¥–µ-—Ç–æ –≤–¥–∞–ª–µ–∫–µ —Å–ª—ã—à–µ–Ω —Ç—Ä–µ—Å–∫ –≤–µ—Ç–∫–∏ ‚Äî —Ç—ã –∑–¥–µ—Å—å –Ω–µ –æ–¥–∏–Ω...\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\nü™ì –†—É–±–∏—Ç—å –¥–µ—Ä–µ–≤—å—è\nüéØ –û—Ö–æ—Ç–∏—Ç—å—Å—è –Ω–∞ –¥–∏—á—å\nüåø –°–æ–±–∏—Ä–∞—Ç—å —Ç—Ä–∞–≤—ã –∏ —è–≥–æ–¥—ã")
		h.sendForestKeyboard(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –æ—Ö–æ—Ç—ã
	if session, exists := h.huntingSessions[userID]; exists {
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º –æ—Ö–æ—Ç—ã
		deleteFieldMsg := tgbotapi.NewDeleteMessage(chatID, session.FieldMessageID)
		h.requestAPI(deleteFieldMsg)

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ö–æ—Ç–µ
		deleteInfoMsg := tgbotapi.NewDeleteMessage(chatID, session.InfoMessageID)
		h.requestAPI(deleteInfoMsg)

		// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –æ—Ö–æ—Ç—ã
		delete(h.huntingSessions, userID)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ª–µ—Å–∞
		msg := tgbotapi.NewMessage(chatID, "üå≤ –¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –≥—É—Å—Ç–æ–π –ª–µ—Å. –ü–æ–¥ –Ω–æ–≥–∞–º–∏ —Ö—Ä—É—Å—Ç–∏—Ç —Ç—Ä–∞–≤–∞, –≤ –∫—Ä–æ–Ω–∞—Ö –ø–æ—é—Ç –ø—Ç–∏—Ü—ã, –∞ –≥–¥–µ-—Ç–æ –≤–¥–∞–ª–µ–∫–µ —Å–ª—ã—à–µ–Ω —Ç—Ä–µ—Å–∫ –≤–µ—Ç–∫–∏ ‚Äî —Ç—ã –∑–¥–µ—Å—å –Ω–µ –æ–¥–∏–Ω...\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\nü™ì –†—É–±–∏—Ç—å –¥–µ—Ä–µ–≤—å—è\nüéØ –û—Ö–æ—Ç–∏—Ç—å—Å—è –Ω–∞ –¥–∏—á—å\nüåø –°–æ–±–∏—Ä–∞—Ç—å —Ç—Ä–∞–≤—ã –∏ —è–≥–æ–¥—ã")
		h.sendForestKeyboard(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
	if location, exists := h.playerLocation[userID]; exists {
		switch location {
		case "forest":
			// –ò–≥—Ä–æ–∫ –≤ –ª–µ—Å—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥–æ–±—ã—á–∏
			delete(h.playerLocation, userID) // –£–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
			msg := tgbotapi.NewMessage(chatID, "üåø –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:")
			h.sendGatheringKeyboard(msg)
		case "quest":
			// –ò–≥—Ä–æ–∫ –≤ –º–µ–Ω—é –∫–≤–µ—Å—Ç–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
			delete(h.playerLocation, userID) // –£–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
			msg := tgbotapi.NewMessage(chatID, "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.")
			h.sendWithKeyboard(msg)
		default:
			// –û–±—ã—á–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
			msg := tgbotapi.NewMessage(chatID, "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.")
			h.sendWithKeyboard(msg)
		}
	} else {
		// –û–±—ã—á–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		msg := tgbotapi.NewMessage(chatID, "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.")
		h.sendWithKeyboard(msg)
	}
}

func (h *BotHandlers) handleMine(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫—É–ª–¥–∞—É–Ω —à–∞—Ö—Ç—ã
	if cooldownEnd, exists := h.mineCooldowns[userID]; exists {
		if time.Now().Before(cooldownEnd) {
			// –ö—É–ª–¥–∞—É–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
			remainingTime := time.Until(cooldownEnd)
			msg := tgbotapi.NewMessage(message.Chat.ID,
				fmt.Sprintf("–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞—Ö—Ç—ã –æ—Å—Ç–∞–ª–æ—Å—å %d —Å–µ–∫.", int(remainingTime.Seconds())))
			h.sendMessage(msg)
			return
		} else {
			// –ö—É–ª–¥–∞—É–Ω –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
			delete(h.mineCooldowns, userID)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ç–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
	if player.Satiety <= 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°—ã—Ç–æ—Å—Ç—å 0. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–µ—Å—Ç—å.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —à–∞—Ö—Ç—É
	mine, err := h.db.GetOrCreateMine(player.ID)
	if err != nil {
		log.Printf("Error getting mine: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —à–∞—Ö—Ç–æ–π.")
		h.sendMessage(msg)
		return
	}

	// –ï—Å–ª–∏ —à–∞—Ö—Ç–∞ –±—ã–ª–∞ –∏—Å—Ç–æ—â–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
	if mine.IsExhausted {
		if err := h.db.SetMineExhausted(player.ID, false); err != nil {
			log.Printf("Error setting mine exhausted: %v", err)
		}
		mine.IsExhausted = false
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —à–∞—Ö—Ç—ã
	h.createNewMineSession(userID, message.Chat.ID, mine)
}

func (h *BotHandlers) createNewMineSession(userID int64, chatID int64, mine *models.Mine) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–ª–µ
	field := h.generateRandomMineField()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –∏ –ø–æ–ª—É—á–∞–µ–º MessageID
	fieldMessageID, infoMessageID := h.showMineField(chatID, mine, field)

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
	session := &models.MineSession{
		PlayerID:       userID,
		Resources:      field,
		IsActive:       true,
		IsMining:       false,
		StartedAt:      time.Now(),
		FieldMessageID: fieldMessageID,
		InfoMessageID:  infoMessageID,
	}

	h.mineSessions[userID] = session
}

func (h *BotHandlers) showMineField(chatID int64, mine *models.Mine, field [][]string) (int, int) {
	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < 3; i++ {
		var row []tgbotapi.InlineKeyboardButton
		for j := 0; j < 3; j++ {
			cell := field[i][j]
			var callbackData string

			switch cell {
			case "ü™®":
				callbackData = fmt.Sprintf("mine_stone_%d_%d", i, j)
			case "‚ö´":
				callbackData = fmt.Sprintf("mine_coal_%d_%d", i, j)
			default:
				callbackData = fmt.Sprintf("mine_empty_%d_%d", i, j)
				cell = " "
			}

			button := tgbotapi.NewInlineKeyboardButtonData(cell, callbackData)
			row = append(row, button)
		}
		keyboard = append(keyboard, row)
	}

	// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ —à–∞—Ö—Ç—ã —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
	fieldMsg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –¥–æ–±—ã—á–∏:")
	fieldMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	fieldResponse, _ := h.sendChattableWithResponse(fieldMsg)

	// –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := (mine.Level * 100) - mine.Experience

	infoText := fmt.Sprintf(`‚õè –®–∞—Ö—Ç–∞ (–£—Ä–æ–≤–µ–Ω—å %d)
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
ü™® –ö–∞–º–µ–Ω—å
‚ö´ –£–≥–æ–ª—å`, mine.Level, expToNext)

	mineKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	mineKeyboard.ResizeKeyboard = true

	infoMsg := tgbotapi.NewMessage(chatID, infoText)
	infoMsg.ReplyMarkup = mineKeyboard
	infoResponse, _ := h.sendChattableWithResponse(infoMsg)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—è –∏ ID –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	return fieldResponse.MessageID, infoResponse.MessageID
}

func (h *BotHandlers) generateRandomMineField() [][]string {
	// –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ 3x3
	field := make([][]string, 3)
	for i := range field {
		field[i] = make([]string, 3)
	}

	// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
	availableResources := []string{"ü™®", "‚ö´"}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
	now := time.Now()
	seed := now.UnixNano()

	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
	positions := [][2]int{
		{0, 0}, {0, 1}, {0, 2},
		{1, 0}, {1, 1}, {1, 2},
		{2, 0}, {2, 1}, {2, 2},
	}

	// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
	for i := len(positions) - 1; i > 0; i-- {
		j := int((seed + int64(i*13)) % int64(i+1))
		positions[i], positions[j] = positions[j], positions[i]
	}

	// –†–∞–∑–º–µ—â–∞–µ–º 3 —Ä–µ—Å—É—Ä—Å–∞ –≤ –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–∑–∏—Ü–∏—è—Ö
	for i := 0; i < 3; i++ {
		pos := positions[i]
		// –í—ã–±–∏—Ä–∞–µ–º —Ä–µ—Å—É—Ä—Å –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ
		resourceIndex := int((seed + int64(i*17) + int64(pos[0]*3) + int64(pos[1])) % int64(len(availableResources)))
		resourceType := availableResources[resourceIndex]
		field[pos[0]][pos[1]] = resourceType
	}

	return field
}

func (h *BotHandlers) createProgressBar(current, total int) string {
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∏–∑ 10 –±–ª–æ–∫–æ–≤
	barLength := 10
	filled := (current * barLength) / total
	if filled > barLength {
		filled = barLength
	}

	progressBar := ""
	for i := 0; i < barLength; i++ {
		if i < filled {
			progressBar += "üü©" // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –±–ª–æ–∫
		} else {
			progressBar += "‚¨ú" // –ü—É—Å—Ç–æ–π –±–ª–æ–∫
		}
	}

	return progressBar
}

func (h *BotHandlers) updateMiningProgress(userID int64, chatID int64, messageID int, resourceName string, totalDuration int, durability int, row, col int) {
	startTime := time.Now()
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			elapsed := time.Since(startTime).Seconds()
			progress := int(elapsed)

			if progress >= totalDuration {
				// –î–æ–±—ã—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
				h.completeMining(userID, chatID, resourceName, durability, messageID, row, col)
				return
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
			percentage := int((elapsed / float64(totalDuration)) * 100)
			progressBar := h.createProgressBar(progress, totalDuration)

			newText := fmt.Sprintf(`–ù–∞—á–∞–ª–∞—Å—å –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–∞ "%s". –í—Ä–µ–º—è –¥–æ–±—ã—á–∏ %d —Å–µ–∫.
			
%s %d%%`, resourceName, totalDuration, progressBar, percentage)

			// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			editMsg := tgbotapi.NewEditMessageText(chatID, messageID, newText)
			h.editMessage(editMsg)

		case <-time.After(time.Duration(totalDuration+1) * time.Second):
			// –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
			return
		}
	}
}

func (h *BotHandlers) handleField(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üåæ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.sendMessage(msg)
}

func (h *BotHandlers) handleLake(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üé£ –§—É–Ω–∫—Ü–∏—è –æ–∑–µ—Ä–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.sendMessage(msg)
}

func (h *BotHandlers) handleForest(message *tgbotapi.Message) {
	userID := message.From.ID

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
	h.playerLocation[userID] = "forest"

	forestText := `üå≤ –¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –≥—É—Å—Ç–æ–π –ª–µ—Å. –ü–æ–¥ –Ω–æ–≥–∞–º–∏ —Ö—Ä—É—Å—Ç–∏—Ç —Ç—Ä–∞–≤–∞, –≤ –∫—Ä–æ–Ω–∞—Ö –ø–æ—é—Ç –ø—Ç–∏—Ü—ã, –∞ –≥–¥–µ-—Ç–æ –≤–¥–∞–ª–µ–∫–µ —Å–ª—ã—à–µ–Ω —Ç—Ä–µ—Å–∫ –≤–µ—Ç–∫–∏ ‚Äî —Ç—ã –∑–¥–µ—Å—å –Ω–µ –æ–¥–∏–Ω...

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
ü™ì –†—É–±–∏—Ç—å –¥–µ—Ä–µ–≤—å—è  
üéØ –û—Ö–æ—Ç–∏—Ç—å—Å—è –Ω–∞ –¥–∏—á—å  
üåø –°–æ–±–∏—Ä–∞—Ç—å —Ç—Ä–∞–≤—ã –∏ —è–≥–æ–¥—ã`

	msg := tgbotapi.NewMessage(message.Chat.ID, forestText)
	h.sendForestKeyboard(msg)
}

func (h *BotHandlers) handleHunting(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫—É–ª–¥–∞—É–Ω –æ—Ö–æ—Ç—ã
	if cooldownEnd, exists := h.huntingCooldowns[userID]; exists {
		if time.Now().Before(cooldownEnd) {
			// –ö—É–ª–¥–∞—É–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
			remainingTime := time.Until(cooldownEnd)
			msg := tgbotapi.NewMessage(message.Chat.ID,
				fmt.Sprintf("–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ö–æ—Ç–Ω–∏—á—å–∏—Ö —É–≥–æ–¥–∏–π –æ—Å—Ç–∞–ª–æ—Å—å %d —Å–µ–∫.", int(remainingTime.Seconds())))
			h.sendMessage(msg)
			return
		} else {
			// –ö—É–ª–¥–∞—É–Ω –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
			delete(h.huntingCooldowns, userID)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ç–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
	if player.Satiety <= 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°—ã—Ç–æ—Å—Ç—å 0. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–µ—Å—Ç—å.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ—Ö–æ—Ç—É
	hunting, err := h.db.GetOrCreateHunting(player.ID)
	if err != nil {
		log.Printf("Error getting hunting: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ—Ö–æ—Ç–æ–π.")
		h.sendMessage(msg)
		return
	}

	// –ï—Å–ª–∏ –æ—Ö–æ—Ç–∞ –±—ã–ª–∞ –∏—Å—Ç–æ—â–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
	if hunting.IsExhausted {
		if err := h.db.SetHuntingExhausted(player.ID, false); err != nil {
			log.Printf("Error setting hunting exhausted: %v", err)
		}
		hunting.IsExhausted = false
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –æ—Ö–æ—Ç—ã
	h.createNewHuntingSession(userID, message.Chat.ID, hunting)
}

func (h *BotHandlers) createNewHuntingSession(userID int64, chatID int64, hunting *models.Hunting) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–ª–µ
	field := h.generateRandomHuntingField()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –∏ –ø–æ–ª—É—á–∞–µ–º MessageID
	fieldMessageID, infoMessageID := h.showHuntingField(chatID, hunting, field)

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
	session := &models.HuntingSession{
		PlayerID:       userID,
		Resources:      field,
		IsActive:       true,
		IsHunting:      false,
		StartedAt:      time.Now(),
		FieldMessageID: fieldMessageID,
		InfoMessageID:  infoMessageID,
	}

	h.huntingSessions[userID] = session
}

func (h *BotHandlers) generateRandomHuntingField() [][]string {
	// –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ 3x3
	field := make([][]string, 3)
	for i := range field {
		field[i] = make([]string, 3)
	}

	// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –æ—Ö–æ—Ç—ã
	availableResources := []string{"üê∞", "üê¶"}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
	now := time.Now()
	seed := now.UnixNano()

	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
	positions := [][2]int{
		{0, 0}, {0, 1}, {0, 2},
		{1, 0}, {1, 1}, {1, 2},
		{2, 0}, {2, 1}, {2, 2},
	}

	// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
	for i := len(positions) - 1; i > 0; i-- {
		j := int((seed + int64(i*13)) % int64(i+1))
		positions[i], positions[j] = positions[j], positions[i]
	}

	// –†–∞–∑–º–µ—â–∞–µ–º 3 —Ä–µ—Å—É—Ä—Å–∞ –≤ –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–∑–∏—Ü–∏—è—Ö
	for i := 0; i < 3; i++ {
		pos := positions[i]
		// –í—ã–±–∏—Ä–∞–µ–º —Ä–µ—Å—É—Ä—Å –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ
		resourceIndex := int((seed + int64(i*17) + int64(pos[0]*3) + int64(pos[1])) % int64(len(availableResources)))
		resourceType := availableResources[resourceIndex]
		field[pos[0]][pos[1]] = resourceType
	}

	return field
}

func (h *BotHandlers) showHuntingField(chatID int64, hunting *models.Hunting, field [][]string) (int, int) {
	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < 3; i++ {
		var row []tgbotapi.InlineKeyboardButton
		for j := 0; j < 3; j++ {
			cell := field[i][j]
			var callbackData string

			switch cell {
			case "üê∞":
				callbackData = fmt.Sprintf("hunt_rabbit_%d_%d", i, j)
			case "üê¶":
				callbackData = fmt.Sprintf("hunt_bird_%d_%d", i, j)
			default:
				callbackData = fmt.Sprintf("hunt_empty_%d_%d", i, j)
				cell = " "
			}

			button := tgbotapi.NewInlineKeyboardButtonData(cell, callbackData)
			row = append(row, button)
		}
		keyboard = append(keyboard, row)
	}

	// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ –æ—Ö–æ—Ç—ã —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
	fieldMsg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –æ—Ö–æ—Ç—ã:")
	fieldMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	fieldResponse, _ := h.sendChattableWithResponse(fieldMsg)

	// –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := (hunting.Level * 100) - hunting.Experience

	infoText := fmt.Sprintf(`üéØ –û—Ö–æ—Ç–∞ (–£—Ä–æ–≤–µ–Ω—å %d)
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
üê∞ –ö—Ä–æ–ª–∏–∫
üê¶ –ö—É—Ä–æ–ø–∞—Ç–∫–∞`, hunting.Level, expToNext)

	huntingKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	huntingKeyboard.ResizeKeyboard = true

	infoMsg := tgbotapi.NewMessage(chatID, infoText)
	infoMsg.ReplyMarkup = huntingKeyboard
	infoResponse, _ := h.sendChattableWithResponse(infoMsg)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—è –∏ ID –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	return fieldResponse.MessageID, infoResponse.MessageID
}

func (h *BotHandlers) startHuntingAtPosition(userID int64, chatID int64, resourceName string, duration int, callbackID string, rowStr, colStr string) {
	row, _ := strconv.Atoi(rowStr)
	col, _ := strconv.Atoi(colStr)

	h.startHunting(userID, chatID, resourceName, duration, callbackID, row, col)
}

func (h *BotHandlers) startHunting(userID int64, chatID int64, resourceName string, duration int, callbackID string, row, col int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —É–∂–µ –æ—Ö–æ—Ç–∞, –¥–æ–±—ã—á–∞ –≤ —à–∞—Ö—Ç–µ, —Ä—É–±–∫–∞ –≤ –ª–µ—Å—É –∏–ª–∏ –∫—Ä–∞—Ñ—Ç
	if _, exists := h.huntingTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –æ—Ö–æ—Ç—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}
	if _, exists := h.miningTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –¥–æ–±—ã—á—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}
	if _, exists := h.choppingTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –¥–æ–±—ã—á—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}
	if _, exists := h.gatheringTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –¥–æ–±—ã—á—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}
	if _, exists := h.craftingTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞ –∏–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—É–∫–∞
	hasBow, bowDurability, err := h.db.HasToolInInventory(player.ID, "–ü—Ä–æ—Å—Ç–æ–π –ª—É–∫")
	if err != nil {
		log.Printf("Error checking bow: %v", err)
		return
	}

	if !hasBow {
		msg := tgbotapi.NewMessage(chatID, `–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "–ü—Ä–æ—Å—Ç–æ–π –ª—É–∫".`)
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–µ–ª
	arrowQuantity, err := h.db.GetItemQuantityInInventory(player.ID, "–°—Ç—Ä–µ–ª—ã")
	if err != nil {
		log.Printf("Error getting arrow quantity: %v", err)
		arrowQuantity = 0
	}

	if arrowQuantity < 1 {
		msg := tgbotapi.NewMessage(chatID, `–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "–°—Ç—Ä–µ–ª—ã".`)
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackConfig := tgbotapi.NewCallback(callbackID, "")
	h.requestAPI(callbackConfig)

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ö–æ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if session, exists := h.huntingSessions[userID]; exists && session.ResultMessageID != 0 {
		deleteResultMsg := tgbotapi.NewDeleteMessage(chatID, session.ResultMessageID)
		h.requestAPI(deleteResultMsg)
		session.ResultMessageID = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ö–æ—Ç—ã
	initialText := fmt.Sprintf(`–ò–¥–µ—Ç –æ—Ö–æ—Ç–∞ –Ω–∞ "%s". –í—Ä–µ–º—è –æ—Ö–æ—Ç—ã %d —Å–µ–∫.
		
%s 0%%`, resourceName, duration, h.createProgressBar(0, 10))

	huntingMsg := tgbotapi.NewMessage(chatID, initialText)
	sentMsg, _ := h.sendMessageWithResponse(huntingMsg)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
	go h.updateHuntingProgress(userID, chatID, sentMsg.MessageID, resourceName, duration, bowDurability, row, col)

	// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–∞–π–º–µ—Ä–∞
	timer := time.NewTimer(time.Duration(duration) * time.Second)
	h.huntingTimers[userID] = timer
}

func (h *BotHandlers) updateHuntingProgress(userID int64, chatID int64, messageID int, resourceName string, totalDuration int, durability int, row, col int) {
	startTime := time.Now()
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			elapsed := time.Since(startTime).Seconds()
			progress := int(elapsed)

			if progress >= totalDuration {
				// –û—Ö–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
				h.completeHunting(userID, chatID, resourceName, durability, messageID, row, col)
				return
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
			percentage := int((elapsed / float64(totalDuration)) * 100)
			progressBar := h.createProgressBar(progress, totalDuration)

			newText := fmt.Sprintf(`–ù–∞—á–∞–ª–∞—Å—å –æ—Ö–æ—Ç–∞ –Ω–∞ "%s". –í—Ä–µ–º—è –æ—Ö–æ—Ç—ã %d —Å–µ–∫.
			
%s %d%%`, resourceName, totalDuration, progressBar, percentage)

			// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			editMsg := tgbotapi.NewEditMessageText(chatID, messageID, newText)
			h.editMessage(editMsg)

		case <-time.After(time.Duration(totalDuration+1) * time.Second):
			// –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
			return
		}
	}
}

func (h *BotHandlers) completeHunting(userID int64, chatID int64, resourceName string, oldDurability int, messageID int, row, col int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å –ª—É–∫–∞ –Ω–∞ 1
	newDurability := oldDurability - 1
	if newDurability <= 0 {
		// –õ—É–∫ —Å–ª–æ–º–∞–ª—Å—è, —É–¥–∞–ª—è–µ–º –µ–≥–æ
		err = h.db.RemoveItemFromInventory(player.ID, "–ü—Ä–æ—Å—Ç–æ–π –ª—É–∫", 1)
		if err != nil {
			log.Printf("Error removing broken bow: %v", err)
		}
	} else {
		// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å –ª—É–∫–∞
		err = h.db.UpdateToolDurability(player.ID, "–ü—Ä–æ—Å—Ç–æ–π –ª—É–∫", newDurability)
		if err != nil {
			log.Printf("Error updating bow durability: %v", err)
		}
	}

	// –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–µ–ª –Ω–∞ 1
	err = h.db.RemoveItemFromInventory(player.ID, "–°—Ç—Ä–µ–ª—ã", 1)
	if err != nil {
		log.Printf("Error removing arrow: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–±—ã—Ç—ã–π —Ä–µ—Å—É—Ä—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
	err = h.db.AddItemToInventory(player.ID, resourceName, 1)
	if err != nil {
		log.Printf("Error adding hunted resource: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –æ—Ö–æ—Ç—ã
	expGained := 2
	levelUp, newLevel, err := h.db.UpdateHuntingExperience(player.ID, expGained)
	if err != nil {
		log.Printf("Error updating hunting experience: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–µ–ª –ø–æ—Å–ª–µ –æ—Ö–æ—Ç—ã
	arrowsLeft, err := h.db.GetItemQuantityInInventory(player.ID, "–°—Ç—Ä–µ–ª—ã")
	if err != nil {
		log.Printf("Error getting arrows quantity: %v", err)
		arrowsLeft = 0
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	updatedPlayer, _ := h.db.GetPlayer(userID)
	updatedHunting, _ := h.db.GetOrCreateHunting(player.ID)

	// –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä
	if timer, exists := h.huntingTimers[userID]; exists {
		timer.Stop()
		delete(h.huntingTimers, userID)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –æ—Ö–æ—Ç—ã (—É–±–∏—Ä–∞–µ–º –¥–æ–±—ã—Ç—ã–π —Ä–µ—Å—É—Ä—Å)
	if session, exists := h.huntingSessions[userID]; exists {
		session.Resources[row][col] = ""
		h.updateHuntingField(chatID, session.Resources, session.FieldMessageID)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ä–µ—Å—É—Ä—Å—ã
		hasResources := false
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				if session.Resources[i][j] != "" {
					hasResources = true
					break
				}
			}
			if hasResources {
				break
			}
		}

		if !hasResources {
			// –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –¥–æ–±—ã—Ç—ã, –∏—Å—Ç–æ—â–∞–µ–º –æ—Ö–æ—Ç—É
			err = h.db.ExhaustHunting(userID)
			if err != nil {
				log.Printf("Error exhausting hunting: %v", err)
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ 1 –º–∏–Ω—É—Ç—É
			h.huntingCooldowns[userID] = time.Now().Add(1 * time.Minute)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º –æ—Ö–æ—Ç—ã
			deleteFieldMsg := tgbotapi.NewDeleteMessage(chatID, session.FieldMessageID)
			h.requestAPI(deleteFieldMsg)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ö–æ—Ç–µ
			deleteInfoMsg := tgbotapi.NewDeleteMessage(chatID, session.InfoMessageID)
			h.requestAPI(deleteInfoMsg)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–æ—â–µ–Ω–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ª–µ—Å–∞
			exhaustMsg := tgbotapi.NewMessage(chatID, `‚ö†Ô∏è –û—Ö–æ—Ç–Ω–∏—á—å–∏ —É–≥–æ–¥—å—è –∏—Å—Ç–æ—â–µ–Ω—ã! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å 1 –º–∏–Ω—É—Ç—É –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤.
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üéØ –û—Ö–æ—Ç–∞" —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.`)
			h.sendForestKeyboard(exhaustMsg)

			// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
			delete(h.huntingSessions, userID)
		} else {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ö–æ—Ç—ã
			h.updateHuntingInfoMessage(userID, chatID, updatedHunting, session.InfoMessageID)
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
	satietyText := ""
	if updatedPlayer != nil {
		satietyText = fmt.Sprintf(`
üçñ –°—ã—Ç–æ—Å—Ç—å: %d`, updatedPlayer.Satiety)
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := 0
	if updatedHunting != nil {
		expToNext = (updatedHunting.Level * 100) - updatedHunting.Experience
	}

	resultText := fmt.Sprintf(`‚úÖ –û—Ö–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–î–æ–±—ã—Ç–æ: %s x1
–û–ø—ã—Ç –æ—Ö–æ—Ç—ã: +%d
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞%s`, resourceName, expGained, expToNext, satietyText)

	if levelUp {
		resultText += fmt.Sprintf(`
üéâ –£—Ä–æ–≤–µ–Ω—å –æ—Ö–æ—Ç—ã –ø–æ–≤—ã—à–µ–Ω –¥–æ %d!`, newLevel)
	}

	if newDurability <= 0 {
		resultText += fmt.Sprintf(`
üíî –ü—Ä–æ—Å—Ç–æ–π –ª—É–∫ —Å–ª–æ–º–∞–ª—Å—è!
üèπ –°—Ç—Ä–µ–ª –æ—Å—Ç–∞–ª–æ—Å—å: %d`, arrowsLeft)
	} else {
		resultText += fmt.Sprintf(`
üèπ –ü—Ä–æ—á–Ω–æ—Å—Ç—å –ª—É–∫–∞: %d
üèπ –°—Ç—Ä–µ–ª –æ—Å—Ç–∞–ª–æ—Å—å: %d`, newDurability, arrowsLeft)
	}

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, resultText)
	h.editMessage(editMsg)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ —Å–µ—Å—Å–∏–∏
	if session, exists := h.huntingSessions[userID]; exists {
		session.ResultMessageID = messageID
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ 5 (–ø–µ—Ä–≤–∞—è –æ—Ö–æ—Ç–∞)
	h.checkHuntingQuestProgress(userID, chatID, player.ID)
}

func (h *BotHandlers) updateHuntingField(chatID int64, field [][]string, messageID int) {
	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < 3; i++ {
		var row []tgbotapi.InlineKeyboardButton
		for j := 0; j < 3; j++ {
			cell := field[i][j]
			var callbackData string

			switch cell {
			case "üê∞":
				callbackData = fmt.Sprintf("hunt_rabbit_%d_%d", i, j)
			case "üê¶":
				callbackData = fmt.Sprintf("hunt_bird_%d_%d", i, j)
			default:
				callbackData = fmt.Sprintf("hunt_empty_%d_%d", i, j)
				cell = " "
			}

			button := tgbotapi.NewInlineKeyboardButtonData(cell, callbackData)
			row = append(row, button)
		}
		keyboard = append(keyboard, row)
	}

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º
	editMsg := tgbotapi.NewEditMessageReplyMarkup(chatID, messageID, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	h.editMessage(editMsg)
}

func (h *BotHandlers) updateHuntingInfoMessage(userID int64, chatID int64, hunting *models.Hunting, messageID int) {
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := (hunting.Level * 100) - hunting.Experience

	infoText := fmt.Sprintf(`üéØ –û—Ö–æ—Ç–∞ (–£—Ä–æ–≤–µ–Ω—å %d)
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
üê∞ –ö—Ä–æ–ª–∏–∫
üê¶ –ö—É—Ä–æ–ø–∞—Ç–∫–∞`, hunting.Level, expToNext)

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	huntingKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	huntingKeyboard.ResizeKeyboard = true

	newMsg := tgbotapi.NewMessage(chatID, infoText)
	newMsg.ReplyMarkup = huntingKeyboard
	newResponse, _ := h.sendMessageWithResponse(newMsg)

	// –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
	if session, exists := h.huntingSessions[userID]; exists {
		session.InfoMessageID = newResponse.MessageID
	}
}

func (h *BotHandlers) handleChopping(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫—É–ª–¥–∞—É–Ω –ª–µ—Å–∞
	if cooldownEnd, exists := h.forestCooldowns[userID]; exists {
		if time.Now().Before(cooldownEnd) {
			// –ö—É–ª–¥–∞—É–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
			remainingTime := time.Until(cooldownEnd)
			msg := tgbotapi.NewMessage(message.Chat.ID,
				fmt.Sprintf("–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å %d —Å–µ–∫.", int(remainingTime.Seconds())))
			h.sendMessage(msg)
			return
		} else {
			// –ö—É–ª–¥–∞—É–Ω –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
			delete(h.forestCooldowns, userID)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ç–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
	if player.Satiety <= 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°—ã—Ç–æ—Å—Ç—å 0. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–µ—Å—Ç—å.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–µ—Å
	forest, err := h.db.GetOrCreateForest(player.ID)
	if err != nil {
		log.Printf("Error getting forest: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ª–µ—Å–æ–º.")
		h.sendMessage(msg)
		return
	}

	// –ï—Å–ª–∏ –ª–µ—Å –±—ã–ª –∏—Å—Ç–æ—â–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
	if forest.IsExhausted {
		if err := h.db.SetForestExhausted(player.ID, false); err != nil {
			log.Printf("Error setting forest exhausted: %v", err)
		}
		forest.IsExhausted = false
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ª–µ—Å–∞
	h.createNewForestSession(userID, message.Chat.ID, forest)
}

func (h *BotHandlers) createNewForestSession(userID int64, chatID int64, forest *models.Forest) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–ª–µ
	field := h.generateRandomForestField()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –∏ –ø–æ–ª—É—á–∞–µ–º MessageID
	fieldMessageID, infoMessageID := h.showForestField(chatID, forest, field)

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
	session := &models.ForestSession{
		PlayerID:       userID,
		Resources:      field,
		IsActive:       true,
		IsChopping:     false,
		StartedAt:      time.Now(),
		FieldMessageID: fieldMessageID,
		InfoMessageID:  infoMessageID,
	}

	h.forestSessions[userID] = session
}

func (h *BotHandlers) generateRandomForestField() [][]string {
	// –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ 3x3
	field := make([][]string, 3)
	for i := range field {
		field[i] = make([]string, 3)
	}

	// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –ª–µ—Å–∞
	availableResources := []string{"üå≥"}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
	now := time.Now()
	seed := now.UnixNano()

	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
	positions := [][2]int{
		{0, 0}, {0, 1}, {0, 2},
		{1, 0}, {1, 1}, {1, 2},
		{2, 0}, {2, 1}, {2, 2},
	}

	// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
	for i := len(positions) - 1; i > 0; i-- {
		j := int((seed + int64(i*13)) % int64(i+1))
		positions[i], positions[j] = positions[j], positions[i]
	}

	// –†–∞–∑–º–µ—â–∞–µ–º 3 —Ä–µ—Å—É—Ä—Å–∞ –≤ –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–∑–∏—Ü–∏—è—Ö
	for i := 0; i < 3; i++ {
		pos := positions[i]
		// –í—ã–±–∏—Ä–∞–µ–º —Ä–µ—Å—É—Ä—Å –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ
		resourceIndex := int((seed + int64(i*17) + int64(pos[0]*3) + int64(pos[1])) % int64(len(availableResources)))
		resourceType := availableResources[resourceIndex]
		field[pos[0]][pos[1]] = resourceType
	}

	return field
}

func (h *BotHandlers) showForestField(chatID int64, forest *models.Forest, field [][]string) (int, int) {
	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < 3; i++ {
		var row []tgbotapi.InlineKeyboardButton
		for j := 0; j < 3; j++ {
			cell := field[i][j]
			var callbackData string

			switch cell {
			case "üå≥":
				callbackData = fmt.Sprintf("forest_birch_%d_%d", i, j)
			default:
				callbackData = fmt.Sprintf("forest_empty_%d_%d", i, j)
				cell = " "
			}

			button := tgbotapi.NewInlineKeyboardButtonData(cell, callbackData)
			row = append(row, button)
		}
		keyboard = append(keyboard, row)
	}

	// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ª–µ—Å–∞ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
	fieldMsg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è —Ä—É–±–∫–∏:")
	fieldMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	fieldResponse, _ := h.sendChattableWithResponse(fieldMsg)

	// –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := (forest.Level * 100) - forest.Experience

	infoText := fmt.Sprintf(`ü™ì –†—É–±–∫–∞ (–£—Ä–æ–≤–µ–Ω—å %d)
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
üå≥ –ë–µ—Ä–µ–∑–∞`, forest.Level, expToNext)

	forestKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	forestKeyboard.ResizeKeyboard = true

	infoMsg := tgbotapi.NewMessage(chatID, infoText)
	infoMsg.ReplyMarkup = forestKeyboard
	infoResponse, _ := h.sendChattableWithResponse(infoMsg)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—è –∏ ID –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	return fieldResponse.MessageID, infoResponse.MessageID
}

func (h *BotHandlers) handleForestGathering(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫—É–ª–¥–∞—É–Ω —Å–±–æ—Ä–∞
	if cooldownEnd, exists := h.gatheringCooldowns[userID]; exists {
		if time.Now().Before(cooldownEnd) {
			// –ö—É–ª–¥–∞—É–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
			remainingTime := time.Until(cooldownEnd)
			msg := tgbotapi.NewMessage(message.Chat.ID,
				fmt.Sprintf("–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–≥–æ–¥–Ω—ã—Ö –∫—É—Å—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å %d —Å–µ–∫.", int(remainingTime.Seconds())))
			h.sendMessage(msg)
			return
		} else {
			// –ö—É–ª–¥–∞—É–Ω –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
			delete(h.gatheringCooldowns, userID)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ç–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
	if player.Satiety <= 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°—ã—Ç–æ—Å—Ç—å 0. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–µ—Å—Ç—å.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–±–æ—Ä–µ
	gathering, err := h.db.GetOrCreateGathering(player.ID)
	if err != nil {
		log.Printf("Error getting gathering: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å–±–æ—Ä–æ–º.")
		h.sendMessage(msg)
		return
	}

	// –ï—Å–ª–∏ —Å–±–æ—Ä –±—ã–ª –∏—Å—Ç–æ—â–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
	if gathering.IsExhausted {
		if err := h.db.SetGatheringExhausted(player.ID, false); err != nil {
			log.Printf("Error setting gathering exhausted: %v", err)
		}
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å–±–æ—Ä–∞
	h.createNewGatheringSession(userID, message.Chat.ID)
}

func (h *BotHandlers) createNewGatheringSession(userID int64, chatID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player in createNewGatheringSession: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–±–æ—Ä–µ
	gathering, err := h.db.GetOrCreateGathering(player.ID)
	if err != nil {
		log.Printf("Error getting gathering in createNewGatheringSession: %v", err)
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–ª–µ
	field := h.generateRandomGatheringField()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –∏ –ø–æ–ª—É—á–∞–µ–º MessageID
	fieldMessageID, infoMessageID := h.showGatheringField(chatID, field, gathering)

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
	session := &models.GatheringSession{
		PlayerID:       userID,
		Resources:      field,
		IsActive:       true,
		StartedAt:      time.Now(),
		FieldMessageID: fieldMessageID,
		InfoMessageID:  infoMessageID,
	}

	h.gatheringSessions[userID] = session
}

func (h *BotHandlers) generateRandomGatheringField() [][]string {
	// –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ 3x3
	field := make([][]string, 3)
	for i := range field {
		field[i] = make([]string, 3)
	}

	// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Å–±–æ—Ä–∞
	availableResources := []string{"üçá"}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
	now := time.Now()
	seed := now.UnixNano()

	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
	positions := [][2]int{
		{0, 0}, {0, 1}, {0, 2},
		{1, 0}, {1, 1}, {1, 2},
		{2, 0}, {2, 1}, {2, 2},
	}

	// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
	for i := len(positions) - 1; i > 0; i-- {
		j := int((seed + int64(i*13)) % int64(i+1))
		positions[i], positions[j] = positions[j], positions[i]
	}

	// –†–∞–∑–º–µ—â–∞–µ–º 3 —Ä–µ—Å—É—Ä—Å–∞ –≤ –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–∑–∏—Ü–∏—è—Ö
	for i := 0; i < 3; i++ {
		pos := positions[i]
		// –í—ã–±–∏—Ä–∞–µ–º —Ä–µ—Å—É—Ä—Å –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ
		resourceIndex := int((seed + int64(i*17) + int64(pos[0]*3) + int64(pos[1])) % int64(len(availableResources)))
		resourceType := availableResources[resourceIndex]
		field[pos[0]][pos[1]] = resourceType
	}

	return field
}

func (h *BotHandlers) showGatheringField(chatID int64, field [][]string, gathering *models.Gathering) (int, int) {
	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < 3; i++ {
		var row []tgbotapi.InlineKeyboardButton
		for j := 0; j < 3; j++ {
			cell := field[i][j]
			var callbackData string

			switch cell {
			case "üçá":
				callbackData = fmt.Sprintf("gathering_berry_%d_%d", i, j)
			default:
				callbackData = fmt.Sprintf("gathering_empty_%d_%d", i, j)
				cell = " "
			}

			button := tgbotapi.NewInlineKeyboardButtonData(cell, callbackData)
			row = append(row, button)
		}
		keyboard = append(keyboard, row)
	}

	// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ —Å–±–æ—Ä–∞ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
	fieldMsg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è —Å–±–æ—Ä–∞:")
	fieldMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	fieldResponse, _ := h.sendChattableWithResponse(fieldMsg)

	// –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := (gathering.Level * 100) - gathering.Experience

	infoText := fmt.Sprintf(`üåø –°–±–æ—Ä (–£—Ä–æ–≤–µ–Ω—å %d)
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
üçá –Ø–≥–æ–¥—ã`, gathering.Level, expToNext)

	gatheringKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	gatheringKeyboard.ResizeKeyboard = true

	infoMsg := tgbotapi.NewMessage(chatID, infoText)
	infoMsg.ReplyMarkup = gatheringKeyboard
	infoResponse, _ := h.sendChattableWithResponse(infoMsg)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—è –∏ ID –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	return fieldResponse.MessageID, infoResponse.MessageID
}

func (h *BotHandlers) handleCreateAxe(message *tgbotapi.Message) {
	h.showRecipe(message, "–ü—Ä–æ—Å—Ç–æ–π —Ç–æ–ø–æ—Ä")
}

func (h *BotHandlers) handleCreatePickaxe(message *tgbotapi.Message) {
	h.showRecipe(message, "–ü—Ä–æ—Å—Ç–∞—è –∫–∏—Ä–∫–∞")
}

func (h *BotHandlers) handleCreateBow(message *tgbotapi.Message) {
	h.showRecipe(message, "–ü—Ä–æ—Å—Ç–æ–π –ª—É–∫")
}

func (h *BotHandlers) handleCreateArrows(message *tgbotapi.Message) {
	h.showRecipe(message, "–°—Ç—Ä–µ–ª—ã")
}

func (h *BotHandlers) handleCreateKnife(message *tgbotapi.Message) {
	h.showRecipe(message, "–ü—Ä–æ—Å—Ç–æ–π –Ω–æ–∂")
}

func (h *BotHandlers) handleCreateFishingRod(message *tgbotapi.Message) {
	h.showRecipe(message, "–ü—Ä–æ—Å—Ç–∞—è —É–¥–æ—á–∫–∞")
}

func (h *BotHandlers) handleCreateBirchPlank(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Ä–µ–∑—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	birchQuantity, err := h.db.GetItemQuantityInInventory(player.ID, "–ë–µ—Ä–µ–∑–∞")
	if err != nil {
		log.Printf("Error getting birch quantity: %v", err)
		birchQuantity = 0
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ü–µ–ø—Ç —Å –∫–Ω–æ–ø–∫–æ–π
	recipeText := fmt.Sprintf(`–î–ª—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ "–ë–µ—Ä–µ–∑–æ–≤—ã–π –±—Ä—É—Å" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ª–µ–¥—É—é—â–µ–µ:
–ë–µ—Ä–µ–∑–∞ - %d/%d —à—Ç.`, birchQuantity, 2)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç
	canCraft := birchQuantity >= 2
	var buttonText string
	if canCraft {
		buttonText = "–°–æ–∑–¥–∞—Ç—å ‚úÖ"
	} else {
		buttonText = "–°–æ–∑–¥–∞—Ç—å ‚ùå"
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, recipeText)

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞—Ç—å
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, "craft_–ë–µ—Ä–µ–∑–æ–≤—ã–π –±—Ä—É—Å"),
		),
	)
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) handleCreateSimpleHut(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø—Ä–æ—Å—Ç–æ–π —Ö–∏–∂–∏–Ω—ã
	requirements := []struct {
		ItemName string
		Quantity int
	}{
		{"–ë–µ—Ä–µ–∑–∞", 20},
		{"–ë–µ—Ä–µ–∑–æ–≤—ã–π –±—Ä—É—Å", 10},
		{"–ö–∞–º–µ–Ω—å", 15},
		{"–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞", 10},
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞
	recipeText := "–î–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ª–µ–¥—É—é—â–µ–µ:"
	canBuild := true

	for _, req := range requirements {
		playerQuantity, err := h.db.GetItemQuantityInInventory(player.ID, req.ItemName)
		if err != nil {
			log.Printf("Error getting inventory quantity: %v", err)
			playerQuantity = 0
		}

		if playerQuantity < req.Quantity {
			canBuild = false
		}

		recipeText += fmt.Sprintf("\n%s - %d/%d —à—Ç.", req.ItemName, playerQuantity, req.Quantity)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å"
	var buttonText, callbackData string
	if canBuild {
		buttonText = "–°–æ–∑–¥–∞—Ç—å ‚úÖ"
		callbackData = "craft_–ü—Ä–æ—Å—Ç–∞—è —Ö–∏–∂–∏–Ω–∞"
	} else {
		buttonText = "–°–æ–∑–¥–∞—Ç—å ‚ùå"
		callbackData = "no_craft_–ü—Ä–æ—Å—Ç–∞—è —Ö–∏–∂–∏–Ω–∞"
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, recipeText)

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞—Ç—å
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
		),
	)
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) showRecipe(message *tgbotapi.Message, itemName string) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç
	recipe, err := h.db.GetRecipeRequirements(itemName)
	if err != nil {
		log.Printf("Error getting recipe: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞.")
		h.sendMessage(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞
	recipeText := fmt.Sprintf(`–î–ª—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ "%s" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ª–µ–¥—É—é—â–µ–µ:`, itemName)
	canCraft := true

	for _, ingredient := range recipe {
		playerQuantity, err := h.db.GetItemQuantityInInventory(player.ID, ingredient.ItemName)
		if err != nil {
			log.Printf("Error getting inventory quantity: %v", err)
			playerQuantity = 0
		}

		if playerQuantity < ingredient.Quantity {
			canCraft = false
		}

		recipeText += fmt.Sprintf("\n%s - %d/%d —à—Ç.", ingredient.ItemName, playerQuantity, ingredient.Quantity)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å"
	var buttonText string
	if canCraft {
		buttonText = "–°–æ–∑–¥–∞—Ç—å ‚úÖ"
	} else {
		buttonText = "–°–æ–∑–¥–∞—Ç—å ‚ùå"
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, recipeText)

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞—Ç—å
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, fmt.Sprintf("craft_%s", itemName)),
		),
	)
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	data := callback.Data

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
	if strings.HasPrefix(data, "page_") {
		parts := strings.Split(data, "_")
		if len(parts) != 3 {
			return
		}

		direction := parts[1]
		currentPage, _ := strconv.Atoi(parts[2])

		// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
		player, err := h.db.GetPlayer(userID)
		if err != nil {
			log.Printf("Error getting player: %v", err)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
		inventory, err := h.db.GetPlayerInventory(player.ID)
		if err != nil {
			log.Printf("Error getting inventory: %v", err)
			return
		}

		// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
		pageMap := make(map[int]struct {
			title string
			text  string
		})

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏—Ö —Ç–µ–∫—Å—Ç—ã
		for _, item := range inventory {
			if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1") && item.Quantity > 0 {
				pageMap[1] = struct {
					title string
					text  string
				}{
					title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ¬´–ó–∞–±—ã—Ç–∞—è —Ç–∏—à–∏–Ω–∞¬ª",
					text:  "–ú–∏—Ä –Ω–µ –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω –≤ –±–∏—Ç–≤–µ. –û–Ω –ø—Ä–æ—Å—Ç–æ... –∑–∞–±—ã–ª —Å–∞–º —Å–µ–±—è.\n–ì–æ–¥—ã –ø—Ä–æ—à–ª–∏ ‚Äî –º–æ–∂–µ—Ç, —Å—Ç–æ–ª–µ—Ç–∏—è, –º–æ–∂–µ—Ç, —Ç—ã—Å—è—á–µ–ª–µ—Ç–∏—è. –ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç —Ç–æ—á–Ω–æ. –û—Ç –±—ã–ª—ã—Ö –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏—à—å –∑–∞—Ä–æ—Å—à–∏–µ —Ä—É–∏–Ω—ã, –ø–æ—Ä–æ—Å—à–∏–µ –º—Ö–æ–º –∫–∞–º–Ω–∏ –∏ –ø–æ–ª—É—Å—Ç—ë—Ä—Ç—ã–µ –∑–Ω–∞–∫–∏, –≤—ã–≥—Ä–∞–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±–ª–æ–º–∫–∞—Ö.",
				}
			}
			if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2") && item.Quantity > 0 {
				pageMap[2] = struct {
					title string
					text  string
				}{
					title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ¬´–ü–µ–ø–µ–ª –ø–∞–º—è—Ç–∏¬ª",
					text:  "–õ—é–¥–∏ –∏—Å—á–µ–∑–ª–∏. –ù–µ –≤—Å–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –ø–∞–º—è—Ç—å –æ –Ω–∏—Ö ‚Äî —Ç–æ—á–Ω–æ.\n–ó–µ–º–ª—è –∑–∞–±—ã–ª–∞ –∏—Ö —à–∞–≥–∏. –ó–Ω–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ø–∞–ª–∏—Å—å, –±—É–¥—Ç–æ –ø–µ—Å–æ–∫ –≤ –≤–µ—Ç—Ä–µ. –û—Å—Ç–∞–ª–∏—Å—å –ª–∏—à—å —Å–Ω—ã, —Å–º—É—Ç–Ω—ã–µ –æ–±—Ä–∞–∑—ã, –∏ —Ç–∏—Ö–∏–π –∑–æ–≤ –∏–∑ –≥–ª—É–±–∏–Ω –º–∏—Ä–∞.",
				}
			}
			if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3") && item.Quantity > 0 {
				pageMap[3] = struct {
					title string
					text  string
				}{
					title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 ¬´–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ¬ª",
					text:  "–¢—ã ‚Äî –æ–¥–∏–Ω –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è.\n–ù–∏–∫—Ç–æ –Ω–µ —Å–∫–∞–∑–∞–ª —Ç–µ–±–µ, –∑–∞—á–µ–º —Ç—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è. –í —ç—Ç–æ–º –Ω–µ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤, –±–æ–≥–æ–≤ –∏–ª–∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤. –¢–æ–ª—å–∫–æ —Ç—ã, –¥–∏–∫–∞—è –∑–µ–º–ª—è ‚Äî –∏ —á—É–≤—Å—Ç–≤–æ, —á—Ç–æ –≤—Å—ë —ç—Ç–æ —É–∂–µ –±—ã–ª–æ. –ß—Ç–æ —Ç—ã –∑–¥–µ—Å—å –Ω–µ –≤–ø–µ—Ä–≤—ã–µ.",
				}
			}
			if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4") && item.Quantity > 0 {
				pageMap[4] = struct {
					title string
					text  string
				}{
					title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 ¬´–ë–µ–∑ –∏–º–µ–Ω–∏¬ª",
					text:  "–£ —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ù–∏ –¥–æ–º–∞, –Ω–∏ –∏–º–µ–Ω–∏, –Ω–∏ —Ü–µ–ª–∏. –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–∞—è –∫–∏—Ä–∫–∞, —Ç—ë–ø–ª—ã–π —Å–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞ –∏ –±–µ—Å–∫—Ä–∞–π–Ω—è—è, –∂–∏–≤–∞—è –∑–µ–º–ª—è, —á—Ç–æ –±—É–¥—Ç–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –∫–∞–∂–¥—ã–º —Ç–≤–æ–∏–º —à–∞–≥–æ–º.",
				}
			}
			if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5") && item.Quantity > 0 {
				pageMap[5] = struct {
					title string
					text  string
				}{
					title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–ò—Å–∫—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω¬ª",
					text:  "–ù–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å ‚Äî –µ—Å–ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ö–∏–∂–∏–Ω—É, –∑–∞–∂–µ—á—å –æ–≥–æ–Ω—å, –¥–æ–±—ã—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–º–µ–Ω—å‚Ä¶ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è.\n–í —Ç–µ–±–µ. –í —ç—Ç–æ–º –º–µ—Å—Ç–µ. –í —Å–∞–º–æ–π –ø–∞–º—è—Ç–∏ –º–∏—Ä–∞.\n–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–∂–∏–≤—à–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã ‚Äî –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ.",
				}
			}
			if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6") && item.Quantity > 0 {
				pageMap[6] = struct {
					title string
					text  string
				}{
					title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–ù–∞–±–ª—é–¥–∞—é—â–∏–π –ª–µ—Å¬ª",
					text:  "–ü–æ–Ω–∞—á–∞–ª—É –∑–µ–º–ª—è –º–æ–ª—á–∞–ª–∞. –¢—ã –∫–æ–ø–∞–ª, —Å—Ç—Ä–æ–∏–ª, –æ—Ö–æ—Ç–∏–ª—Å—è ‚Äî –∏ –≤—Å—ë –±—ã–ª–æ, –∫–∞–∫ –±—É–¥—Ç–æ –≤ –ø—É—Å—Ç–æ—Ç–µ.\n–ù–æ —Å –∫–∞–∂–¥—ã–º —É–¥–∞—Ä–æ–º –ø–æ –∫–∞–º–Ω—é, —Å –∫–∞–∂–¥—ã–º –¥—ã–º–∫–æ–º –Ω–∞–¥ –∫–æ—Å—Ç—Ä–æ–º —Ç—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ —á—Ç–æ-—Ç–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç. –ù–µ –≤—Ä–∞–∂–¥–µ–±–Ω–æ–µ. –ù–æ –¥—Ä–µ–≤–Ω–µ–µ.",
				}
			}
			if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7") && item.Quantity > 0 {
				pageMap[7] = struct {
					title string
					text  string
				}{
					title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª",
					text:  "–ò–Ω–æ–≥–¥–∞ –ø–æ –Ω–æ—á–∞–º —Ç—ã —Å–ª—ã—à–∞–ª, –∫–∞–∫ —à–µ–ª–µ—Å—Ç—è—Ç –ª–∏—Å—Ç—å—è –±–µ–∑ –≤–µ—Ç—Ä–∞.\n–ö–∞–∫ –≤ –∫–æ—Å—Ç—Ä–µ —Ç—Ä–µ—Å–∫–∞–µ—Ç—Å—è –Ω–µ –¥—Ä–æ–≤–∞, –∞ —Å–ª–æ–≤–∞. –ù–µ—Å–ª—ã—à–Ω—ã–µ, —à–µ–ø—á—É—â–∏–µ.\n–ó–µ–º–ª—è —Å–ª–æ–≤–Ω–æ –ø—ã—Ç–∞–ª–∞—Å—å –∑–∞–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π, –Ω–æ –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª–∞—Å—å.",
				}
			}
			if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8") && item.Quantity > 0 {
				pageMap[8] = struct {
					title string
					text  string
				}{
					title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª",
					text:  "–¢—ã –Ω–∞—á–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –≤–µ—â–∏. –ö–∞–º–µ–Ω—å —Å –≥–ª–∞–¥–∫–æ–π –≥—Ä–∞–Ω—å—é, —Å–ª–æ–≤–Ω–æ –≤—ã—Ä–µ–∑–∞–Ω–Ω–æ–π —Ä—É–∫–∞–º–∏.\n–û–±–ª–æ–º–æ–∫ –∫–æ—Å—Ç–∏ —Å –≤—ã–∂–∂–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º. –û–¥–∏–Ω–æ–∫—É—é —Å—Ç–∞—Ç—É—é, —Å—Ç–æ—è—â—É—é –ø–æ—Å—Ä–µ–¥–∏ –ª–µ—Å–∞, –ø–æ–∫—Ä—ã—Ç—É—é –º—Ö–æ–º, –Ω–æ –Ω–µ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—É—é.",
				}
			}
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
		var targetPage int
		if direction == "next" {
			for i := currentPage + 1; i <= 8; i++ {
				if _, exists := pageMap[i]; exists {
					targetPage = i
					break
				}
			}
		} else if direction == "prev" {
			for i := currentPage - 1; i >= 1; i-- {
				if _, exists := pageMap[i]; exists {
					targetPage = i
					break
				}
			}
		}

		if targetPage == 0 {
			// –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
			callbackConfig := tgbotapi.NewCallback(callback.ID, "")
			h.requestAPI(callbackConfig)
			return
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
		page := pageMap[targetPage]
		text := fmt.Sprintf("%s\n\n%s\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d", page.title, page.text, targetPage, len(pageMap))

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
		var keyboard tgbotapi.InlineKeyboardMarkup
		var row []tgbotapi.InlineKeyboardButton

		// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Å callback_data
		prevBtn := tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("page_prev_%d", targetPage))
		row = append(row, prevBtn)

		// –ö–Ω–æ–ø–∫–∞ "–î–∞–ª—å—à–µ" —Å callback_data
		nextBtn := tgbotapi.NewInlineKeyboardButtonData("–î–∞–ª—å—à–µ ‚ñ∂Ô∏è", fmt.Sprintf("page_next_%d", targetPage))
		row = append(row, nextBtn)

		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		editMsg := tgbotapi.NewEditMessageTextAndMarkup(
			callback.Message.Chat.ID,
			callback.Message.MessageID,
			text,
			keyboard,
		)
		h.editMessage(editMsg)

		// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
		callbackConfig := tgbotapi.NewCallback(callback.ID, "")
		h.requestAPI(callbackConfig)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ 6 –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		h.checkLorePagesQuestProgressSequential(userID, callback.Message.Chat.ID, player.ID, targetPage)

		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ callback'–∏
	if strings.HasPrefix(data, "mine_") {
		parts := strings.Split(data, "_")
		if len(parts) == 4 {
			row, col := parts[2], parts[3]
			h.startMiningAtPosition(userID, callback.Message.Chat.ID, "–ö–∞–º–µ–Ω—å", 10, callback.ID, row, col)
		}
	} else if strings.HasPrefix(data, "mine_coal_") {
		parts := strings.Split(data, "_")
		if len(parts) == 4 {
			row, col := parts[2], parts[3]
			h.startMiningAtPosition(userID, callback.Message.Chat.ID, "–£–≥–æ–ª—å", 20, callback.ID, row, col)
		}
	} else if strings.HasPrefix(data, "mine_empty_") {
		// –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–ó–¥–µ—Å—å –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤!")
		h.requestAPI(callbackConfig)
	} else if strings.HasPrefix(data, "forest_birch_") {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback'–∏ –æ—Ç –ª–µ—Å–∞
		parts := strings.Split(data, "_")
		if len(parts) == 4 {
			row, col := parts[2], parts[3]
			h.startChoppingAtPosition(userID, callback.Message.Chat.ID, "–ë–µ—Ä–µ–∑–∞", 10, callback.ID, row, col)
		}
	} else if strings.HasPrefix(data, "forest_empty_") {
		// –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–ó–¥–µ—Å—å –Ω–µ—Ç –¥–µ—Ä–µ–≤—å–µ–≤!")
		h.requestAPI(callbackConfig)
	} else if strings.HasPrefix(data, "gathering_berry_") {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback'–∏ –æ—Ç —Å–±–æ—Ä–∞
		parts := strings.Split(data, "_")
		if len(parts) == 4 {
			row, col := parts[2], parts[3]
			h.startGatheringAtPosition(userID, callback.Message.Chat.ID, "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞", 10, callback.ID, row, col)
		}
	} else if strings.HasPrefix(data, "gathering_empty_") {
		// –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–ó–¥–µ—Å—å –Ω–µ—Ç —è–≥–æ–¥!")
		h.requestAPI(callbackConfig)
	} else if strings.HasPrefix(data, "hunt_rabbit_") {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback'–∏ –æ—Ç –æ—Ö–æ—Ç—ã –Ω–∞ –∫—Ä–æ–ª–∏–∫–∞
		parts := strings.Split(data, "_")
		if len(parts) == 4 {
			row, col := parts[2], parts[3]
			h.startHuntingAtPosition(userID, callback.Message.Chat.ID, "–ö—Ä–æ–ª–∏–∫", 20, callback.ID, row, col)
		}
	} else if strings.HasPrefix(data, "hunt_bird_") {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback'–∏ –æ—Ç –æ—Ö–æ—Ç—ã –Ω–∞ –∫—É—Ä–æ–ø–∞—Ç–∫—É
		parts := strings.Split(data, "_")
		if len(parts) == 4 {
			row, col := parts[2], parts[3]
			h.startHuntingAtPosition(userID, callback.Message.Chat.ID, "–ö—É—Ä–æ–ø–∞—Ç–∫–∞", 20, callback.ID, row, col)
		}
	} else if strings.HasPrefix(data, "hunt_empty_") {
		// –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–ó–¥–µ—Å—å –Ω–µ—Ç –¥–æ–±—ã—á–∏!")
		h.requestAPI(callbackConfig)
	} else if strings.HasPrefix(data, "craft_") {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä–∞—Ñ—Ç
		itemName := strings.TrimPrefix(data, "craft_")
		h.handleCraftCallback(userID, callback.Message.Chat.ID, itemName, callback.ID)
	} else if strings.HasPrefix(data, "quest_accept_") {
		// –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–≤–µ—Å—Ç–∞
		questIDStr := strings.TrimPrefix(data, "quest_accept_")
		questID, _ := strconv.Atoi(questIDStr)
		h.handleQuestAccept(userID, callback.Message.Chat.ID, questID, callback.ID, callback.Message.MessageID)
	} else if strings.HasPrefix(data, "quest_decline_") {
		// –û—Ç–∫–∞–∑ –æ—Ç –∫–≤–µ—Å—Ç–∞
		h.handleQuestDecline(callback.Message.Chat.ID, callback.ID, callback.Message.MessageID)
	} else if strings.HasPrefix(data, "quest_accept_6") {
		// –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–≤–µ—Å—Ç–∞ 6
		questIDStr := strings.TrimPrefix(data, "quest_accept_")
		questID, _ := strconv.Atoi(questIDStr)
		h.handleQuestAccept(userID, callback.Message.Chat.ID, questID, callback.ID, callback.Message.MessageID)
	} else if strings.HasPrefix(data, "quest_decline_6") {
		// –û—Ç–∫–∞–∑ –æ—Ç –∫–≤–µ—Å—Ç–∞ 6
		h.handleQuestDecline(callback.Message.Chat.ID, callback.ID, callback.Message.MessageID)
	} else if strings.HasPrefix(data, "quest_accept_7") {
		// –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–≤–µ—Å—Ç–∞ 7
		questIDStr := strings.TrimPrefix(data, "quest_accept_")
		questID, _ := strconv.Atoi(questIDStr)
		h.handleQuestAccept(userID, callback.Message.Chat.ID, questID, callback.ID, callback.Message.MessageID)
	} else if strings.HasPrefix(data, "quest_decline_7") {
		// –û—Ç–∫–∞–∑ –æ—Ç –∫–≤–µ—Å—Ç–∞ 7
		h.handleQuestDecline(callback.Message.Chat.ID, callback.ID, callback.Message.MessageID)
	} else if strings.HasPrefix(data, "quest_accept_8") {
		// –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–≤–µ—Å—Ç–∞ 8
		questIDStr := strings.TrimPrefix(data, "quest_accept_")
		questID, _ := strconv.Atoi(questIDStr)
		h.handleQuestAccept(userID, callback.Message.Chat.ID, questID, callback.ID, callback.Message.MessageID)
	} else if strings.HasPrefix(data, "quest_decline_8") {
		// –û—Ç–∫–∞–∑ –æ—Ç –∫–≤–µ—Å—Ç–∞ 8
		h.handleQuestDecline(callback.Message.Chat.ID, callback.ID, callback.Message.MessageID)
	} else {
		// –û—Å—Ç–∞–ª—å–Ω—ã–µ callback
		// msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "üî® –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
		// h.sendMessage(msg)
		// callbackConfig := tgbotapi.NewCallback(callback.ID, "")
		// h.requestAPI(callbackConfig)
	}
}

func (h *BotHandlers) handleQuestAccept(userID int64, chatID int64, questID int, callbackID string, messageID int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		callbackConfig := tgbotapi.NewCallback(callbackID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞")
		h.requestAPI(callbackConfig)
		return
	}

	// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç
	err = h.db.UpdateQuestStatus(player.ID, questID, "active")
	if err != nil {
		log.Printf("Error updating quest status: %v", err)
		callbackConfig := tgbotapi.NewCallback(callbackID, "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞")
		h.requestAPI(callbackConfig)
		return
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackConfig := tgbotapi.NewCallback(callbackID, "–ö–≤–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç!")
	h.requestAPI(callbackConfig)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∫–≤–µ—Å—Ç–∞
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)
}

func (h *BotHandlers) handleQuestDecline(chatID int64, callbackID string, messageID int) {
	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackConfig := tgbotapi.NewCallback(callbackID, "–ö–≤–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")
	h.requestAPI(callbackConfig)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∫–≤–µ—Å—Ç–∞
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)
}

func (h *BotHandlers) handleCraftCallback(userID int64, chatID int64, itemName string, callbackID string) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		callbackConfig := tgbotapi.NewCallback(callbackID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞")
		h.requestAPI(callbackConfig)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä–∞—Ñ—Ç –±–µ—Ä–µ–∑–æ–≤–æ–≥–æ –±—Ä—É—Å–∞
	if itemName == "–ë–µ—Ä–µ–∑–æ–≤—ã–π –±—Ä—É—Å" {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Ä–µ–∑—ã
		birchQuantity, err := h.db.GetItemQuantityInInventory(player.ID, "–ë–µ—Ä–µ–∑–∞")
		if err != nil {
			log.Printf("Error getting birch quantity: %v", err)
			birchQuantity = 0
		}

		if birchQuantity < 2 {
			callbackConfig := tgbotapi.NewCallback(callbackID, `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–∞ "–ë–µ—Ä–µ–∑–∞"`)
			h.requestAPI(callbackConfig)
			return
		}

		// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)

		// –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏ —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:")
		h.sendMessage(msg)

		// –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∂–¥–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
		h.waitingForCraftQuantity[userID] = itemName
	} else {
		// –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
		callbackConfig := tgbotapi.NewCallback(callbackID, "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
		h.requestAPI(callbackConfig)
	}
}

func (h *BotHandlers) startMiningAtPosition(userID int64, chatID int64, resourceName string, duration int, callbackID string, rowStr, colStr string) {
	row, _ := strconv.Atoi(rowStr)
	col, _ := strconv.Atoi(colStr)

	h.startMining(userID, chatID, resourceName, duration, callbackID, row, col)
}

func (h *BotHandlers) startMining(userID int64, chatID int64, resourceName string, duration int, callbackID string, row, col int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —É–∂–µ –¥–æ–±—ã—á–∞ –≤ —à–∞—Ö—Ç–µ, —Ä—É–±–∫–∞ –≤ –ª–µ—Å—É –∏–ª–∏ –∫—Ä–∞—Ñ—Ç
	if _, exists := h.miningTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –¥–æ–±—ã—á—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}
	if _, exists := h.choppingTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –¥–æ–±—ã—á—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}
	if _, exists := h.craftingTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞ –∏–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∫–∏
	hasTool, durability, err := h.db.HasToolInInventory(player.ID, "–ü—Ä–æ—Å—Ç–∞—è –∫–∏—Ä–∫–∞")
	if err != nil {
		log.Printf("Error checking tool: %v", err)
		return
	}

	if !hasTool {
		msg := tgbotapi.NewMessage(chatID, `–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "–ü—Ä–æ—Å—Ç–∞—è –∫–∏—Ä–∫–∞".`)
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackConfig := tgbotapi.NewCallback(callbackID, "")
	h.requestAPI(callbackConfig)

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–æ–±—ã—á–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if session, exists := h.mineSessions[userID]; exists && session.ResultMessageID != 0 {
		deleteResultMsg := tgbotapi.NewDeleteMessage(chatID, session.ResultMessageID)
		h.requestAPI(deleteResultMsg)
		session.ResultMessageID = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –¥–æ–±—ã—á–∏ (–Ω–µ —É–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
	initialText := fmt.Sprintf(`–ù–∞—á–∞–ª–∞—Å—å –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–∞ "%s". –í—Ä–µ–º—è –¥–æ–±—ã—á–∏ %d —Å–µ–∫.
		
%s 0%%`, resourceName, duration, h.createProgressBar(0, 10))

	miningMsg := tgbotapi.NewMessage(chatID, initialText)
	sentMsg, _ := h.sendMessageWithResponse(miningMsg)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
	go h.updateMiningProgress(userID, chatID, sentMsg.MessageID, resourceName, duration, durability, row, col)

	// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–∞–π–º–µ—Ä–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤ updateMiningProgress)
	timer := time.NewTimer(time.Duration(duration) * time.Second)
	h.miningTimers[userID] = timer
}

func (h *BotHandlers) completeMining(userID int64, chatID int64, resourceName string, oldDurability int, messageID int, row, col int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
	if err := h.db.AddItemToInventory(player.ID, resourceName, 1); err != nil {
		log.Printf("Error adding item to inventory: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç –Ω–∞ –¥–æ–±—ã—á—É –∫–∞–º–Ω—è
	if resourceName == "–ö–∞–º–µ–Ω—å" {
		h.checkStoneQuestProgress(userID, chatID, player.ID)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å –∫–∏—Ä–∫–∏ –∏ —Å—ã—Ç–æ—Å—Ç—å (–ø—Ä–∏ –¥–æ–±—ã—á–µ –∏–≥—Ä–æ–∫ —Ç—Ä–∞—Ç–∏—Ç —ç–Ω–µ—Ä–≥–∏—é)
	if err := h.db.UpdateItemDurability(player.ID, "–ü—Ä–æ—Å—Ç–∞—è –∫–∏—Ä–∫–∞", 1); err != nil {
		log.Printf("Error updating item durability: %v", err)
	}
	if err := h.db.UpdatePlayerSatiety(player.ID, -1); err != nil {
		log.Printf("Error updating player satiety: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç —à–∞—Ö—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
	levelUp, newLevel, err := h.db.UpdateMineExperience(player.ID, 2)
	if err != nil {
		log.Printf("Error updating mine experience: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	updatedPlayer, _ := h.db.GetPlayer(userID)
	mine, _ := h.db.GetOrCreateMine(player.ID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±—ã—á–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	resultText := fmt.Sprintf(`‚úÖ –¢—ã –¥–æ–±—ã–ª %s!
–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: 2
–°—ã—Ç–æ—Å—Ç—å: %d/100
–ü—Ä–æ—á–Ω–æ—Å—Ç—å –∫–∏—Ä–∫–∏: %d/100
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞`,
		resourceName,
		updatedPlayer.Satiety,
		oldDurability-1,
		(mine.Level*100)-mine.Experience)

	msg := tgbotapi.NewMessage(chatID, resultText)
	resultResponse, _ := h.sendMessageWithResponse(msg)

	// –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏
	if levelUp {
		levelUpText := fmt.Sprintf("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–≤–µ–Ω—å —à–∞—Ö—Ç—ã –ø–æ–≤—ã—à–µ–Ω –¥–æ %d —É—Ä–æ–≤–Ω—è!", newLevel)
		levelUpMsg := tgbotapi.NewMessage(chatID, levelUpText)
		h.sendMessage(levelUpMsg)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ —Å–µ—Å—Å–∏–∏
	if session, exists := h.mineSessions[userID]; exists {
		session.ResultMessageID = resultResponse.MessageID
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π, –Ω–µ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å

	// –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä
	delete(h.miningTimers, userID)

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ - —É–±–∏—Ä–∞–µ–º –¥–æ–±—ã—Ç—ã–π —Ä–µ—Å—É—Ä—Å
	if session, exists := h.mineSessions[userID]; exists {
		session.Resources[row][col] = ""

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ä–µ—Å—É—Ä—Å—ã –≤ –ø–æ–ª–µ
		totalResources := 0
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				if session.Resources[i][j] != "" {
					totalResources++
				}
			}
		}

		if totalResources > 0 {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—è
			h.updateMineField(chatID, session.Resources, session.FieldMessageID)
			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
			h.updateMineInfoMessage(userID, chatID, mine, session.InfoMessageID)
		} else {
			// –ü–æ–ª–µ –∏—Å—Ç–æ—â–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
			if err := h.db.ExhaustMine(userID); err != nil {
				log.Printf("Error exhausting mine: %v", err)
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∫—É–ª–¥–∞—É–Ω–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
			h.mineCooldowns[userID] = time.Now().Add(60 * time.Second)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º —à–∞—Ö—Ç—ã
			deleteFieldMsg := tgbotapi.NewDeleteMessage(chatID, session.FieldMessageID)
			h.requestAPI(deleteFieldMsg)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞—Ö—Ç–µ
			deleteInfoMsg := tgbotapi.NewDeleteMessage(chatID, session.InfoMessageID)
			h.requestAPI(deleteInfoMsg)

			exhaustMsg := tgbotapi.NewMessage(chatID, `‚ö†Ô∏è –®–∞—Ö—Ç–∞ –∏—Å—Ç–æ—â–µ–Ω–∞! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å 1 –º–∏–Ω—É—Ç—É –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤.
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚õè –®–∞—Ö—Ç–∞" —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.`)
			h.sendGatheringKeyboard(exhaustMsg)

			// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
			delete(h.mineSessions, userID)
		}
	}
}

func (h *BotHandlers) updateMineField(chatID int64, field [][]string, messageID int) {
	text := "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –¥–æ–±—ã—á–∏:"

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < 3; i++ {
		var row []tgbotapi.InlineKeyboardButton
		for j := 0; j < 3; j++ {
			cell := field[i][j]
			var callbackData string

			switch cell {
			case "ü™®":
				callbackData = fmt.Sprintf("mine_stone_%d_%d", i, j)
			case "‚ö´":
				callbackData = fmt.Sprintf("mine_coal_%d_%d", i, j)
			default:
				callbackData = fmt.Sprintf("mine_empty_%d_%d", i, j)
				cell = " "
			}

			button := tgbotapi.NewInlineKeyboardButtonData(cell, callbackData)
			row = append(row, button)
		}
		keyboard = append(keyboard, row)
	}

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, messageID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	h.editMessage(editMsg)
}

func (h *BotHandlers) updateMineInfoMessage(userID int64, chatID int64, mine *models.Mine, messageID int) {
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := (mine.Level * 100) - mine.Experience

	infoText := fmt.Sprintf(`‚õè –®–∞—Ö—Ç–∞ (–£—Ä–æ–≤–µ–Ω—å %d)
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
ü™® –ö–∞–º–µ–Ω—å
‚ö´ –£–≥–æ–ª—å`, mine.Level, expToNext)

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	mineKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	mineKeyboard.ResizeKeyboard = true

	newMsg := tgbotapi.NewMessage(chatID, infoText)
	newMsg.ReplyMarkup = mineKeyboard
	newResponse, _ := h.sendMessageWithResponse(newMsg)

	// –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
	if session, exists := h.mineSessions[userID]; exists {
		session.InfoMessageID = newResponse.MessageID
	}
}

func (h *BotHandlers) sendWithKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
			tgbotapi.NewKeyboardButton("üåø –î–æ–±—ã—á–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üî® –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ"),
			tgbotapi.NewKeyboardButton("üìú –ö–≤–µ—Å—Ç—ã"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üèòÔ∏è –ü–æ—Å—Ç—Ä–æ–π–∫–∏"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) sendWorkplaceKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üõ† –í–µ—Ä—Å—Ç–∞–∫"),
			tgbotapi.NewKeyboardButton("üß± –ü–µ—á—å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üî• –ö–æ—Å—Ç–µ—Ä"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) sendMineKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —à–∞—Ö—Ç—ã
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) sendGatheringKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚õè –®–∞—Ö—Ç–∞"),
			tgbotapi.NewKeyboardButton("üåæ –ü–æ–ª–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üé£ –û–∑–µ—Ä–æ"),
			tgbotapi.NewKeyboardButton("üèû –õ–µ—Å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) sendForestKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ª–µ—Å–∞
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üéØ –û—Ö–æ—Ç–∞"),
			tgbotapi.NewKeyboardButton("üåø –°–±–æ—Ä"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("ü™ì –†—É–±–∫–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func (h *BotHandlers) sendMessage(msg tgbotapi.MessageConfig) {
	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("Failed to send message: %v", err)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func (h *BotHandlers) sendMessageWithResponse(msg tgbotapi.MessageConfig) (tgbotapi.Message, error) {
	response, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("Failed to send message: %v", err)
	}
	return response, err
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func (h *BotHandlers) editMessage(editMsg tgbotapi.Chattable) {
	if _, err := h.bot.Send(editMsg); err != nil {
		log.Printf("Failed to edit message: %v", err)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª—é–±–æ–≥–æ Chattable —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func (h *BotHandlers) sendChattableWithResponse(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	response, err := h.bot.Send(c)
	if err != nil {
		log.Printf("Failed to send chattable: %v", err)
	}
	return response, err
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func (h *BotHandlers) requestAPI(c tgbotapi.Chattable) {
	if _, err := h.bot.Request(c); err != nil {
		log.Printf("Failed to send API request: %v", err)
	}
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É–±–∫–∏ –ª–µ—Å–∞
func (h *BotHandlers) startChoppingAtPosition(userID int64, chatID int64, resourceName string, duration int, callbackID string, rowStr, colStr string) {
	row, _ := strconv.Atoi(rowStr)
	col, _ := strconv.Atoi(colStr)

	h.startChopping(userID, chatID, resourceName, duration, callbackID, row, col)
}

func (h *BotHandlers) startChopping(userID int64, chatID int64, resourceName string, duration int, callbackID string, row, col int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —É–∂–µ —Ä—É–±–∫–∞ –≤ –ª–µ—Å—É, –¥–æ–±—ã—á–∞ –≤ —à–∞—Ö—Ç–µ –∏–ª–∏ –∫—Ä–∞—Ñ—Ç
	if _, exists := h.choppingTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –¥–æ–±—ã—á—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}
	if _, exists := h.miningTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –¥–æ–±—ã—á—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}
	if _, exists := h.craftingTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞ –∏–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ø–æ—Ä–∞
	hasTool, durability, err := h.db.HasToolInInventory(player.ID, "–ü—Ä–æ—Å—Ç–æ–π —Ç–æ–ø–æ—Ä")
	if err != nil {
		log.Printf("Error checking tool: %v", err)
		return
	}

	if !hasTool {
		msg := tgbotapi.NewMessage(chatID, `–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "–ü—Ä–æ—Å—Ç–æ–π —Ç–æ–ø–æ—Ä".`)
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackConfig := tgbotapi.NewCallback(callbackID, "")
	h.requestAPI(callbackConfig)

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä—É–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if session, exists := h.forestSessions[userID]; exists && session.ResultMessageID != 0 {
		deleteResultMsg := tgbotapi.NewDeleteMessage(chatID, session.ResultMessageID)
		h.requestAPI(deleteResultMsg)
		session.ResultMessageID = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä—É–±–∫–∏
	initialText := fmt.Sprintf(`–ò–¥–µ—Ç —Ä—É–±–∫–∞ –¥–µ—Ä–µ–≤–∞ "%s". –í—Ä–µ–º—è —Ä—É–±–∫–∏ %d —Å–µ–∫.
		
%s 0%%`, resourceName, duration, h.createProgressBar(0, 10))

	choppingMsg := tgbotapi.NewMessage(chatID, initialText)
	sentMsg, _ := h.sendMessageWithResponse(choppingMsg)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
	go h.updateChoppingProgress(userID, chatID, sentMsg.MessageID, resourceName, duration, durability, row, col)

	// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–∞–π–º–µ—Ä–∞
	timer := time.NewTimer(time.Duration(duration) * time.Second)
	h.choppingTimers[userID] = timer
}

func (h *BotHandlers) updateChoppingProgress(userID int64, chatID int64, messageID int, resourceName string, totalDuration int, durability int, row, col int) {
	startTime := time.Now()
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			elapsed := time.Since(startTime).Seconds()
			progress := int(elapsed)

			if progress >= totalDuration {
				// –†—É–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
				h.completeChopping(userID, chatID, resourceName, durability, messageID, row, col)
				return
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
			percentage := int((elapsed / float64(totalDuration)) * 100)

			progressBar := h.createProgressBar(progress, totalDuration)

			newText := fmt.Sprintf(`–ù–∞—á–∞–ª–∞—Å—å —Ä—É–±–∫–∞ –¥–µ—Ä–µ–≤–∞ "%s". –í—Ä–µ–º—è —Ä—É–±–∫–∏ %d —Å–µ–∫.
			
%s %d%%`, resourceName, totalDuration, progressBar, percentage)

			// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			editMsg := tgbotapi.NewEditMessageText(chatID, messageID, newText)
			h.editMessage(editMsg)

		case <-time.After(time.Duration(totalDuration+1) * time.Second):
			// –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
			return
		}
	}
}

func (h *BotHandlers) completeChopping(userID int64, chatID int64, resourceName string, oldDurability int, messageID int, row, col int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
	if err := h.db.AddItemToInventory(player.ID, resourceName, 1); err != nil {
		log.Printf("Error adding item to inventory: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç –Ω–∞ —Ä—É–±–∫—É –±–µ—Ä–µ–∑—ã
	if resourceName == "–ë–µ—Ä–µ–∑–∞" {
		h.checkBirchQuestProgress(userID, chatID, player.ID)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å —Ç–æ–ø–æ—Ä–∞ –∏ —Å—ã—Ç–æ—Å—Ç—å
	if err := h.db.UpdateItemDurability(player.ID, "–ü—Ä–æ—Å—Ç–æ–π —Ç–æ–ø–æ—Ä", 1); err != nil {
		log.Printf("Error updating item durability: %v", err)
	}
	if err := h.db.UpdatePlayerSatiety(player.ID, -1); err != nil {
		log.Printf("Error updating player satiety: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –ª–µ—Å—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
	levelUp, newLevel, err := h.db.UpdateForestExperience(player.ID, 2)
	if err != nil {
		log.Printf("Error updating forest experience: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	updatedPlayer, _ := h.db.GetPlayer(userID)
	forest, _ := h.db.GetOrCreateForest(player.ID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä—É–±–∫–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	resultText := fmt.Sprintf(`‚úÖ –¢—ã —Å—Ä—É–±–∏–ª –¥–µ—Ä–µ–≤–æ "%s"!
–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: 2
–°—ã—Ç–æ—Å—Ç—å: %d/100
–ü—Ä–æ—á–Ω–æ—Å—Ç—å —Ç–æ–ø–æ—Ä–∞: %d/100
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞`,
		resourceName,
		updatedPlayer.Satiety,
		oldDurability-1,
		(forest.Level*100)-forest.Experience)

	msg := tgbotapi.NewMessage(chatID, resultText)
	resultResponse, _ := h.sendMessageWithResponse(msg)

	// –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏
	if levelUp {
		levelUpText := fmt.Sprintf("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–≤–µ–Ω—å –ª–µ—Å–∞ –ø–æ–≤—ã—à–µ–Ω –¥–æ %d —É—Ä–æ–≤–Ω—è!", newLevel)
		levelUpMsg := tgbotapi.NewMessage(chatID, levelUpText)
		h.sendMessage(levelUpMsg)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ —Å–µ—Å—Å–∏–∏
	if session, exists := h.forestSessions[userID]; exists {
		session.ResultMessageID = resultResponse.MessageID
	}

	// –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä
	delete(h.choppingTimers, userID)

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ - —É–±–∏—Ä–∞–µ–º —Å—Ä—É–±–ª–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
	if session, exists := h.forestSessions[userID]; exists {
		session.Resources[row][col] = ""

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ä–µ—Å—É—Ä—Å—ã –≤ –ø–æ–ª–µ
		totalResources := 0
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				if session.Resources[i][j] != "" {
					totalResources++
				}
			}
		}

		if totalResources > 0 {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—è
			h.updateForestField(chatID, session.Resources, session.FieldMessageID)
			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
			h.updateForestInfoMessage(userID, chatID, forest, session.InfoMessageID)
		} else {
			// –ü–æ–ª–µ –∏—Å—Ç–æ—â–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
			if err := h.db.ExhaustForest(userID); err != nil {
				log.Printf("Error exhausting forest: %v", err)
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∫—É–ª–¥–∞—É–Ω–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
			h.forestCooldowns[userID] = time.Now().Add(60 * time.Second)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º –ª–µ—Å–∞
			deleteFieldMsg := tgbotapi.NewDeleteMessage(chatID, session.FieldMessageID)
			h.requestAPI(deleteFieldMsg)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–µ—Å–µ
			deleteInfoMsg := tgbotapi.NewDeleteMessage(chatID, session.InfoMessageID)
			h.requestAPI(deleteInfoMsg)

			exhaustMsg := tgbotapi.NewMessage(chatID, `‚ö†Ô∏è –õ–µ—Å –∏—Å—Ç–æ—â–µ–Ω! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å 1 –º–∏–Ω—É—Ç—É –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤.
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "ü™ì –†—É–±–∫–∞" —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.`)
			h.sendForestKeyboard(exhaustMsg)

			// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
			delete(h.forestSessions, userID)
		}
	}
}

func (h *BotHandlers) updateForestField(chatID int64, field [][]string, messageID int) {
	text := "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è —Ä—É–±–∫–∏:"

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < 3; i++ {
		var row []tgbotapi.InlineKeyboardButton
		for j := 0; j < 3; j++ {
			cell := field[i][j]
			var callbackData string

			switch cell {
			case "üå≥":
				callbackData = fmt.Sprintf("forest_birch_%d_%d", i, j)
			default:
				callbackData = fmt.Sprintf("forest_empty_%d_%d", i, j)
				cell = " "
			}

			button := tgbotapi.NewInlineKeyboardButtonData(cell, callbackData)
			row = append(row, button)
		}
		keyboard = append(keyboard, row)
	}

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, messageID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	h.editMessage(editMsg)
}

func (h *BotHandlers) updateForestInfoMessage(userID int64, chatID int64, forest *models.Forest, messageID int) {
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := (forest.Level * 100) - forest.Experience

	infoText := fmt.Sprintf(`ü™ì –†—É–±–∫–∞ (–£—Ä–æ–≤–µ–Ω—å %d)
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
üå≥ –ë–µ—Ä–µ–∑–∞`, forest.Level, expToNext)

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	forestKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	forestKeyboard.ResizeKeyboard = true

	newMsg := tgbotapi.NewMessage(chatID, infoText)
	newMsg.ReplyMarkup = forestKeyboard
	newResponse, _ := h.sendMessageWithResponse(newMsg)

	// –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
	if session, exists := h.forestSessions[userID]; exists {
		session.InfoMessageID = newResponse.MessageID
	}
}

func (h *BotHandlers) handleQuest(message *tgbotapi.Message) {
	userID := message.From.ID

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
	h.playerLocation[userID] = "quest"

	questText := `üìú –ö–≤–µ—Å—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–µ—Å—Ç–æ–≤:`

	msg := tgbotapi.NewMessage(message.Chat.ID, questText)
	h.sendQuestKeyboard(msg)
}

func (h *BotHandlers) sendQuestKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–≤–µ—Å—Ç–æ–≤
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìñ –õ–æ—Ä"),
			tgbotapi.NewKeyboardButton("üóìÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) handleLore(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 1
	quest, err := h.db.GetPlayerQuest(player.ID, 1)
	if err != nil {
		log.Printf("Error getting quest: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
		h.sendMessage(msg)
		return
	}

	if quest == nil || quest.Status == "available" {
		// –ö–≤–µ—Å—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è
		if quest == nil {
			// –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
			err := h.db.CreateQuest(player.ID, 1, 5) // –ö–≤–µ—Å—Ç 1: –Ω–∞—Ä—É–±–∏—Ç—å 5 –±–µ—Ä–µ–∑—ã
			if err != nil {
				log.Printf("Error creating quest: %v", err)
				msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
				h.sendMessage(msg)
				return
			}
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
		questText := `ü™ì –ö–≤–µ—Å—Ç 1: –î–µ—Ä–µ–≤–æ –ø–æ–¥ —Ç–æ–ø–æ—Ä
–ó–∞–¥–∞–Ω–∏–µ: –ù–∞—Ä—É–±–∏ 5 –±–µ—Ä—ë–∑—ã.
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –î–æ–±—ã—á–∞/–õ–µ—Å/–†—É–±–∫–∞.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ¬´–ó–∞–±—ã—Ç–∞—è —Ç–∏—à–∏–Ω–∞¬ª`

		msg := tgbotapi.NewMessage(message.Chat.ID, questText)

		// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
		acceptBtn := tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å", "quest_accept_1")
		declineBtn := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–∞–∑", "quest_decline_1")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(acceptBtn, declineBtn),
		)
		msg.ReplyMarkup = keyboard
		h.sendMessage(msg)
		return
	}

	if quest.Status == "active" {
		// –ö–≤–µ—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
		activeText := fmt.Sprintf(`–ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: ü™ì –ö–≤–µ—Å—Ç 1: –î–µ—Ä–µ–≤–æ –ø–æ–¥ —Ç–æ–ø–æ—Ä
–ó–∞–¥–∞–Ω–∏–µ: –ù–∞—Ä—É–±–∏ 5 –±–µ—Ä—ë–∑—ã. (%d/5)
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –î–æ–±—ã—á–∞/–õ–µ—Å/–†—É–±–∫–∞.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ¬´–ó–∞–±—ã—Ç–∞—è —Ç–∏—à–∏–Ω–∞¬ª`, quest.Progress)

		msg := tgbotapi.NewMessage(message.Chat.ID, activeText)
		h.sendMessage(msg)
		return
	}

	if quest.Status == "completed" {
		// –ö–≤–µ—Å—Ç 1 –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 2
		quest2, err := h.db.GetPlayerQuest(player.ID, 2)
		if err != nil {
			log.Printf("Error getting quest 2: %v", err)
			msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
			h.sendMessage(msg)
			return
		}

		if quest2 == nil || quest2.Status == "available" {
			// –ö–≤–µ—Å—Ç 2 –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è
			if quest2 == nil {
				// –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç 2, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
				err := h.db.CreateQuest(player.ID, 2, 3) // –ö–≤–µ—Å—Ç 2: –¥–æ–±—ã—Ç—å 3 –∫–∞–º–Ω—è
				if err != nil {
					log.Printf("Error creating quest 2: %v", err)
					msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
					h.sendMessage(msg)
					return
				}
			}

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ 2
			questText := `‚õè –ö–≤–µ—Å—Ç 2: –í–≥–ª—É–±—å
–ó–∞–¥–∞–Ω–∏–µ: –î–æ–±—É–¥—å 3 –∫–∞–º–Ω—è.
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –î–æ–±—ã—á–∞/–®–∞—Ö—Ç–∞.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ¬´–ü—ã–ª—å –≤–µ–∫–æ–≤¬ª`

			msg := tgbotapi.NewMessage(message.Chat.ID, questText)

			// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
			acceptBtn := tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å", "quest_accept_2")
			declineBtn := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–∞–∑", "quest_decline_2")
			keyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(acceptBtn, declineBtn),
			)
			msg.ReplyMarkup = keyboard
			h.sendMessage(msg)
			return
		}

		if quest2.Status == "active" {
			// –ö–≤–µ—Å—Ç 2 –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
			activeText := fmt.Sprintf(`–ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: ‚õè –ö–≤–µ—Å—Ç 2: –í–≥–ª—É–±—å
–ó–∞–¥–∞–Ω–∏–µ: –î–æ–±—É–¥—å 3 –∫–∞–º–Ω—è (%d/3)
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –î–æ–±—ã—á–∞/–®–∞—Ö—Ç–∞.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ¬´–ü—ã–ª—å –≤–µ–∫–æ–≤¬ª`, quest2.Progress)

			msg := tgbotapi.NewMessage(message.Chat.ID, activeText)
			h.sendMessage(msg)
			return
		}

		if quest2.Status == "completed" {
			// –ö–≤–µ—Å—Ç 2 –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 3
			quest3, err := h.db.GetPlayerQuest(player.ID, 3)
			if err != nil {
				log.Printf("Error getting quest 3: %v", err)
				msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
				h.sendMessage(msg)
				return
			}

			if quest3 == nil || quest3.Status == "available" {
				// –ö–≤–µ—Å—Ç 3 –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è
				if quest3 == nil {
					// –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç 3, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
					err := h.db.CreateQuest(player.ID, 3, 3) // –ö–≤–µ—Å—Ç 3: —Å–æ–∑–¥–∞—Ç—å 3 –±–µ—Ä–µ–∑–æ–≤—ã—Ö –±—Ä—É—Å–∞
					if err != nil {
						log.Printf("Error creating quest 3: %v", err)
						msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
						h.sendMessage(msg)
						return
					}
				}

				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ 3
				questText := `ü™ö –ö–≤–µ—Å—Ç 3: –†—É–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
–ó–∞–¥–∞–Ω–∏–µ: –°–æ–∑–¥–∞–π 3 –±–µ—Ä—ë–∑–æ–≤—ã—Ö –±—Ä—É—Å–∞.
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ/–í–µ—Ä—Å—Ç–∞–∫ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä—É—Å–∞.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 ¬´–ü–µ—Ä–≤—ã–π —à–∞–≥¬ª`

				msg := tgbotapi.NewMessage(message.Chat.ID, questText)

				// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
				acceptBtn := tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å", "quest_accept_3")
				declineBtn := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–∞–∑", "quest_decline_3")
				keyboard := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(acceptBtn, declineBtn),
				)
				msg.ReplyMarkup = keyboard
				h.sendMessage(msg)
				return
			}

			if quest3.Status == "active" {
				// –ö–≤–µ—Å—Ç 3 –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
				activeText := fmt.Sprintf(`–ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: ü™ö –ö–≤–µ—Å—Ç 3: –†—É–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
–ó–∞–¥–∞–Ω–∏–µ: –°–æ–∑–¥–∞–π 3 –±–µ—Ä—ë–∑–æ–≤—ã—Ö –±—Ä—É—Å–∞ (%d/3)
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ/–í–µ—Ä—Å—Ç–∞–∫ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä—É—Å–∞.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 ¬´–ü–µ—Ä–≤—ã–π —à–∞–≥¬ª`, quest3.Progress)

				msg := tgbotapi.NewMessage(message.Chat.ID, activeText)
				h.sendMessage(msg)
				return
			}

			if quest3.Status == "completed" {
				// –ö–≤–µ—Å—Ç 3 –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 4
				quest4, err := h.db.GetPlayerQuest(player.ID, 4)
				if err != nil {
					log.Printf("Error getting quest 4: %v", err)
					msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
					h.sendMessage(msg)
					return
				}

				if quest4 == nil || quest4.Status == "available" {
					// –ö–≤–µ—Å—Ç 4 –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è
					if quest4 == nil {
						// –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç 4, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
						err := h.db.CreateQuest(player.ID, 4, 5) // –ö–≤–µ—Å—Ç 4: —Å–æ–±—Ä–∞—Ç—å 5 –ª–µ—Å–Ω—ã—Ö —è–≥–æ–¥
						if err != nil {
							log.Printf("Error creating quest 4: %v", err)
							msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
							h.sendMessage(msg)
							return
						}
					}

					// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ 4
					questText := `üçá –ö–≤–µ—Å—Ç 4: –î–∞—Ä –ª–µ—Å–∞
–ó–∞–¥–∞–Ω–∏–µ: –°–æ–±–µ—Ä–∏ 5 –ª–µ—Å–Ω—ã—Ö —è–≥–æ–¥.
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –î–æ–±—ã—á–∞/–õ–µ—Å/–°–±–æ—Ä.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 ¬´–ì–æ–ª–æ—Å –∑–µ–º–ª–∏¬ª`

					msg := tgbotapi.NewMessage(message.Chat.ID, questText)

					// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
					acceptBtn := tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å", "quest_accept_4")
					declineBtn := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–∞–∑", "quest_decline_4")
					keyboard := tgbotapi.NewInlineKeyboardMarkup(
						tgbotapi.NewInlineKeyboardRow(acceptBtn, declineBtn),
					)
					msg.ReplyMarkup = keyboard
					h.sendMessage(msg)
					return
				}

				if quest4.Status == "active" {
					// –ö–≤–µ—Å—Ç 4 –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
					activeText := fmt.Sprintf(`–ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: üçá –ö–≤–µ—Å—Ç 4: –î–∞—Ä –ª–µ—Å–∞
–ó–∞–¥–∞–Ω–∏–µ: –°–æ–±–µ—Ä–∏ 5 –ª–µ—Å–Ω—ã—Ö —è–≥–æ–¥ (%d/5)
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –î–æ–±—ã—á–∞/–õ–µ—Å/–°–±–æ—Ä.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 ¬´–ì–æ–ª–æ—Å –∑–µ–º–ª–∏¬ª`, quest4.Progress)

					msg := tgbotapi.NewMessage(message.Chat.ID, activeText)
					h.sendMessage(msg)
					return
				}

				if quest4.Status == "completed" {
					// –ö–≤–µ—Å—Ç 4 –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 5
					quest5, err := h.db.GetPlayerQuest(player.ID, 5)
					if err != nil {
						log.Printf("Error getting quest 5: %v", err)
						msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
						h.sendMessage(msg)
						return
					}
					if quest5 == nil || quest5.Status == "available" {
						// –ö–≤–µ—Å—Ç 5 –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è
						if quest5 == nil {
							// –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç 5, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
							err := h.db.CreateQuest(player.ID, 5, 1) // –ö–≤–µ—Å—Ç 5: —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–≤—É—é –æ—Ö–æ—Ç—É
							if err != nil {
								log.Printf("Error creating quest 5: %v", err)
								msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
								h.sendMessage(msg)
								return
							}
						}
						// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ 5
						questText := `üéØ –ö–≤–µ—Å—Ç 5: –ó–≤–µ—Ä–∏–Ω—ã–π –≤–∑–≥–ª—è–¥
–ó–∞–¥–∞–Ω–∏–µ: –°–æ–≤–µ—Ä—à–∏ –ø–µ—Ä–≤—É—é –æ—Ö–æ—Ç—É.
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –î–æ–±—ã—á–∞/–õ–µ—Å/–û—Ö–æ—Ç–∞.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª`
						msg := tgbotapi.NewMessage(message.Chat.ID, questText)
						acceptBtn := tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å", "quest_accept_5")
						declineBtn := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–∞–∑", "quest_decline_5")
						keyboard := tgbotapi.NewInlineKeyboardMarkup(
							tgbotapi.NewInlineKeyboardRow(acceptBtn, declineBtn),
						)
						msg.ReplyMarkup = keyboard
						h.sendMessage(msg)
						return
					}
					if quest5.Status == "active" {
						activeText := fmt.Sprintf(`–ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: üéØ –ö–≤–µ—Å—Ç 5: –ó–≤–µ—Ä–∏–Ω—ã–π –≤–∑–≥–ª—è–¥
–ó–∞–¥–∞–Ω–∏–µ: –°–æ–≤–µ—Ä—à–∏ –ø–µ—Ä–≤—É—é –æ—Ö–æ—Ç—É (%d/1)
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –î–æ–±—ã—á–∞/–õ–µ—Å/–û—Ö–æ—Ç–∞.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª`, quest5.Progress)
						msg := tgbotapi.NewMessage(message.Chat.ID, activeText)
						h.sendMessage(msg)
						return
					}
					if quest5.Status == "completed" {
						// –ö–≤–µ—Å—Ç 5 –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 6
						quest6, err := h.db.GetPlayerQuest(player.ID, 6)
						if err != nil {
							log.Printf("Error getting quest 6: %v", err)
							msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
							h.sendMessage(msg)
							return
						}
						if quest6 == nil || quest6.Status == "available" {
							// –ö–≤–µ—Å—Ç 6 –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è
							if quest6 == nil {
								// –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç 6, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
								err := h.db.CreateQuest(player.ID, 6, 5) // –ö–≤–µ—Å—Ç 6: –ø—Ä–æ—á–∏—Ç–∞—Ç—å 5 —Å—Ç—Ä–∞–Ω–∏—Ü
								if err != nil {
									log.Printf("Error creating quest 6: %v", err)
									msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
									h.sendMessage(msg)
									return
								}
							}
							// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ 6
							questText := `üìò –ö–≤–µ—Å—Ç 6: –ñ–∏–≤–æ–µ –•—Ä–∞–Ω–∏–ª–∏—â–µ
–ó–∞–¥–∞–Ω–∏–µ: –û—Ç–∫—Ä–æ–π 5 —Å—Ç—Ä–∞–Ω–∏—Ü –ª–æ—Ä–∞
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–°—Ç—Ä–∞–Ω–∏—Ü—ã"
–≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É look –∏ –∑–∞—Ç–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å 5 —Å—Ç—Ä–∞–Ω–∏—Ü –õ–û–†–∞ –æ—Ç 1-–π –¥–æ 5-–π.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–°–æ–Ω –æ –±–∞—à–Ω–µ¬ª`
							msg := tgbotapi.NewMessage(message.Chat.ID, questText)
							acceptBtn := tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å", "quest_accept_6")
							declineBtn := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–∞–∑", "quest_decline_6")
							keyboard := tgbotapi.NewInlineKeyboardMarkup(
								tgbotapi.NewInlineKeyboardRow(acceptBtn, declineBtn),
							)
							msg.ReplyMarkup = keyboard
							h.sendMessage(msg)
							return
						}
						if quest6.Status == "active" {
							activeText := fmt.Sprintf(`–ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: üìò –ö–≤–µ—Å—Ç 6: –ñ–∏–≤–æ–µ –•—Ä–∞–Ω–∏–ª–∏—â–µ
–ó–∞–¥–∞–Ω–∏–µ: –û—Ç–∫—Ä–æ–π 5 —Å—Ç—Ä–∞–Ω–∏—Ü –ª–æ—Ä–∞ (%d/5)
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–°–æ–Ω –æ –±–∞—à–Ω–µ¬ª`, quest6.Progress)
							msg := tgbotapi.NewMessage(message.Chat.ID, activeText)
							h.sendMessage(msg)
							return
						}
						if quest6.Status == "completed" {
							// –ö–≤–µ—Å—Ç 6 –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 7
							quest7, err := h.db.GetPlayerQuest(player.ID, 7)
							if err != nil {
								log.Printf("Error getting quest 7: %v", err)
								msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
								h.sendMessage(msg)
								return
							}

							if quest7 == nil || quest7.Status == "available" {
								// –ö–≤–µ—Å—Ç 7 –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è
								if quest7 == nil {
									// –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç 7, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
									err := h.db.CreateQuest(player.ID, 7, 3) // –ö–≤–µ—Å—Ç 7: —Å—ä–µ—Å—Ç—å 3 —è–≥–æ–¥—ã
									if err != nil {
										log.Printf("Error creating quest 7: %v", err)
										msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
										h.sendMessage(msg)
										return
									}
								}

								// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ 7
								questText := `üçá –ö–≤–µ—Å—Ç 7: –ü–µ—Ä–µ–∫—É—Å
–ó–∞–¥–∞–Ω–∏–µ: –°—ä–µ—à—å 3 –ª–µ—Å–Ω—ã–µ —è–≥–æ–¥—ã.
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–∞–ø—Ä–æ—Ç–∏–≤ –ø—Ä–µ–¥–º–µ—Ç–∞ "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞" –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É eat.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª`

								msg := tgbotapi.NewMessage(message.Chat.ID, questText)

								// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
								acceptBtn := tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å", "quest_accept_7")
								declineBtn := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–∞–∑", "quest_decline_7")
								keyboard := tgbotapi.NewInlineKeyboardMarkup(
									tgbotapi.NewInlineKeyboardRow(acceptBtn, declineBtn),
								)
								msg.ReplyMarkup = keyboard
								h.sendMessage(msg)
								return
							}

							if quest7.Status == "active" {
								// –ö–≤–µ—Å—Ç 7 –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
								activeText := fmt.Sprintf(`–ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: üçá –ö–≤–µ—Å—Ç 7: –ü–µ—Ä–µ–∫—É—Å
–ó–∞–¥–∞–Ω–∏–µ: –°—ä–µ—à—å 3 –ª–µ—Å–Ω—ã–µ —è–≥–æ–¥—ã (%d/3)
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–∞–ø—Ä–æ—Ç–∏–≤ –ø—Ä–µ–¥–º–µ—Ç–∞ "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞" –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É eat.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª`, quest7.Progress)

								msg := tgbotapi.NewMessage(message.Chat.ID, activeText)
								h.sendMessage(msg)
								return
							}

							if quest7.Status == "completed" {
								// –ö–≤–µ—Å—Ç 7 –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 8
								quest8, err := h.db.GetPlayerQuest(player.ID, 8)
								if err != nil {
									log.Printf("Error getting quest 8: %v", err)
									msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
									h.sendMessage(msg)
									return
								}

								if quest8 == nil || quest8.Status == "available" {
									// –ö–≤–µ—Å—Ç 8 –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è
									if quest8 == nil {
										// –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç 8, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
										err := h.db.CreateQuest(player.ID, 8, 1) // –ö–≤–µ—Å—Ç 8: –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ö–∏–∂–∏–Ω—É
										if err != nil {
											log.Printf("Error creating quest 8: %v", err)
											msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
											h.sendMessage(msg)
											return
										}
									}

									// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ —É–∂–µ —Ö–∏–∂–∏–Ω–∞
									if player.SimpleHutBuilt {
										// –ï—Å–ª–∏ —Ö–∏–∂–∏–Ω–∞ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞, —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–µ—Å—Ç
										err = h.db.UpdateQuestStatus(player.ID, 8, "completed")
										if err != nil {
											log.Printf("Error completing quest 8: %v", err)
											msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
											h.sendMessage(msg)
											return
										}

										// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
										err = h.db.UpdatePlayerExperience(player.ID, 10)
										if err != nil {
											log.Printf("Error updating player experience: %v", err)
										}

										err = h.db.AddItemToInventory(player.ID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª", 1)
										if err != nil {
											log.Printf("Error adding quest item to inventory: %v", err)
										}

										// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞
										questCompleteText := `üõñ –ö–≤–µ—Å—Ç 8: –ü–æ–¥ –∫—Ä—ã—à–µ–π –í–´–ü–û–õ–ù–ï–ù!
–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞:
üéñ 10 –æ–ø—ã—Ç–∞
üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª`

										msg := tgbotapi.NewMessage(message.Chat.ID, questCompleteText)
										h.sendMessage(msg)
										return
									}

									// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ 8
									questText := `üõñ –ö–≤–µ—Å—Ç 8: –ü–æ–¥ –∫—Ä—ã—à–µ–π
–ó–∞–¥–∞–Ω–∏–µ: –ü–æ—Å—Ç—Ä–æ–π –ø—Ä–æ—Å—Ç—É—é —Ö–∏–∂–∏–Ω—É.
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –ü–æ—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π —Ö–∏–∂–∏–Ω—ã.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª`

									msg := tgbotapi.NewMessage(message.Chat.ID, questText)
									acceptBtn := tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å", "quest_accept_8")
									declineBtn := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–∞–∑", "quest_decline_8")
									keyboard := tgbotapi.NewInlineKeyboardMarkup(
										tgbotapi.NewInlineKeyboardRow(acceptBtn, declineBtn),
									)
									msg.ReplyMarkup = keyboard
									h.sendMessage(msg)
									return
								}

								if quest8.Status == "active" {
									activeText := fmt.Sprintf(`–ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: üõñ –ö–≤–µ—Å—Ç 8: –ü–æ–¥ –∫—Ä—ã—à–µ–π
–ó–∞–¥–∞–Ω–∏–µ: –ü–æ—Å—Ç—Ä–æ–π –ø—Ä–æ—Å—Ç—É—é —Ö–∏–∂–∏–Ω—É (%d/1)
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –ü–æ—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π —Ö–∏–∂–∏–Ω—ã.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª`, quest8.Progress)
									msg := tgbotapi.NewMessage(message.Chat.ID, activeText)
									h.sendMessage(msg)
									return
								}

								if quest8.Status == "completed" {
									msg := tgbotapi.NewMessage(message.Chat.ID, "üéâ –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –≤—Å—é —Ü–µ–ø–æ—á–∫—É –õ–û–†-–∫–≤–µ—Å—Ç–æ–≤! –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...")
									h.sendMessage(msg)
									return
								}
							}
						}
					}
				}
			}
		}
	}

	// –ö–≤–µ—Å—Ç 4 –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 5
	quest5, err := h.db.GetPlayerQuest(player.ID, 5)
	if err != nil {
		log.Printf("Error getting quest 5: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
		h.sendMessage(msg)
		return
	}
	if quest5 == nil || quest5.Status == "available" {
		// –ö–≤–µ—Å—Ç 5 –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è
		if quest5 == nil {
			// –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç 5, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
			err := h.db.CreateQuest(player.ID, 5, 1) // –ö–≤–µ—Å—Ç 5: —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–≤—É—é –æ—Ö–æ—Ç—É
			if err != nil {
				log.Printf("Error creating quest 5: %v", err)
				msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
				h.sendMessage(msg)
				return
			}
		}
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ 5
		questText := `üéØ –ö–≤–µ—Å—Ç 5: –ó–≤–µ—Ä–∏–Ω—ã–π –≤–∑–≥–ª—è–¥
–ó–∞–¥–∞–Ω–∏–µ: –°–æ–≤–µ—Ä—à–∏ –ø–µ—Ä–≤—É—é –æ—Ö–æ—Ç—É.
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –î–æ–±—ã—á–∞/–õ–µ—Å/–û—Ö–æ—Ç–∞.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª`
		msg := tgbotapi.NewMessage(message.Chat.ID, questText)
		acceptBtn := tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å", "quest_accept_5")
		declineBtn := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–∞–∑", "quest_decline_5")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(acceptBtn, declineBtn),
		)
		msg.ReplyMarkup = keyboard
		h.sendMessage(msg)
		return
	}
	if quest5.Status == "active" {
		activeText := fmt.Sprintf(`–ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: üéØ –ö–≤–µ—Å—Ç 5: –ó–≤–µ—Ä–∏–Ω—ã–π –≤–∑–≥–ª—è–¥
–ó–∞–¥–∞–Ω–∏–µ: –°–æ–≤–µ—Ä—à–∏ –ø–µ—Ä–≤—É—é –æ—Ö–æ—Ç—É (%d/1)
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤ –î–æ–±—ã—á–∞/–õ–µ—Å/–û—Ö–æ—Ç–∞.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª`, quest5.Progress)
		msg := tgbotapi.NewMessage(message.Chat.ID, activeText)
		h.sendMessage(msg)
		return
	}
	if quest5.Status == "completed" {
		// –ö–≤–µ—Å—Ç 5 –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 6
		quest6, err := h.db.GetPlayerQuest(player.ID, 6)
		if err != nil {
			log.Printf("Error getting quest 6: %v", err)
			msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
			h.sendMessage(msg)
			return
		}
		if quest6 == nil || quest6.Status == "available" {
			// –ö–≤–µ—Å—Ç 6 –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è
			if quest6 == nil {
				// –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç 6, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
				err := h.db.CreateQuest(player.ID, 6, 5) // –ö–≤–µ—Å—Ç 6: –ø—Ä–æ—á–∏—Ç–∞—Ç—å 5 —Å—Ç—Ä–∞–Ω–∏—Ü
				if err != nil {
					log.Printf("Error creating quest 6: %v", err)
					msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
					h.sendMessage(msg)
					return
				}
			}
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ 6
			questText := `üìò –ö–≤–µ—Å—Ç 6: –ñ–∏–≤–æ–µ –•—Ä–∞–Ω–∏–ª–∏—â–µ
–ó–∞–¥–∞–Ω–∏–µ: –û—Ç–∫—Ä–æ–π 5 —Å—Ç—Ä–∞–Ω–∏—Ü –ª–æ—Ä–∞.
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–°—Ç—Ä–∞–Ω–∏—Ü—ã"
–≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É look –∏ –∑–∞—Ç–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å 5 —Å—Ç—Ä–∞–Ω–∏—Ü –õ–û–†–∞ –æ—Ç 1-–π –¥–æ 5-–π.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–°–æ–Ω –æ –±–∞—à–Ω–µ¬ª`
			msg := tgbotapi.NewMessage(message.Chat.ID, questText)
			acceptBtn := tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å", "quest_accept_6")
			declineBtn := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–∞–∑", "quest_decline_6")
			keyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(acceptBtn, declineBtn),
			)
			msg.ReplyMarkup = keyboard
			h.sendMessage(msg)
			return
		}
		if quest6.Status == "active" {
			activeText := fmt.Sprintf(`–ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: üìò –ö–≤–µ—Å—Ç 6: –ñ–∏–≤–æ–µ –•—Ä–∞–Ω–∏–ª–∏—â–µ
–ó–∞–¥–∞–Ω–∏–µ: –û—Ç–∫—Ä–æ–π 5 —Å—Ç—Ä–∞–Ω–∏—Ü –ª–æ—Ä–∞ (%d/5)
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–°—Ç—Ä–∞–Ω–∏—Ü—ã"
–≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É look –∏ –∑–∞—Ç–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å 5 —Å—Ç—Ä–∞–Ω–∏—Ü –õ–û–†–∞ –æ—Ç 1-–π –¥–æ 5-–π.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–°–æ–Ω –æ –±–∞—à–Ω–µ¬ª`, quest6.Progress)
			msg := tgbotapi.NewMessage(message.Chat.ID, activeText)
			h.sendMessage(msg)
			return
		}
		if quest6.Status == "completed" {
			msg := tgbotapi.NewMessage(message.Chat.ID, "üéâ –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –≤—Å—é —Ü–µ–ø–æ—á–∫—É –õ–û–†-–∫–≤–µ—Å—Ç–æ–≤! –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...")
			h.sendMessage(msg)
			return
		}
	}

	// –ö–≤–µ—Å—Ç 6 –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 7
	quest7, err := h.db.GetPlayerQuest(player.ID, 7)
	if err != nil {
		log.Printf("Error getting quest 7: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
		h.sendMessage(msg)
		return
	}
	if quest7 == nil || quest7.Status == "available" {
		// –ö–≤–µ—Å—Ç 7 –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è
		if quest7 == nil {
			// –°–æ–∑–¥–∞–µ–º –∫–≤–µ—Å—Ç 7, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
			err := h.db.CreateQuest(player.ID, 7, 3) // –ö–≤–µ—Å—Ç 7: —Å—ä–µ—Å—Ç—å 3 —è–≥–æ–¥—ã
			if err != nil {
				log.Printf("Error creating quest 7: %v", err)
				msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞.")
				h.sendMessage(msg)
				return
			}
		}
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ 7
		questText := `üçî –ö–≤–µ—Å—Ç 7: –ü–µ—Ä–µ–∫—É—Å
–ó–∞–¥–∞–Ω–∏–µ: –°—ä–µ—à—å 3 —è–≥–æ–¥—ã
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–∞–ø—Ä–æ—Ç–∏–≤ –õ–µ—Å–Ω–æ–π —è–≥–æ–¥—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É eat.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª`
		msg := tgbotapi.NewMessage(message.Chat.ID, questText)
		acceptBtn := tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–∏–Ω—è—Ç—å", "quest_accept_7")
		declineBtn := tgbotapi.NewInlineKeyboardButtonData("–û—Ç–∫–∞–∑", "quest_decline_7")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(acceptBtn, declineBtn),
		)
		msg.ReplyMarkup = keyboard
		h.sendMessage(msg)
		return
	}
	if quest7.Status == "active" {
		activeText := fmt.Sprintf(`–ê–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç: üçî –ö–≤–µ—Å—Ç 7: –ü–µ—Ä–µ–∫—É—Å
–ó–∞–¥–∞–Ω–∏–µ: –°—ä–µ—à—å 3 —è–≥–æ–¥—ã (%d/3)
–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–∞–ø—Ä–æ—Ç–∏–≤ –ø—Ä–µ–¥–º–µ—Ç–∞ "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞" –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É eat.
–ù–∞–≥—Ä–∞–¥–∞: üéñ 10 –æ–ø—ã—Ç–∞ + üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª`, quest7.Progress)
		msg := tgbotapi.NewMessage(message.Chat.ID, activeText)
		h.sendMessage(msg)
		return
	}
	if quest7.Status == "completed" {
		msg := tgbotapi.NewMessage(message.Chat.ID, "üéâ –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –≤—Å—é —Ü–µ–ø–æ—á–∫—É –õ–û–†-–∫–≤–µ—Å—Ç–æ–≤! –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...")
		h.sendMessage(msg)
		return
	}
}

func (h *BotHandlers) handleDailyQuests(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üóìÔ∏è –§—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.sendMessage(msg)
}

func (h *BotHandlers) handleWeeklyQuests(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üìÜ –§—É–Ω–∫—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.sendMessage(msg)
}

func (h *BotHandlers) handleBuildings(message *tgbotapi.Message) {
	userID := message.From.ID
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	buildingsText := "üèòÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n"
	builtText := ""

	if player.SimpleHutBuilt {
		builtText += "üè† –ü—Ä–æ—Å—Ç–∞—è —Ö–∏–∂–∏–Ω–∞ /open\n"
	} else {
		buildingsText += "–ü—Ä–æ—Å—Ç–∞—è —Ö–∏–∂–∏–Ω–∞ /create_simple_hut\n"
	}

	if builtText != "" {
		buildingsText += "\n–ü–æ—Å—Ç—Ä–æ–µ–Ω–æ:\n" + builtText
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, buildingsText)
	h.sendMessage(msg)
}

func (h *BotHandlers) handleLookPages(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
	inventory, err := h.db.GetPlayerInventory(player.ID)
	if err != nil {
		log.Printf("Error getting inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
	pageMap := make(map[int]struct {
		title string
		text  string
	})

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏—Ö —Ç–µ–∫—Å—Ç—ã
	for _, item := range inventory {
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1") && item.Quantity > 0 {
			pageMap[1] = struct {
				title string
				text  string
			}{
				title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ¬´–ó–∞–±—ã—Ç–∞—è —Ç–∏—à–∏–Ω–∞¬ª",
				text:  "–ú–∏—Ä –Ω–µ –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω –≤ –±–∏—Ç–≤–µ. –û–Ω –ø—Ä–æ—Å—Ç–æ... –∑–∞–±—ã–ª —Å–∞–º —Å–µ–±—è.\n–ì–æ–¥—ã –ø—Ä–æ—à–ª–∏ ‚Äî –º–æ–∂–µ—Ç, —Å—Ç–æ–ª–µ—Ç–∏—è, –º–æ–∂–µ—Ç, —Ç—ã—Å—è—á–µ–ª–µ—Ç–∏—è. –ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç —Ç–æ—á–Ω–æ. –û—Ç –±—ã–ª—ã—Ö –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏—à—å –∑–∞—Ä–æ—Å—à–∏–µ —Ä—É–∏–Ω—ã, –ø–æ—Ä–æ—Å—à–∏–µ –º—Ö–æ–º –∫–∞–º–Ω–∏ –∏ –ø–æ–ª—É—Å—Ç—ë—Ä—Ç—ã–µ –∑–Ω–∞–∫–∏, –≤—ã–≥—Ä–∞–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±–ª–æ–º–∫–∞—Ö.",
			}
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2") && item.Quantity > 0 {
			pageMap[2] = struct {
				title string
				text  string
			}{
				title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ¬´–ü–µ–ø–µ–ª –ø–∞–º—è—Ç–∏¬ª",
				text:  "–õ—é–¥–∏ –∏—Å—á–µ–∑–ª–∏. –ù–µ –≤—Å–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –ø–∞–º—è—Ç—å –æ –Ω–∏—Ö ‚Äî —Ç–æ—á–Ω–æ.\n–ó–µ–º–ª—è –∑–∞–±—ã–ª–∞ –∏—Ö —à–∞–≥–∏. –ó–Ω–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ø–∞–ª–∏—Å—å, –±—É–¥—Ç–æ –ø–µ—Å–æ–∫ –≤ –≤–µ—Ç—Ä–µ. –û—Å—Ç–∞–ª–∏—Å—å –ª–∏—à—å —Å–Ω—ã, —Å–º—É—Ç–Ω—ã–µ –æ–±—Ä–∞–∑—ã, –∏ —Ç–∏—Ö–∏–π –∑–æ–≤ –∏–∑ –≥–ª—É–±–∏–Ω –º–∏—Ä–∞.",
			}
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3") && item.Quantity > 0 {
			pageMap[3] = struct {
				title string
				text  string
			}{
				title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 ¬´–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ¬ª",
				text:  "–¢—ã ‚Äî –æ–¥–∏–Ω –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è.\n–ù–∏–∫—Ç–æ –Ω–µ —Å–∫–∞–∑–∞–ª —Ç–µ–±–µ, –∑–∞—á–µ–º —Ç—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è. –í —ç—Ç–æ–º –Ω–µ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤, –±–æ–≥–æ–≤ –∏–ª–∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤. –¢–æ–ª—å–∫–æ —Ç—ã, –¥–∏–∫–∞—è –∑–µ–º–ª—è ‚Äî –∏ —á—É–≤—Å—Ç–≤–æ, —á—Ç–æ –≤—Å—ë —ç—Ç–æ —É–∂–µ –±—ã–ª–æ. –ß—Ç–æ —Ç—ã –∑–¥–µ—Å—å –Ω–µ –≤–ø–µ—Ä–≤—ã–µ.",
			}
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4") && item.Quantity > 0 {
			pageMap[4] = struct {
				title string
				text  string
			}{
				title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 ¬´–ë–µ–∑ –∏–º–µ–Ω–∏¬ª",
				text:  "–£ —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ù–∏ –¥–æ–º–∞, –Ω–∏ –∏–º–µ–Ω–∏, –Ω–∏ —Ü–µ–ª–∏. –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–∞—è –∫–∏—Ä–∫–∞, —Ç—ë–ø–ª—ã–π —Å–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞ –∏ –±–µ—Å–∫—Ä–∞–π–Ω—è—è, –∂–∏–≤–∞—è –∑–µ–º–ª—è, —á—Ç–æ –±—É–¥—Ç–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –∫–∞–∂–¥—ã–º —Ç–≤–æ–∏–º —à–∞–≥–æ–º.",
			}
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5") && item.Quantity > 0 {
			pageMap[5] = struct {
				title string
				text  string
			}{
				title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–ò—Å–∫—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω¬ª",
				text:  "–ù–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å ‚Äî –µ—Å–ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ö–∏–∂–∏–Ω—É, –∑–∞–∂–µ—á—å –æ–≥–æ–Ω—å, –¥–æ–±—ã—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–º–µ–Ω—å‚Ä¶ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è.\n–í —Ç–µ–±–µ. –í —ç—Ç–æ–º –º–µ—Å—Ç–µ. –í —Å–∞–º–æ–π –ø–∞–º—è—Ç–∏ –º–∏—Ä–∞.\n–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–∂–∏–≤—à–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã ‚Äî –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ.",
			}
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6") && item.Quantity > 0 {
			pageMap[6] = struct {
				title string
				text  string
			}{
				title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–ù–∞–±–ª—é–¥–∞—é—â–∏–π –ª–µ—Å¬ª",
				text:  "–ü–æ–Ω–∞—á–∞–ª—É –∑–µ–º–ª—è –º–æ–ª—á–∞–ª–∞. –¢—ã –∫–æ–ø–∞–ª, —Å—Ç—Ä–æ–∏–ª, –æ—Ö–æ—Ç–∏–ª—Å—è ‚Äî –∏ –≤—Å—ë –±—ã–ª–æ, –∫–∞–∫ –±—É–¥—Ç–æ –≤ –ø—É—Å—Ç–æ—Ç–µ.\n–ù–æ —Å –∫–∞–∂–¥—ã–º —É–¥–∞—Ä–æ–º –ø–æ –∫–∞–º–Ω—é, —Å –∫–∞–∂–¥—ã–º –¥—ã–º–∫–æ–º –Ω–∞–¥ –∫–æ—Å—Ç—Ä–æ–º —Ç—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ —á—Ç–æ-—Ç–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç. –ù–µ –≤—Ä–∞–∂–¥–µ–±–Ω–æ–µ. –ù–æ –¥—Ä–µ–≤–Ω–µ–µ.",
			}
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7") && item.Quantity > 0 {
			pageMap[7] = struct {
				title string
				text  string
			}{
				title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª",
				text:  "–ò–Ω–æ–≥–¥–∞ –ø–æ –Ω–æ—á–∞–º —Ç—ã —Å–ª—ã—à–∞–ª, –∫–∞–∫ —à–µ–ª–µ—Å—Ç—è—Ç –ª–∏—Å—Ç—å—è –±–µ–∑ –≤–µ—Ç—Ä–∞.\n–ö–∞–∫ –≤ –∫–æ—Å—Ç—Ä–µ —Ç—Ä–µ—Å–∫–∞–µ—Ç—Å—è –Ω–µ –¥—Ä–æ–≤–∞, –∞ —Å–ª–æ–≤–∞. –ù–µ—Å–ª—ã—à–Ω—ã–µ, —à–µ–ø—á—É—â–∏–µ.\n–ó–µ–º–ª—è —Å–ª–æ–≤–Ω–æ –ø—ã—Ç–∞–ª–∞—Å—å –∑–∞–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π, –Ω–æ –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª–∞—Å—å.",
			}
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8") && item.Quantity > 0 {
			pageMap[8] = struct {
				title string
				text  string
			}{
				title: "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª",
				text:  "–¢—ã –Ω–∞—á–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –≤–µ—â–∏. –ö–∞–º–µ–Ω—å —Å –≥–ª–∞–¥–∫–æ–π –≥—Ä–∞–Ω—å—é, —Å–ª–æ–≤–Ω–æ –≤—ã—Ä–µ–∑–∞–Ω–Ω–æ–π —Ä—É–∫–∞–º–∏.\n–û–±–ª–æ–º–æ–∫ –∫–æ—Å—Ç–∏ —Å –≤—ã–∂–∂–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º. –û–¥–∏–Ω–æ–∫—É—é —Å—Ç–∞—Ç—É—é, —Å—Ç–æ—è—â—É—é –ø–æ—Å—Ä–µ–¥–∏ –ª–µ—Å–∞, –ø–æ–∫—Ä—ã—Ç—É—é –º—Ö–æ–º, –Ω–æ –Ω–µ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—É—é.",
			}
		}
	}

	if len(pageMap) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "üìñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü.")
		h.sendMessage(msg)
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
	var firstPage int
	for i := 1; i <= 8; i++ {
		if _, exists := pageMap[i]; exists {
			firstPage = i
			break
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	page := pageMap[firstPage]
	text := fmt.Sprintf("%s\n\n%s\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d", page.title, page.text, firstPage, len(pageMap))

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	var keyboard tgbotapi.InlineKeyboardMarkup
	var row []tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Å callback_data
	prevBtn := tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("page_prev_%d", firstPage))
	row = append(row, prevBtn)

	// –ö–Ω–æ–ø–∫–∞ "–î–∞–ª—å—à–µ" —Å callback_data
	// –ö–Ω–æ–ø–∫–∞ "–î–∞–ª—å—à–µ" –∞–∫—Ç–∏–≤–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
	nextBtn := tgbotapi.NewInlineKeyboardButtonData("–î–∞–ª—å—à–µ ‚ñ∂Ô∏è", fmt.Sprintf("page_next_%d", firstPage))
	row = append(row, nextBtn)

	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ 6 –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	h.checkLorePagesQuestProgressSequential(message.From.ID, message.Chat.ID, player.ID, firstPage)
}

func (h *BotHandlers) handleReadPage(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
	inventory, err := h.db.GetPlayerInventory(player.ID)
	if err != nil {
		log.Printf("Error getting inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
	pageTexts := make(map[string]string)
	pageMap := make(map[int]string)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏—Ö —Ç–µ–∫—Å—Ç—ã
	for _, item := range inventory {
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1") && item.Quantity > 0 {
			pageMap[1] = "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ¬´–ó–∞–±—ã—Ç–∞—è —Ç–∏—à–∏–Ω–∞¬ª"
			pageTexts["üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ¬´–ó–∞–±—ã—Ç–∞—è —Ç–∏—à–∏–Ω–∞¬ª"] = `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ¬´–ó–∞–±—ã—Ç–∞—è —Ç–∏—à–∏–Ω–∞¬ª

"–ú–∏—Ä –Ω–µ –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω –≤ –±–∏—Ç–≤–µ. –û–Ω –ø—Ä–æ—Å—Ç–æ... –∑–∞–±—ã–ª —Å–∞–º —Å–µ–±—è.
–ì–æ–¥—ã –ø—Ä–æ—à–ª–∏ ‚Äî –º–æ–∂–µ—Ç, —Å—Ç–æ–ª–µ—Ç–∏—è, –º–æ–∂–µ—Ç, —Ç—ã—Å—è—á–µ–ª–µ—Ç–∏—è. –ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç —Ç–æ—á–Ω–æ. –û—Ç –±—ã–ª—ã—Ö –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏—à—å –∑–∞—Ä–æ—Å—à–∏–µ —Ä—É–∏–Ω—ã, –ø–æ—Ä–æ—Å—à–∏–µ –º—Ö–æ–º –∫–∞–º–Ω–∏ –∏ –ø–æ–ª—É—Å—Ç—ë—Ä—Ç—ã–µ –∑–Ω–∞–∫–∏, –≤—ã–≥—Ä–∞–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±–ª–æ–º–∫–∞—Ö."`
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2") && item.Quantity > 0 {
			pageMap[2] = "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ¬´–ü–µ–ø–µ–ª –ø–∞–º—è—Ç–∏¬ª"
			pageTexts["üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ¬´–ü–µ–ø–µ–ª –ø–∞–º—è—Ç–∏¬ª"] = `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ¬´–ü–µ–ø–µ–ª –ø–∞–º—è—Ç–∏¬ª

"–õ—é–¥–∏ –∏—Å—á–µ–∑–ª–∏. –ù–µ –≤—Å–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –ø–∞–º—è—Ç—å –æ –Ω–∏—Ö ‚Äî —Ç–æ—á–Ω–æ.
–ó–µ–º–ª—è –∑–∞–±—ã–ª–∞ –∏—Ö —à–∞–≥–∏. –ó–Ω–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ø–∞–ª–∏—Å—å, –±—É–¥—Ç–æ –ø–µ—Å–æ–∫ –≤ –≤–µ—Ç—Ä–µ. –û—Å—Ç–∞–ª–∏—Å—å –ª–∏—à—å —Å–Ω—ã, —Å–º—É—Ç–Ω—ã–µ –æ–±—Ä–∞–∑—ã, –∏ —Ç–∏—Ö–∏–π –∑–æ–≤ –∏–∑ –≥–ª—É–±–∏–Ω –º–∏—Ä–∞."`
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3") && item.Quantity > 0 {
			pageMap[3] = "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 ¬´–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ¬ª"
			pageTexts["üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 ¬´–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ¬ª"] = `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 ¬´–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ¬ª

"–¢—ã ‚Äî –æ–¥–∏–Ω –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è.
–ù–∏–∫—Ç–æ –Ω–µ —Å–∫–∞–∑–∞–ª —Ç–µ–±–µ, –∑–∞—á–µ–º —Ç—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è. –í —ç—Ç–æ–º –Ω–µ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤, –±–æ–≥–æ–≤ –∏–ª–∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤. –¢–æ–ª—å–∫–æ —Ç—ã, –¥–∏–∫–∞—è –∑–µ–º–ª—è ‚Äî –∏ —á—É–≤—Å—Ç–≤–æ, —á—Ç–æ –≤—Å—ë —ç—Ç–æ —É–∂–µ –±—ã–ª–æ. –ß—Ç–æ —Ç—ã –∑–¥–µ—Å—å –Ω–µ –≤–ø–µ—Ä–≤—ã–µ."`
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4") && item.Quantity > 0 {
			pageMap[4] = "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 ¬´–ë–µ–∑ –∏–º–µ–Ω–∏¬ª"
			pageTexts["üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 ¬´–ë–µ–∑ –∏–º–µ–Ω–∏¬ª"] = `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 ¬´–ë–µ–∑ –∏–º–µ–Ω–∏¬ª

"–£ —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ù–∏ –¥–æ–º–∞, –Ω–∏ –∏–º–µ–Ω–∏, –Ω–∏ —Ü–µ–ª–∏. –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–∞—è –∫–∏—Ä–∫–∞, —Ç—ë–ø–ª—ã–π —Å–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞ –∏ –±–µ—Å–∫—Ä–∞–π–Ω—è—è, –∂–∏–≤–∞—è –∑–µ–º–ª—è, —á—Ç–æ –±—É–¥—Ç–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –∫–∞–∂–¥—ã–º —Ç–≤–æ–∏–º —à–∞–≥–æ–º."`
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5") && item.Quantity > 0 {
			pageMap[5] = "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–ò—Å–∫—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω¬ª"
			pageTexts["üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–ò—Å–∫—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω¬ª"] = `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–ò—Å–∫—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω¬ª

"–ù–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å ‚Äî –µ—Å–ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ö–∏–∂–∏–Ω—É, –∑–∞–∂–µ—á—å –æ–≥–æ–Ω—å, –¥–æ–±—ã—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–º–µ–Ω—å‚Ä¶ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è.
–í —Ç–µ–±–µ. –í —ç—Ç–æ–º –º–µ—Å—Ç–µ. –í —Å–∞–º–æ–π –ø–∞–º—è—Ç–∏ –º–∏—Ä–∞.
–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–∂–∏–≤—à–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã ‚Äî –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ."`
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6") && item.Quantity > 0 {
			pageMap[6] = "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–ù–∞–±–ª—é–¥–∞—é—â–∏–π –ª–µ—Å¬ª"
			pageTexts["üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–ù–∞–±–ª—é–¥–∞—é—â–∏–π –ª–µ—Å¬ª"] = `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–ù–∞–±–ª—é–¥–∞—é—â–∏–π –ª–µ—Å¬ª

"–ü–æ–Ω–∞—á–∞–ª—É –∑–µ–º–ª—è –º–æ–ª—á–∞–ª–∞. –¢—ã –∫–æ–ø–∞–ª, —Å—Ç—Ä–æ–∏–ª, –æ—Ö–æ—Ç–∏–ª—Å—è ‚Äî –∏ –≤—Å—ë –±—ã–ª–æ, –∫–∞–∫ –±—É–¥—Ç–æ –≤ –ø—É—Å—Ç–æ—Ç–µ.
–ù–æ —Å –∫–∞–∂–¥—ã–º —É–¥–∞—Ä–æ–º –ø–æ –∫–∞–º–Ω—é, —Å –∫–∞–∂–¥—ã–º –¥—ã–º–∫–æ–º –Ω–∞–¥ –∫–æ—Å—Ç—Ä–æ–º —Ç—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ —á—Ç–æ-—Ç–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç. –ù–µ –≤—Ä–∞–∂–¥–µ–±–Ω–æ–µ. –ù–æ –¥—Ä–µ–≤–Ω–µ–µ."`
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7") && item.Quantity > 0 {
			pageMap[7] = "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª"
			pageTexts["üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª"] = `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª

"–ò–Ω–æ–≥–¥–∞ –ø–æ –Ω–æ—á–∞–º —Ç—ã —Å–ª—ã—à–∞–ª, –∫–∞–∫ —à–µ–ª–µ—Å—Ç—è—Ç –ª–∏—Å—Ç—å—è –±–µ–∑ –≤–µ—Ç—Ä–∞.
–ö–∞–∫ –≤ –∫–æ—Å—Ç—Ä–µ —Ç—Ä–µ—Å–∫–∞–µ—Ç—Å—è –Ω–µ –¥—Ä–æ–≤–∞, –∞ —Å–ª–æ–≤–∞. –ù–µ—Å–ª—ã—à–Ω—ã–µ, —à–µ–ø—á—É—â–∏–µ.
–ó–µ–º–ª—è —Å–ª–æ–≤–Ω–æ –ø—ã—Ç–∞–ª–∞—Å—å –∑–∞–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π, –Ω–æ –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª–∞—Å—å."`
		}
		if strings.Contains(item.ItemName, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8") && item.Quantity > 0 {
			pageMap[8] = "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª"
			pageTexts["üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª"] = `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª

"–¢—ã –Ω–∞—á–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –≤–µ—â–∏. –ö–∞–º–µ–Ω—å —Å –≥–ª–∞–¥–∫–æ–π –≥—Ä–∞–Ω—å—é, —Å–ª–æ–≤–Ω–æ –≤—ã—Ä–µ–∑–∞–Ω–Ω–æ–π —Ä—É–∫–∞–º–∏.
–û–±–ª–æ–º–æ–∫ –∫–æ—Å—Ç–∏ —Å –≤—ã–∂–∂–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º. –û–¥–∏–Ω–æ–∫—É—é —Å—Ç–∞—Ç—É—é, —Å—Ç–æ—è—â—É—é –ø–æ—Å—Ä–µ–¥–∏ –ª–µ—Å–∞, –ø–æ–∫—Ä—ã—Ç—É—é –º—Ö–æ–º, –Ω–æ –Ω–µ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—É—é."`
		}
	}

	// –°–æ–∑–¥–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
	var availablePages []string
	for i := 1; i <= 8; i++ {
		if page, exists := pageMap[i]; exists {
			availablePages = append(availablePages, page)
		}
	}

	if len(availablePages) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —á—Ç–µ–Ω–∏—è.")
		h.sendMessage(msg)
		return
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, —á–∏—Ç–∞–µ–º –µ—ë
	if len(availablePages) == 1 {
		pageText := pageTexts[availablePages[0]]
		msg := tgbotapi.NewMessage(message.Chat.ID, pageText)
		h.sendMessage(msg)
		return
	}

	// –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
	var allTexts []string
	for _, pageName := range availablePages {
		allTexts = append(allTexts, pageTexts[pageName])
	}

	fullText := strings.Join(allTexts, "\n\n---\n\n")
	msg := tgbotapi.NewMessage(message.Chat.ID, fullText)
	h.sendMessage(msg)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ 6 –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	h.checkLorePagesQuestProgressSequential(message.From.ID, message.Chat.ID, player.ID, 6)

	return
}

func (h *BotHandlers) handleReadPage1(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1 –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	pageQuantity, err := h.db.GetItemQuantityInInventory(player.ID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ¬´–ó–∞–±—ã—Ç–∞—è —Ç–∏—à–∏–Ω–∞¬ª")
	if err != nil {
		log.Printf("Error checking page in inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	if pageQuantity == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	pageText := `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ¬´–ó–∞–±—ã—Ç–∞—è —Ç–∏—à–∏–Ω–∞¬ª

"–ú–∏—Ä –Ω–µ –±—ã–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω –≤ –±–∏—Ç–≤–µ. –û–Ω –ø—Ä–æ—Å—Ç–æ... –∑–∞–±—ã–ª —Å–∞–º —Å–µ–±—è.
–ì–æ–¥—ã –ø—Ä–æ—à–ª–∏ ‚Äî –º–æ–∂–µ—Ç, —Å—Ç–æ–ª–µ—Ç–∏—è, –º–æ–∂–µ—Ç, —Ç—ã—Å—è—á–µ–ª–µ—Ç–∏—è. –ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç —Ç–æ—á–Ω–æ. –û—Ç –±—ã–ª—ã—Ö –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏—à—å –∑–∞—Ä–æ—Å—à–∏–µ —Ä—É–∏–Ω—ã, –ø–æ—Ä–æ—Å—à–∏–µ –º—Ö–æ–º –∫–∞–º–Ω–∏ –∏ –ø–æ–ª—É—Å—Ç—ë—Ä—Ç—ã–µ –∑–Ω–∞–∫–∏, –≤—ã–≥—Ä–∞–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±–ª–æ–º–∫–∞—Ö."`

	msg := tgbotapi.NewMessage(message.Chat.ID, pageText)
	h.sendMessage(msg)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ 6 –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	h.checkLorePagesQuestProgressSequential(message.From.ID, message.Chat.ID, player.ID, 1)
}

func (h *BotHandlers) handleReadPage2(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2 –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	pageQuantity, err := h.db.GetItemQuantityInInventory(player.ID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ¬´–ü–µ–ø–µ–ª –ø–∞–º—è—Ç–∏¬ª")
	if err != nil {
		log.Printf("Error checking page in inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	if pageQuantity == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	pageText := `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ¬´–ü–µ–ø–µ–ª –ø–∞–º—è—Ç–∏¬ª

"–õ—é–¥–∏ –∏—Å—á–µ–∑–ª–∏. –ù–µ –≤—Å–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –ø–∞–º—è—Ç—å –æ –Ω–∏—Ö ‚Äî —Ç–æ—á–Ω–æ.
–ó–µ–º–ª—è –∑–∞–±—ã–ª–∞ –∏—Ö —à–∞–≥–∏. –ó–Ω–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ø–∞–ª–∏—Å—å, –±—É–¥—Ç–æ –ø–µ—Å–æ–∫ –≤ –≤–µ—Ç—Ä–µ. –û—Å—Ç–∞–ª–∏—Å—å –ª–∏—à—å —Å–Ω—ã, —Å–º—É—Ç–Ω—ã–µ –æ–±—Ä–∞–∑—ã, –∏ —Ç–∏—Ö–∏–π –∑–æ–≤ –∏–∑ –≥–ª—É–±–∏–Ω –º–∏—Ä–∞."`

	msg := tgbotapi.NewMessage(message.Chat.ID, pageText)
	h.sendMessage(msg)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ 6 –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	h.checkLorePagesQuestProgressSequential(message.From.ID, message.Chat.ID, player.ID, 2)
}

func (h *BotHandlers) handleReadPage3(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 3 –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	pageQuantity, err := h.db.GetItemQuantityInInventory(player.ID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 ¬´–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ¬ª")
	if err != nil {
		log.Printf("Error checking page in inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	if pageQuantity == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	pageText := `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 ¬´–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ¬ª

"–¢—ã ‚Äî –æ–¥–∏–Ω –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è.
–ù–∏–∫—Ç–æ –Ω–µ —Å–∫–∞–∑–∞–ª —Ç–µ–±–µ, –∑–∞—á–µ–º —Ç—ã –ø—Ä–æ—Å–Ω—É–ª—Å—è. –í —ç—Ç–æ–º –Ω–µ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤, –±–æ–≥–æ–≤ –∏–ª–∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤. –¢–æ–ª—å–∫–æ —Ç—ã, –¥–∏–∫–∞—è –∑–µ–º–ª—è ‚Äî –∏ —á—É–≤—Å—Ç–≤–æ, —á—Ç–æ –≤—Å—ë —ç—Ç–æ —É–∂–µ –±—ã–ª–æ. –ß—Ç–æ —Ç—ã –∑–¥–µ—Å—å –Ω–µ –≤–ø–µ—Ä–≤—ã–µ."`

	msg := tgbotapi.NewMessage(message.Chat.ID, pageText)
	h.sendMessage(msg)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ 6 –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	h.checkLorePagesQuestProgressSequential(message.From.ID, message.Chat.ID, player.ID, 3)
}

func (h *BotHandlers) handleReadPage4(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 4 –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	pageQuantity, err := h.db.GetItemQuantityInInventory(player.ID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 ¬´–ë–µ–∑ –∏–º–µ–Ω–∏¬ª")
	if err != nil {
		log.Printf("Error checking page in inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	if pageQuantity == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç —á–µ—Ç–≤–µ—Ä—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ç–≤–µ—Ä—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	pageText := `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 ¬´–ë–µ–∑ –∏–º–µ–Ω–∏¬ª

"–£ —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ù–∏ –¥–æ–º–∞, –Ω–∏ –∏–º–µ–Ω–∏, –Ω–∏ —Ü–µ–ª–∏. –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ä–∞—è –∫–∏—Ä–∫–∞, —Ç—ë–ø–ª—ã–π —Å–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞ –∏ –±–µ—Å–∫—Ä–∞–π–Ω—è—è, –∂–∏–≤–∞—è –∑–µ–º–ª—è, —á—Ç–æ –±—É–¥—Ç–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –∫–∞–∂–¥—ã–º —Ç–≤–æ–∏–º —à–∞–≥–æ–º."`

	msg := tgbotapi.NewMessage(message.Chat.ID, pageText)
	h.sendMessage(msg)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ 6 –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	h.checkLorePagesQuestProgressSequential(message.From.ID, message.Chat.ID, player.ID, 4)
}

func (h *BotHandlers) handleReadPage5(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 5 –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	pageQuantity, err := h.db.GetItemQuantityInInventory(player.ID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–ò—Å–∫—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω¬ª")
	if err != nil {
		log.Printf("Error checking page in inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	if pageQuantity == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—è—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø—è—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	pageText := `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–ò—Å–∫—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω¬ª

"–ù–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å ‚Äî –µ—Å–ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ö–∏–∂–∏–Ω—É, –∑–∞–∂–µ—á—å –æ–≥–æ–Ω—å, –¥–æ–±—ã—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–º–µ–Ω—å‚Ä¶ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è.
–í —Ç–µ–±–µ. –í —ç—Ç–æ–º –º–µ—Å—Ç–µ. –í —Å–∞–º–æ–π –ø–∞–º—è—Ç–∏ –º–∏—Ä–∞.
–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–∂–∏–≤—à–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã ‚Äî –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ."`

	msg := tgbotapi.NewMessage(message.Chat.ID, pageText)
	h.sendMessage(msg)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ 6 –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	h.checkLorePagesQuestProgressSequential(message.From.ID, message.Chat.ID, player.ID, 5)
}

func (h *BotHandlers) handleReadPage6(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 6 –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	pageQuantity, err := h.db.GetItemQuantityInInventory(player.ID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–ù–∞–±–ª—é–¥–∞—é—â–∏–π –ª–µ—Å¬ª")
	if err != nil {
		log.Printf("Error checking page in inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	if pageQuantity == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç —à–µ—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —à–µ—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	pageText := `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–ù–∞–±–ª—é–¥–∞—é—â–∏–π –ª–µ—Å¬ª

"–ü–æ–Ω–∞—á–∞–ª—É –∑–µ–º–ª—è –º–æ–ª—á–∞–ª–∞. –¢—ã –∫–æ–ø–∞–ª, —Å—Ç—Ä–æ–∏–ª, –æ—Ö–æ—Ç–∏–ª—Å—è ‚Äî –∏ –≤—Å—ë –±—ã–ª–æ, –∫–∞–∫ –±—É–¥—Ç–æ –≤ –ø—É—Å—Ç–æ—Ç–µ.
–ù–æ —Å –∫–∞–∂–¥—ã–º —É–¥–∞—Ä–æ–º –ø–æ –∫–∞–º–Ω—é, —Å –∫–∞–∂–¥—ã–º –¥—ã–º–∫–æ–º –Ω–∞–¥ –∫–æ—Å—Ç—Ä–æ–º —Ç—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª, —á—Ç–æ —á—Ç–æ-—Ç–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç. –ù–µ –≤—Ä–∞–∂–¥–µ–±–Ω–æ–µ. –ù–æ –¥—Ä–µ–≤–Ω–µ–µ."`

	msg := tgbotapi.NewMessage(message.Chat.ID, pageText)
	h.sendMessage(msg)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ 6 –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	h.checkLorePagesQuestProgressSequential(message.From.ID, message.Chat.ID, player.ID, 6)
}

func (h *BotHandlers) handleReadPage7(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 7 –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	pageQuantity, err := h.db.GetItemQuantityInInventory(player.ID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª")
	if err != nil {
		log.Printf("Error checking page in inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	if pageQuantity == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç —Å–µ–¥—å–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–µ–¥—å–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	pageText := `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 7 ¬´–®—ë–ø–æ—Ç –≤–µ—Ç—Ä–∞¬ª

"–ò–Ω–æ–≥–¥–∞ –ø–æ –Ω–æ—á–∞–º —Ç—ã —Å–ª—ã—à–∞–ª, –∫–∞–∫ —à–µ–ª–µ—Å—Ç—è—Ç –ª–∏—Å—Ç—å—è –±–µ–∑ –≤–µ—Ç—Ä–∞.
–ö–∞–∫ –≤ –∫–æ—Å—Ç—Ä–µ —Ç—Ä–µ—Å–∫–∞–µ—Ç—Å—è –Ω–µ –¥—Ä–æ–≤–∞, –∞ —Å–ª–æ–≤–∞. –ù–µ—Å–ª—ã—à–Ω—ã–µ, —à–µ–ø—á—É—â–∏–µ.
–ó–µ–º–ª—è —Å–ª–æ–≤–Ω–æ –ø—ã—Ç–∞–ª–∞—Å—å –∑–∞–≥–æ–≤–æ—Ä–∏—Ç—å —Å —Ç–æ–±–æ–π, –Ω–æ –µ—â—ë –Ω–µ —Ä–µ—à–∞–ª–∞—Å—å."`

	msg := tgbotapi.NewMessage(message.Chat.ID, pageText)
	h.sendMessage(msg)
}

func (h *BotHandlers) handleReadPage8(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 8 –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	pageQuantity, err := h.db.GetItemQuantityInInventory(player.ID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª")
	if err != nil {
		log.Printf("Error checking page in inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	if pageQuantity == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –≤–æ—Å—å–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ—Å—å–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	pageText := `üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª

"–¢—ã –Ω–∞—á–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –≤–µ—â–∏. –ö–∞–º–µ–Ω—å —Å –≥–ª–∞–¥–∫–æ–π –≥—Ä–∞–Ω—å—é, —Å–ª–æ–≤–Ω–æ –≤—ã—Ä–µ–∑–∞–Ω–Ω–æ–π —Ä—É–∫–∞–º–∏.
–û–±–ª–æ–º–æ–∫ –∫–æ—Å—Ç–∏ —Å –≤—ã–∂–∂–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º. –û–¥–∏–Ω–æ–∫—É—é —Å—Ç–∞—Ç—É—é, —Å—Ç–æ—è—â—É—é –ø–æ—Å—Ä–µ–¥–∏ –ª–µ—Å–∞, –ø–æ–∫—Ä—ã—Ç—É—é –º—Ö–æ–º, –Ω–æ –Ω–µ —Ä–∞–∑—Ä—É—à–µ–Ω–Ω—É—é."`

	msg := tgbotapi.NewMessage(message.Chat.ID, pageText)
	h.sendMessage(msg)
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–±–æ—Ä–∞ –≤ –ª–µ—Å—É
func (h *BotHandlers) startGatheringAtPosition(userID int64, chatID int64, resourceName string, duration int, callbackID string, rowStr, colStr string) {
	row, _ := strconv.Atoi(rowStr)
	col, _ := strconv.Atoi(colStr)

	h.startGathering(userID, chatID, resourceName, duration, callbackID, row, col)
}

func (h *BotHandlers) startGathering(userID int64, chatID int64, resourceName string, duration int, callbackID string, row, col int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —É–∂–µ —Å–±–æ—Ä, –¥–æ–±—ã—á–∞/—Ä—É–±–∫–∞ –∏–ª–∏ –∫—Ä–∞—Ñ—Ç
	if _, exists := h.gatheringTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –¥–æ–±—ã—á—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}
	if _, exists := h.miningTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –¥–æ–±—ã—á—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}
	if _, exists := h.choppingTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –¥–æ–±—ã—á—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}
	if _, exists := h.craftingTimers[userID]; exists {
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–ª—å–∑—è —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞ –∏–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–∂–∞
	hasTool, durability, err := h.db.HasToolInInventory(player.ID, "–ü—Ä–æ—Å—Ç–æ–π –Ω–æ–∂")
	if err != nil {
		log.Printf("Error checking tool: %v", err)
		return
	}

	if !hasTool {
		msg := tgbotapi.NewMessage(chatID, `–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "–ü—Ä–æ—Å—Ç–æ–π –Ω–æ–∂".`)
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackConfig := tgbotapi.NewCallback(callbackID, "")
	h.requestAPI(callbackConfig)

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–±–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if session, exists := h.gatheringSessions[userID]; exists && session.ResultMessageID != 0 {
		deleteResultMsg := tgbotapi.NewDeleteMessage(chatID, session.ResultMessageID)
		h.requestAPI(deleteResultMsg)
		session.ResultMessageID = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞
	initialText := fmt.Sprintf(`–ò–¥–µ—Ç —Å–±–æ—Ä "%s". –í—Ä–µ–º—è —Å–±–æ—Ä–∞ %d —Å–µ–∫.
		
%s 0%%`, resourceName, duration, h.createProgressBar(0, 100))

	gatheringMsg := tgbotapi.NewMessage(chatID, initialText)
	sentMsg, _ := h.sendMessageWithResponse(gatheringMsg)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
	go h.updateGatheringProgress(userID, chatID, sentMsg.MessageID, resourceName, duration, durability, row, col)

	// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–∞–π–º–µ—Ä–∞
	timer := time.NewTimer(time.Duration(duration) * time.Second)
	h.gatheringTimers[userID] = timer
}

func (h *BotHandlers) updateGatheringProgress(userID int64, chatID int64, messageID int, resourceName string, totalDuration int, durability int, row, col int) {
	startTime := time.Now()
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			elapsed := time.Since(startTime).Seconds()
			progress := int(elapsed)

			if progress >= totalDuration {
				// –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω
				h.completeGathering(userID, chatID, resourceName, durability, messageID, row, col)
				return
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
			percentage := int((elapsed / float64(totalDuration)) * 100)
			progressBar := h.createProgressBar(progress, totalDuration)

			newText := fmt.Sprintf(`–ù–∞—á–∞–ª—Å—è —Å–±–æ—Ä "%s". –í—Ä–µ–º—è —Å–±–æ—Ä–∞ %d —Å–µ–∫.
			
%s %d%%`, resourceName, totalDuration, progressBar, percentage)

			// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			editMsg := tgbotapi.NewEditMessageText(chatID, messageID, newText)
			h.editMessage(editMsg)

		case <-time.After(time.Duration(totalDuration+1) * time.Second):
			// –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
			return
		}
	}
}

func (h *BotHandlers) completeGathering(userID int64, chatID int64, resourceName string, oldDurability int, messageID int, row, col int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
	if err := h.db.AddItemToInventory(player.ID, resourceName, 1); err != nil {
		log.Printf("Error adding item to inventory: %v", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–æ–∂–∞ –∏ —Å—ã—Ç–æ—Å—Ç—å
	if err := h.db.UpdateItemDurability(player.ID, "–ü—Ä–æ—Å—Ç–æ–π –Ω–æ–∂", 1); err != nil {
		log.Printf("Error updating item durability: %v", err)
	}
	if err := h.db.UpdatePlayerSatiety(player.ID, -1); err != nil {
		log.Printf("Error updating player satiety: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ —Å–±–æ—Ä
	levelUp, newLevel, err := h.db.UpdateGatheringExperience(player.ID, 2)
	if err != nil {
		log.Printf("Error updating gathering experience: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	updatedPlayer, _ := h.db.GetPlayer(userID)
	updatedGathering, _ := h.db.GetOrCreateGathering(player.ID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±–æ—Ä–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Å–±–æ—Ä–∞
	resultText := fmt.Sprintf(`‚úÖ –¢—ã —Å–æ–±—Ä–∞–ª "%s"!
–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: 2
–°—ã—Ç–æ—Å—Ç—å: %d/100
–ü—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–æ–∂–∞: %d/100
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞`,
		resourceName,
		updatedPlayer.Satiety,
		oldDurability-1,
		(updatedGathering.Level*100)-updatedGathering.Experience)

	msg := tgbotapi.NewMessage(chatID, resultText)
	resultResponse, _ := h.sendMessageWithResponse(msg)

	// –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏
	if levelUp {
		levelUpText := fmt.Sprintf("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–≤–µ–Ω—å —Å–±–æ—Ä–∞ –ø–æ–≤—ã—à–µ–Ω –¥–æ %d —É—Ä–æ–≤–Ω—è!", newLevel)
		levelUpMsg := tgbotapi.NewMessage(chatID, levelUpText)
		h.sendMessage(levelUpMsg)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ —Å–µ—Å—Å–∏–∏
	if session, exists := h.gatheringSessions[userID]; exists {
		session.ResultMessageID = resultResponse.MessageID
	}

	// –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä
	delete(h.gatheringTimers, userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ 4 (—Å–±–æ—Ä –ª–µ—Å–Ω—ã—Ö —è–≥–æ–¥)
	if resourceName == "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞" {
		h.checkBerryQuestProgress(userID, chatID, player.ID)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ - —É–±–∏—Ä–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å
	if session, exists := h.gatheringSessions[userID]; exists {
		session.Resources[row][col] = ""

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ä–µ—Å—É—Ä—Å—ã –≤ –ø–æ–ª–µ
		totalResources := 0
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				if session.Resources[i][j] != "" {
					totalResources++
				}
			}
		}

		if totalResources > 0 {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—è
			h.updateGatheringField(chatID, session.Resources, session.FieldMessageID)
			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
			h.updateGatheringInfoMessage(userID, chatID, updatedGathering, session.InfoMessageID)
		} else {
			// –ü–æ–ª–µ –∏—Å—Ç–æ—â–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
			if err := h.db.ExhaustGathering(userID); err != nil {
				log.Printf("Error exhausting gathering: %v", err)
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∫—É–ª–¥–∞—É–Ω–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
			h.gatheringCooldowns[userID] = time.Now().Add(60 * time.Second)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º —Å–±–æ—Ä–∞
			deleteFieldMsg := tgbotapi.NewDeleteMessage(chatID, session.FieldMessageID)
			h.requestAPI(deleteFieldMsg)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±–æ—Ä–µ
			deleteInfoMsg := tgbotapi.NewDeleteMessage(chatID, session.InfoMessageID)
			h.requestAPI(deleteInfoMsg)

			exhaustMsg := tgbotapi.NewMessage(chatID, `‚ö†Ô∏è –Ø–≥–æ–¥–Ω—ã–µ –∫—É—Å—Ç—ã –∏—Å—Ç–æ—â–µ–Ω—ã! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å 1 –º–∏–Ω—É—Ç—É –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üåø –°–±–æ—Ä" —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.`)
			h.sendForestKeyboard(exhaustMsg)

			// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
			delete(h.gatheringSessions, userID)
		}
	}
}

func (h *BotHandlers) updateGatheringField(chatID int64, field [][]string, messageID int) {
	text := "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è —Å–±–æ—Ä–∞:"

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < 3; i++ {
		var row []tgbotapi.InlineKeyboardButton
		for j := 0; j < 3; j++ {
			cell := field[i][j]
			var callbackData string

			switch cell {
			case "üçá":
				callbackData = fmt.Sprintf("gathering_berry_%d_%d", i, j)
			default:
				callbackData = fmt.Sprintf("gathering_empty_%d_%d", i, j)
				cell = " "
			}

			button := tgbotapi.NewInlineKeyboardButtonData(cell, callbackData)
			row = append(row, button)
		}
		keyboard = append(keyboard, row)
	}

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, messageID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	h.editMessage(editMsg)
}

func (h *BotHandlers) updateGatheringInfoMessage(userID int64, chatID int64, gathering *models.Gathering, messageID int) {
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := (gathering.Level * 100) - gathering.Experience

	infoText := fmt.Sprintf(`üåø –°–±–æ—Ä (–£—Ä–æ–≤–µ–Ω—å %d)
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
üçá –Ø–≥–æ–¥—ã`, gathering.Level, expToNext)

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	gatheringKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	gatheringKeyboard.ResizeKeyboard = true

	newMsg := tgbotapi.NewMessage(chatID, infoText)
	newMsg.ReplyMarkup = gatheringKeyboard
	newResponse, _ := h.sendMessageWithResponse(newMsg)

	// –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
	if session, exists := h.gatheringSessions[userID]; exists {
		session.InfoMessageID = newResponse.MessageID
	}
}

func (h *BotHandlers) startCrafting(userID int64, chatID int64, itemName string, quantity int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –î–ª—è –±–µ—Ä–µ–∑–æ–≤–æ–≥–æ –±—Ä—É—Å–∞: –ø–æ—Ç—Ä–µ–±–ª—è–µ–º –±–µ—Ä–µ–∑—É (2 –±–µ—Ä–µ–∑—ã –∑–∞ 1 –±—Ä—É—Å)
	if itemName == "–ë–µ—Ä–µ–∑–æ–≤—ã–π –±—Ä—É—Å" {
		requiredBirch := quantity * 2
		err := h.db.ConsumeItem(player.ID, "–ë–µ—Ä–µ–∑–∞", requiredBirch)
		if err != nil {
			log.Printf("Error consuming birch: %v", err)
			msg := tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.")
			h.sendMessage(msg)
			return
		}
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∫—Ä–∞—Ñ—Ç–∞
	var totalDuration int
	if itemName == "–ü—Ä–æ—Å—Ç–∞—è —Ö–∏–∂–∏–Ω–∞" {
		totalDuration = 120
	} else {
		totalDuration = quantity * 20
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∫—Ä–∞—Ñ—Ç–∞
	craftText := fmt.Sprintf(`–ò–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ "%s". –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è %d —Å–µ–∫.

‚è≥ 0%%`, itemName, totalDuration)

	msg := tgbotapi.NewMessage(chatID, craftText)
	response, err := h.sendMessageWithResponse(msg)
	if err != nil {
		log.Printf("Error sending craft message: %v", err)
		return
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∫—Ä–∞—Ñ—Ç–∞
	h.craftingTimers[userID] = time.NewTimer(time.Duration(totalDuration) * time.Second)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	go h.updateCraftingProgress(userID, chatID, response.MessageID, itemName, quantity, totalDuration)
}

func (h *BotHandlers) updateCraftingProgress(userID int64, chatID int64, messageID int, itemName string, quantity int, totalDuration int) {
	startTime := time.Now()
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			elapsed := time.Since(startTime).Seconds()
			progress := int(elapsed)

			if progress >= totalDuration {
				// –ö—Ä–∞—Ñ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
				h.completeCrafting(userID, chatID, itemName, quantity, messageID)
				return
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
			percentage := int((elapsed / float64(totalDuration)) * 100)
			progressBar := h.createProgressBar(progress, totalDuration)

			newText := fmt.Sprintf(`–ò–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ "%s". –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è %d —Å–µ–∫.

%s %d%%`, itemName, totalDuration, progressBar, percentage)

			// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			editMsg := tgbotapi.NewEditMessageText(chatID, messageID, newText)
			h.editMessage(editMsg)

		case <-time.After(time.Duration(totalDuration+1) * time.Second):
			// –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
			return
		}
	}
}

func (h *BotHandlers) completeCrafting(userID int64, chatID int64, itemName string, quantity int, messageID int) {
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	if itemName == "–ü—Ä–æ—Å—Ç–∞—è —Ö–∏–∂–∏–Ω–∞" {
		// –£–¥–∞–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
		requirements := []struct {
			ItemName string
			Quantity int
		}{
			{"–ë–µ—Ä–µ–∑–∞", 20},
			{"–ë–µ—Ä–µ–∑–æ–≤—ã–π –±—Ä—É—Å", 10},
			{"–ö–∞–º–µ–Ω—å", 15},
			{"–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞", 10},
		}
		for _, req := range requirements {
			err := h.db.RemoveItemFromInventory(player.ID, req.ItemName, req.Quantity)
			if err != nil {
				log.Printf("Error removing item from inventory: %v", err)
			}
		}
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ö–∏–∂–∏–Ω—ã
		err = h.db.UpdateSimpleHutBuilt(player.ID, true)
		if err != nil {
			log.Printf("Error updating simple hut status: %v", err)
		}
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–µ—Å—Ç 8
		quest8, err := h.db.GetPlayerQuest(player.ID, 8)
		if err != nil {
			log.Printf("Error getting quest 8: %v", err)
		} else if quest8 != nil {
			if quest8.Status == "active" {
				err = h.db.UpdateQuestProgress(player.ID, 8, 1)
				if err != nil {
					log.Printf("Error updating quest progress: %v", err)
				}
				if quest8.Progress+1 >= quest8.Target {
					err = h.db.UpdateQuestStatus(player.ID, 8, "completed")
					if err != nil {
						log.Printf("Error completing quest 8: %v", err)
					}
					err = h.db.UpdatePlayerExperience(player.ID, 10)
					if err != nil {
						log.Printf("Error updating player experience: %v", err)
					}
					h.addPage8IfNotExists(player.ID)
					questCompleteText := `üõñ –ö–≤–µ—Å—Ç 8: –ü–æ–¥ –∫—Ä—ã—à–µ–π –í–´–ü–û–õ–ù–ï–ù!
–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞:
üéñ 10 –æ–ø—ã—Ç–∞
üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª`
					msg := tgbotapi.NewMessage(chatID, questCompleteText)
					h.sendMessage(msg)
				}
			} else if quest8.Status == "completed" {
				// –ï—Å–ª–∏ –∫–≤–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –µ—ë
				h.addPage8IfNotExists(player.ID)
			}
		}
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—Ä–∞—Ñ—Ç–µ
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
		h.requestAPI(deleteMsg)
		completeText := `‚úÖ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ "–ü—Ä–æ—Å—Ç–∞—è —Ö–∏–∂–∏–Ω–∞" –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å —É–∫—Ä—ã—Ç–∏–µ –æ—Ç –Ω–µ–ø–æ–≥–æ–¥—ã.`
		msg := tgbotapi.NewMessage(chatID, completeText)
		h.sendMessage(msg)
		delete(h.craftingTimers, userID)
		return
	}

	// –û–±—ã—á–Ω—ã–π –∫—Ä–∞—Ñ—Ç
	if err := h.db.AddItemToInventory(player.ID, itemName, quantity); err != nil {
		log.Printf("Error adding crafted items to inventory: %v", err)
	}
	if err := h.db.UpdatePlayerSatiety(player.ID, -quantity); err != nil {
		log.Printf("Error updating player satiety: %v", err)
	}
	updatedPlayer, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting updated player: %v", err)
		updatedPlayer = player
	}
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)
	resultText := fmt.Sprintf(`‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
–ü–æ–ª—É—á–µ–Ω–æ: "%s" x%d
–°—ã—Ç–æ—Å—Ç—å: %d/100`, itemName, quantity, updatedPlayer.Satiety)
	msg := tgbotapi.NewMessage(chatID, resultText)
	h.sendMessage(msg)
	if itemName == "–ë–µ—Ä–µ–∑–æ–≤—ã–π –±—Ä—É—Å" {
		h.checkBirchPlankQuestProgress(userID, chatID, player.ID, quantity)
	}
	delete(h.craftingTimers, userID)
}

func (h *BotHandlers) checkBirchQuestProgress(userID int64, chatID int64, playerID int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç 1 (—Ä—É–±–∫–∞ –±–µ—Ä–µ–∑—ã)
	quest, err := h.db.GetPlayerQuest(playerID, 1)
	if err != nil {
		log.Printf("Error getting quest: %v", err)
		return
	}

	// –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	if quest == nil || quest.Status != "active" {
		return
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
	newProgress := quest.Progress + 1
	err = h.db.UpdateQuestProgress(playerID, 1, newProgress)
	if err != nil {
		log.Printf("Error updating quest progress: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –∫–≤–µ—Å—Ç
	if newProgress >= quest.Target {
		// –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!
		err = h.db.UpdateQuestStatus(playerID, 1, "completed")
		if err != nil {
			log.Printf("Error completing quest: %v", err)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
		// 10 –æ–ø—ã—Ç–∞ –∏–≥—Ä–æ–∫—É
		err = h.db.UpdatePlayerExperience(playerID, 10)
		if err != nil {
			log.Printf("Error updating player experience: %v", err)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
		err = h.db.AddItemToInventory(playerID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ¬´–ó–∞–±—ã—Ç–∞—è —Ç–∏—à–∏–Ω–∞¬ª", 1)
		if err != nil {
			log.Printf("Error adding quest item to inventory: %v", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞
		questCompleteText := `ü™ì –ö–≤–µ—Å—Ç 1: –î–µ—Ä–µ–≤–æ –ø–æ–¥ —Ç–æ–ø–æ—Ä –í–´–ü–û–õ–ù–ï–ù!
–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞:
üéñ 10 –æ–ø—ã—Ç–∞
üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ¬´–ó–∞–±—ã—Ç–∞—è —Ç–∏—à–∏–Ω–∞¬ª`

		msg := tgbotapi.NewMessage(chatID, questCompleteText)
		h.sendMessage(msg)
	}
}

func (h *BotHandlers) checkBirchPlankQuestProgress(userID int64, chatID int64, playerID int, quantity int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç 3 (—Å–æ–∑–¥–∞–Ω–∏–µ –±–µ—Ä–µ–∑–æ–≤—ã—Ö –±—Ä—É—Å–æ–≤)
	quest, err := h.db.GetPlayerQuest(playerID, 3)
	if err != nil {
		log.Printf("Error getting quest 3: %v", err)
		return
	}

	// –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	if quest == nil || quest.Status != "active" {
		return
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±—Ä—É—Å–æ–≤
	newProgress := quest.Progress + quantity
	err = h.db.UpdateQuestProgress(playerID, 3, newProgress)
	if err != nil {
		log.Printf("Error updating quest 3 progress: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –∫–≤–µ—Å—Ç
	if newProgress >= quest.Target {
		// –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!
		err = h.db.UpdateQuestStatus(playerID, 3, "completed")
		if err != nil {
			log.Printf("Error completing quest 3: %v", err)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
		// 10 –æ–ø—ã—Ç–∞ –∏–≥—Ä–æ–∫—É
		err = h.db.UpdatePlayerExperience(playerID, 10)
		if err != nil {
			log.Printf("Error updating player experience: %v", err)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
		err = h.db.AddItemToInventory(playerID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 ¬´–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ¬ª", 1)
		if err != nil {
			log.Printf("Error adding quest item to inventory: %v", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞
		questCompleteText := `ü™ö –ö–≤–µ—Å—Ç 3: –†—É–∫–∏ –º–∞—Å—Ç–µ—Ä–∞ –í–´–ü–û–õ–ù–ï–ù!
–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞:
üéñ 10 –æ–ø—ã—Ç–∞
üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 ¬´–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ¬ª`

		msg := tgbotapi.NewMessage(chatID, questCompleteText)
		h.sendMessage(msg)
	}
}

func (h *BotHandlers) checkStoneQuestProgress(userID int64, chatID int64, playerID int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç 2 (–¥–æ–±—ã—á–∞ –∫–∞–º–Ω—è)
	quest, err := h.db.GetPlayerQuest(playerID, 2)
	if err != nil {
		log.Printf("Error getting quest 2: %v", err)
		return
	}

	// –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	if quest == nil || quest.Status != "active" {
		return
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
	newProgress := quest.Progress + 1
	err = h.db.UpdateQuestProgress(playerID, 2, newProgress)
	if err != nil {
		log.Printf("Error updating quest 2 progress: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –∫–≤–µ—Å—Ç
	if newProgress >= quest.Target {
		// –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!
		err = h.db.UpdateQuestStatus(playerID, 2, "completed")
		if err != nil {
			log.Printf("Error completing quest 2: %v", err)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
		// 10 –æ–ø—ã—Ç–∞ –∏–≥—Ä–æ–∫—É
		err = h.db.UpdatePlayerExperience(playerID, 10)
		if err != nil {
			log.Printf("Error updating player experience: %v", err)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
		err = h.db.AddItemToInventory(playerID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ¬´–ü–µ–ø–µ–ª –ø–∞–º—è—Ç–∏¬ª", 1)
		if err != nil {
			log.Printf("Error adding quest item to inventory: %v", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞
		questCompleteText := `‚õè –ö–≤–µ—Å—Ç 2: –í–≥–ª—É–±—å –í–´–ü–û–õ–ù–ï–ù!
–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞:
üéñ 10 –æ–ø—ã—Ç–∞
üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ¬´–ü–µ–ø–µ–ª –ø–∞–º—è—Ç–∏¬ª`

		msg := tgbotapi.NewMessage(chatID, questCompleteText)
		h.sendMessage(msg)
	}
}

func (h *BotHandlers) checkBerryQuestProgress(userID int64, chatID int64, playerID int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç 4 (—Å–±–æ—Ä –ª–µ—Å–Ω—ã—Ö —è–≥–æ–¥)
	quest, err := h.db.GetPlayerQuest(playerID, 4)
	if err != nil {
		log.Printf("Error getting quest 4: %v", err)
		return
	}

	// –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	if quest == nil || quest.Status != "active" {
		return
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
	newProgress := quest.Progress + 1
	err = h.db.UpdateQuestProgress(playerID, 4, newProgress)
	if err != nil {
		log.Printf("Error updating quest 4 progress: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –∫–≤–µ—Å—Ç
	if newProgress >= quest.Target {
		// –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!
		err = h.db.UpdateQuestStatus(playerID, 4, "completed")
		if err != nil {
			log.Printf("Error completing quest 4: %v", err)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
		// 10 –æ–ø—ã—Ç–∞ –∏–≥—Ä–æ–∫—É
		err = h.db.UpdatePlayerExperience(playerID, 10)
		if err != nil {
			log.Printf("Error updating player experience: %v", err)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
		err = h.db.AddItemToInventory(playerID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 ¬´–ë–µ–∑ –∏–º–µ–Ω–∏¬ª", 1)
		if err != nil {
			log.Printf("Error adding quest item to inventory: %v", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞
		questCompleteText := `üçá –ö–≤–µ—Å—Ç 4: –î–∞—Ä –ª–µ—Å–∞ –í–´–ü–û–õ–ù–ï–ù!
–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞:
üéñ 10 –æ–ø—ã—Ç–∞
üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 4 ¬´–ë–µ–∑ –∏–º–µ–Ω–∏¬ª`

		msg := tgbotapi.NewMessage(chatID, questCompleteText)
		h.sendMessage(msg)
	}
}

func (h *BotHandlers) checkHuntingQuestProgress(userID int64, chatID int64, playerID int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç 5 (–ø–µ—Ä–≤–∞—è –æ—Ö–æ—Ç–∞)
	quest, err := h.db.GetPlayerQuest(playerID, 5)
	if err != nil {
		log.Printf("Error getting quest 5: %v", err)
		return
	}

	// –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
	if quest == nil || quest.Status != "active" {
		return
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
	newProgress := quest.Progress + 1
	err = h.db.UpdateQuestProgress(playerID, 5, newProgress)
	if err != nil {
		log.Printf("Error updating quest 5 progress: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –∫–≤–µ—Å—Ç
	if newProgress >= 1 {
		// –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!
		err = h.db.UpdateQuestStatus(playerID, 5, "completed")
		if err != nil {
			log.Printf("Error completing quest 5: %v", err)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
		// 10 –æ–ø—ã—Ç–∞ –∏–≥—Ä–æ–∫—É
		err = h.db.UpdatePlayerExperience(playerID, 10)
		if err != nil {
			log.Printf("Error updating player experience: %v", err)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É 5 –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
		err = h.db.AddItemToInventory(playerID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–ò—Å–∫—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω¬ª", 1)
		if err != nil {
			log.Printf("Error adding quest item to inventory: %v", err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞
		questCompleteText := `üéØ –ö–≤–µ—Å—Ç 5: –ó–≤–µ—Ä–∏–Ω—ã–π –≤–∑–≥–ª—è–¥ –í–´–ü–û–õ–ù–ï–ù!
–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞:
üéñ 10 –æ–ø—ã—Ç–∞
üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 5 ¬´–ò—Å–∫—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω¬ª`
		msg := tgbotapi.NewMessage(chatID, questCompleteText)
		h.sendMessage(msg)
	}
}

func (h *BotHandlers) checkLorePagesQuestProgressSequential(userID int64, chatID int64, playerID int, pageNumber int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–µ—Å—Ç 6 (—á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü)
	quest, err := h.db.GetPlayerQuest(playerID, 6)
	if err != nil {
		log.Printf("Error getting quest 6: %v", err)
		return
	}

	if quest == nil || quest.Status != "active" {
		return
	}

	// –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ ‚Äî –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (0..5)
	if quest.Progress+1 == pageNumber {
		newProgress := quest.Progress + 1
		err = h.db.UpdateQuestProgress(playerID, 6, newProgress)
		if err != nil {
			log.Printf("Error updating quest 6 progress: %v", err)
			return
		}

		if newProgress == 5 {
			// –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!
			err = h.db.UpdateQuestStatus(playerID, 6, "completed")
			if err != nil {
				log.Printf("Error completing quest 6: %v", err)
				return
			}

			// –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
			err = h.db.AddItemToInventory(playerID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–ù–∞–±–ª—é–¥–∞—é—â–∏–π –ª–µ—Å¬ª", 1)
			if err != nil {
				log.Printf("Error adding quest 6 reward: %v", err)
				return
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
			err = h.db.UpdatePlayerExperience(playerID, 10)
			if err != nil {
				log.Printf("Error adding quest 6 experience: %v", err)
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
			msg := tgbotapi.NewMessage(chatID, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª –∫–≤–µ—Å—Ç "–ñ–∏–≤–æ–µ –•—Ä–∞–Ω–∏–ª–∏—â–µ"!
–ù–∞–≥—Ä–∞–¥–∞:
üéñ +10 –æ–ø—ã—Ç–∞
üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 6 ¬´–ù–∞–±–ª—é–¥–∞—é—â–∏–π –ª–µ—Å¬ª`)
			h.sendMessage(msg)
		}
	}
}

func (h *BotHandlers) finishSimpleHutBuilding(userID int64, chatID int64, messageID int) {
	totalSeconds := 120
	steps := 12 // –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

	// –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä 0%
	bar := h.createProgressBar(0, 100)
	progressText := fmt.Sprintf("–ò–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞ \"–ü—Ä–æ—Å—Ç–∞—è —Ö–∏–∂–∏–Ω–∞\". –í—Ä–µ–º—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ 120 —Å–µ–∫—É–Ω–¥.\n\n%s 0%%", bar)
	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, progressText)
	h.requestAPI(editMsg)

	for i := 1; i <= steps; i++ {
		time.Sleep(time.Duration(totalSeconds/steps) * time.Second)
		progress := i * 100 / steps
		bar := h.createProgressBar(progress, 100)
		progressText := fmt.Sprintf("–ò–¥–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞ \"–ü—Ä–æ—Å—Ç–∞—è —Ö–∏–∂–∏–Ω–∞\". –í—Ä–µ–º—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ 120 —Å–µ–∫—É–Ω–¥.\n\n%s %d%%", bar, progress)
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, progressText)
		h.requestAPI(editMsg)
	}

	player, err := h.db.GetPlayer(userID)
	if err != nil {
		return
	}
	// –°–Ω–∏–º–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
	h.db.ConsumeItem(player.ID, "–ë–µ—Ä–µ–∑–∞", 20)
	h.db.ConsumeItem(player.ID, "–ë–µ—Ä–µ–∑–æ–≤—ã–π –±—Ä—É—Å", 10)
	h.db.ConsumeItem(player.ID, "–ö–∞–º–µ–Ω—å", 15)
	h.db.ConsumeItem(player.ID, "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞", 10)
	// –û—Ç–Ω–∏–º–∞–µ–º 5 —Å—ã—Ç–æ—Å—Ç–∏
	h.db.UpdatePlayerSatiety(player.ID, -5)
	h.db.UpdateSimpleHutBuilt(player.ID, true)
	updatedPlayer, _ := h.db.GetPlayer(userID)
	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)
	// –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–û–±—ä–µ–∫—Ç \"–ü—Ä–æ—Å—Ç–∞—è —Ö–∏–∂–∏–Ω–∞\" —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω!\n–°—ã—Ç–æ—Å—Ç—å %d/100", updatedPlayer.Satiety))
	h.sendMessage(msg)
}

// –î–æ–±–∞–≤–∏—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:
func (h *BotHandlers) addPage8IfNotExists(playerID int) {
	qty, err := h.db.GetItemQuantityInInventory(playerID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª")
	if err != nil {
		log.Printf("Error checking for page 8: %v", err)
		return
	}
	if qty == 0 {
		err = h.db.AddItemToInventory(playerID, "üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 8 ¬´–°–ª–µ–¥ –¥—Ä–µ–≤–Ω–∏—Ö¬ª", 1)
		if err != nil {
			log.Printf("Error adding page 8 to inventory: %v", err)
		}
	}
}

func (h *BotHandlers) handleOpenHut(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ —Ö–∏–∂–∏–Ω–∞
	if !player.SimpleHutBuilt {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ö–∏–∂–∏–Ω—ã. –ü–æ—Å—Ç—Ä–æ–π –µ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–æ—Å—Ç—Ä–æ–π–∫–∏.")
		h.sendMessage(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —Ö–∏–∂–∏–Ω—É
	hutText := `üõñ –¢—ã –∑–∞—Ö–æ–¥–∏—à—å –≤ —Å–≤–æ—é –ø—Ä–æ—Å—Ç—É—é —Ö–∏–∂–∏–Ω—É.

–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ —Å—Ç–µ–Ω—ã —Å–∫—Ä–∏–ø—è—Ç –Ω–∞ –≤–µ—Ç—Ä—É, –Ω–æ –≤–Ω—É—Ç—Ä–∏ ‚Äî —Ç–µ–ø–ª–æ –∏ —Å–ø–æ–∫–æ–π–Ω–æ.  
–ö–æ—Å—Ç—ë—Ä –µ—â—ë —Ç–ª–µ–µ—Ç –≤ —É–≥–ª—É, –∞ —Ä—è–¥–æ–º –ª–µ–∂–∏—Ç —Ç–≤–æ—è –Ω–µ—Ö–∏—Ç—Ä–∞—è —É—Ç–≤–∞—Ä—å.  
–≠—Ç–æ —Ç–≤–æ—ë –ø–µ—Ä–≤–æ–µ —É–±–µ–∂–∏—â–µ –≤ —ç—Ç–æ–º –º–∏—Ä–µ.

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:

üò¥ –û—Ç–¥–æ—Ö–Ω—É—Ç—å ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 50 –µ–¥. —Å—ã—Ç–æ—Å—Ç–∏ –∑–∞ 30 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞  /rest`

	msg := tgbotapi.NewMessage(message.Chat.ID, hutText)
	h.sendMessage(msg)
}

func (h *BotHandlers) handleRest(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–¥—ã—Ö–∞–µ—Ç –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
	if _, exists := h.restingTimers[userID]; exists {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–¢—ã —É–∂–µ –æ—Ç–¥—ã—Ö–∞–µ—à—å. –î–æ–∂–¥–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç–¥—ã—Ö–∞.")
		h.sendMessage(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
	bar := h.createProgressBar(0, 100)
	progressText := fmt.Sprintf("–û—Ç–¥—ã—Ö –Ω–∞—á–∞–ª—Å—è. –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ 30 –º–∏–Ω—É—Ç.\n\n%s 0%%", bar)
	msg := tgbotapi.NewMessage(message.Chat.ID, progressText)
	progressMsg, _ := h.sendMessageWithResponse(msg)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—Ç–¥—ã—Ö–∞
	totalSeconds := 1800 // 30 –º–∏–Ω—É—Ç
	steps := 30          // –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	messageID := progressMsg.MessageID

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∞–π–º–µ—Ä–µ
	h.restingTimers[userID] = time.NewTimer(time.Duration(totalSeconds) * time.Second)

	go func() {
		for i := 1; i <= steps; i++ {
			time.Sleep(time.Duration(totalSeconds/steps) * time.Second)
			progress := i * 100 / steps
			bar := h.createProgressBar(progress, 100)
			progressText := fmt.Sprintf("–û—Ç–¥—ã—Ö –Ω–∞—á–∞–ª—Å—è. –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ 30 –º–∏–Ω—É—Ç.\n\n%s %d%%", bar, progress)
			editMsg := tgbotapi.NewEditMessageText(message.Chat.ID, messageID, progressText)
			h.requestAPI(editMsg)
		}

		// –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
		<-h.restingTimers[userID].C
		delete(h.restingTimers, userID)

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
		deleteMsg := tgbotapi.NewDeleteMessage(message.Chat.ID, messageID)
		h.requestAPI(deleteMsg)

		// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—ã—Ç–æ—Å—Ç—å
		err = h.db.UpdatePlayerSatiety(player.ID, 50)
		if err != nil {
			log.Printf("Error updating player satiety: %v", err)
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
		updatedPlayer, _ := h.db.GetPlayer(userID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–¥—ã—Ö–∞
		resultText := fmt.Sprintf("–û—Ç–¥—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 50 –µ–¥. —Å—ã—Ç–æ—Å—Ç–∏.\n–°—ã—Ç–æ—Å—Ç—å %d/100", updatedPlayer.Satiety)
		resultMsg := tgbotapi.NewMessage(message.Chat.ID, resultText)
		h.sendMessage(resultMsg)
	}()
}

package handlers

import (
	"fmt"
	"log"
	"reborn_land/database"
	"reborn_land/models"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type BotHandlers struct {
	bot             *tgbotapi.BotAPI
	db              *database.DB
	waitingForName  map[int64]bool
	mineSessions    map[int64]*models.MineSession
	forestSessions  map[int64]*models.ForestSession
	miningTimers    map[int64]*time.Timer
	choppingTimers  map[int64]*time.Timer
	mineCooldowns   map[int64]time.Time // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞ —à–∞—Ö—Ç—ã
	forestCooldowns map[int64]time.Time // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞ –ª–µ—Å–∞
	playerLocation  map[int64]string    // –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
}

func New(bot *tgbotapi.BotAPI, db *database.DB) *BotHandlers {
	return &BotHandlers{
		bot:             bot,
		db:              db,
		waitingForName:  make(map[int64]bool),
		mineSessions:    make(map[int64]*models.MineSession),
		forestSessions:  make(map[int64]*models.ForestSession),
		miningTimers:    make(map[int64]*time.Timer),
		choppingTimers:  make(map[int64]*time.Timer),
		mineCooldowns:   make(map[int64]time.Time),
		forestCooldowns: make(map[int64]time.Time),
		playerLocation:  make(map[int64]string),
	}
}

func (h *BotHandlers) HandleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		h.handleMessage(update.Message)
	}
	if update.CallbackQuery != nil {
		h.handleCallbackQuery(update.CallbackQuery)
	}
}

func (h *BotHandlers) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è
	if h.waitingForName[userID] {
		h.handleNameInput(message)
		return
	}

	switch message.Text {
	case "/start":
		h.handleStart(message)
	case "/profile":
		h.handleProfile(message)
	case "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
		h.handleInventory(message)
	case "üåø –î–æ–±—ã—á–∞":
		h.handleGathering(message)
	case "üî® –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ":
		h.handleWorkplace(message)
	case "üõ† –í–µ—Ä—Å—Ç–∞–∫":
		h.handleWorkbench(message)
	case "üß± –ü–µ—á—å":
		h.handleFurnace(message)
	case "üî• –ö–æ—Å—Ç–µ—Ä":
		h.handleCampfire(message)
	case "‚óÄÔ∏è –ù–∞–∑–∞–¥":
		h.handleBack(message)
	case "‚õè –®–∞—Ö—Ç–∞":
		h.handleMine(message)
	case "üåæ –ü–æ–ª–µ":
		h.handleField(message)
	case "üé£ –û–∑–µ—Ä–æ":
		h.handleLake(message)
	case "üèû –õ–µ—Å":
		h.handleForest(message)
	case "/create_axe":
		h.handleCreateAxe(message)
	case "/create_pickaxe":
		h.handleCreatePickaxe(message)
	case "/create_bow":
		h.handleCreateBow(message)
	case "/create_arrows":
		h.handleCreateArrows(message)
	case "/create_knife":
		h.handleCreateKnife(message)
	case "/create_fishing_rod":
		h.handleCreateFishingRod(message)
	case "/create_birch_plank":
		h.handleCreateBirchPlank(message)
	case "/eat":
		h.handleEat(message)
	case "üéØ –û—Ö–æ—Ç–∞":
		h.handleHunting(message)
	case "üåø –°–±–æ—Ä":
		h.handleForestGathering(message)
	case "ü™ì –†—É–±–∫–∞":
		h.handleChopping(message)
	default:
		// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
		h.sendMessage(msg)
	}
}

func (h *BotHandlers) handleStart(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	exists, err := h.db.PlayerExists(userID)
	if err != nil {
		log.Printf("Error checking player existence: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	if exists {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		player, err := h.db.GetPlayer(userID)
		if err != nil {
			log.Printf("Error getting player: %v", err)
			msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			h.sendMessage(msg)
			return
		}

		msg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, %s! üëã", player.Name))
		h.sendWithKeyboard(msg)
		return
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	h.startRegistration(message)
}

func (h *BotHandlers) startRegistration(message *tgbotapi.Message) {
	// –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	welcomeText := `üèù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ó–µ–º–ª—é –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è!

–¢—ã –ø—Ä–∏—à—ë–ª –≤ –∫—Ä–∞–π, –≥–¥–µ –ø—Ä–µ–∂–¥–µ –Ω–µ —Å—Ç—É–ø–∞–ª–∞ –Ω–æ–≥–∞ —á–µ–ª–æ–≤–µ–∫–∞. –ù–µ—Ç –Ω–∏ –¥–æ–º–æ–≤, –Ω–∏ –¥–æ—Ä–æ–≥ ‚Äî –ª–∏—à—å –±–µ—Å–∫—Ä–∞–π–Ω—è—è –¥–∏–∫–∞—è –∑–µ–º–ª—è, –±–æ–≥–∞—Ç–∞—è —Ä–µ—Å—É—Ä—Å–∞–º–∏, —Ç–∞–π–Ω–∞–º–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.

ü™® –í —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö ‚Äî —Å—Ç–∞—Ä–∞—è, –Ω–æ –∫—Ä–µ–ø–∫–∞—è –∫–∏—Ä–∫–∞. –° –Ω–µ—ë –Ω–∞—á–Ω—ë—Ç—Å—è —Ç–≤–æ–π –ø—É—Ç—å.

üîß –ó–¥–µ—Å—å –Ω–µ—Ç –Ω–∏—á–µ–≥–æ, –Ω–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω —Å–æ–∑–¥–∞—Ç—å –≤—Å—ë.
–ü–æ—Å—Ç—Ä–æ–π —Å–≤–æ—é —Ö–∏–∂–∏–Ω—É, —Ä–∞–∑–≤–µ–¥–∞–π –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏, –¥–æ–±—É–¥—å –ø–µ—Ä–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –∑–∞–ª–æ–∂–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –Ω–æ–≤–æ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏.
–í—Å—ë ‚Äî –æ—Ç –∫–æ—Å—Ç—Ä–∞ –¥–æ —Ö—Ä–∞–º–æ–≤ ‚Äî –±—É–¥–µ—Ç –¥–µ–ª–æ–º —Ç–≤–æ–∏—Ö —Ä—É–∫.`

	msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
	h.sendMessage(msg)

	// –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	go func() {
		time.Sleep(2 * time.Second)

		secondText := `üß≠ –ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:
ü™µ –î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (–¥–µ—Ä–µ–≤–æ, –∫–∞–º–µ–Ω—å, –ø–∏—â–∞)
üõñ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø–æ—Å–µ–ª–µ–Ω–∏—è
üåÑ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
üê∫ –ë–æ—Ä—å–±–∞ —Å –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–æ–π
üë• –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
üîÆüîÆ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥—Ä–µ–≤–Ω–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤`

		msg2 := tgbotapi.NewMessage(message.Chat.ID, secondText)
		h.sendMessage(msg2)

		// –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å–∏–º –∏–º—è
		nameMsg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –∏–º—è:")
		h.sendMessage(nameMsg)

		// –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∂–¥–µ–º –∏–º—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		h.waitingForName[message.From.ID] = true
	}()
}

func (h *BotHandlers) handleNameInput(message *tgbotapi.Message) {
	userID := message.From.ID
	name := strings.TrimSpace(message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
	if utf8.RuneCountInString(name) < 1 || utf8.RuneCountInString(name) > 30 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		h.sendMessage(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	player, err := h.db.CreatePlayer(userID, name)
	if err != nil {
		log.Printf("Error creating player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		h.sendMessage(msg)
		return
	}

	// –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
	delete(h.waitingForName, userID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	successText := fmt.Sprintf(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s! üëã

–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: %d
–û–ø—ã—Ç: %d/100
–°—ã—Ç–æ—Å—Ç—å: %d/100`, player.Name, player.Level, player.Experience, player.Satiety)

	msg := tgbotapi.NewMessage(message.Chat.ID, successText)
	h.sendWithKeyboard(msg)
}

func (h *BotHandlers) handleProfile(message *tgbotapi.Message) {
	userID := message.From.ID

	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	profileText := fmt.Sprintf(`üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
–ò–º—è: %s
–£—Ä–æ–≤–µ–Ω—å: %d
–û–ø—ã—Ç: %d/100
–°—ã—Ç–æ—Å—Ç—å: %d/100`, player.Name, player.Level, player.Experience, player.Satiety)

	msg := tgbotapi.NewMessage(message.Chat.ID, profileText)
	h.sendMessage(msg)
}

func (h *BotHandlers) handleInventory(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
	inventory, err := h.db.GetPlayerInventory(player.ID)
	if err != nil {
		log.Printf("Error getting inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.")
		h.sendMessage(msg)
		return
	}

	if len(inventory) == 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
		h.sendMessage(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
	inventoryText := "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n"
	for _, item := range inventory {
		if item.Type == "tool" && item.Durability > 0 {
			inventoryText += fmt.Sprintf("%s - %d —à—Ç. (–ü—Ä–æ—á–Ω–æ—Å—Ç—å: %d/100)\n", item.ItemName, item.Quantity, item.Durability)
		} else if item.ItemName == "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞" {
			inventoryText += fmt.Sprintf("%s - %d —à—Ç. /eat\n", item.ItemName, item.Quantity)
		} else {
			inventoryText += fmt.Sprintf("%s - %d —à—Ç.\n", item.ItemName, item.Quantity)
		}
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, inventoryText)
	h.sendMessage(msg)
}

func (h *BotHandlers) handleEat(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
	inventory, err := h.db.GetPlayerInventory(player.ID)
	if err != nil {
		log.Printf("Error getting inventory: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.")
		h.sendMessage(msg)
		return
	}

	// –ò—â–µ–º —è–≥–æ–¥—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	var berryItem *models.InventoryItem
	for i, item := range inventory {
		if item.ItemName == "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞" && item.Quantity > 0 {
			berryItem = &inventory[i]
			break
		}
	}

	if berryItem == nil {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç —è–≥–æ–¥ –¥–ª—è —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.")
		h.sendMessage(msg)
		return
	}

	// –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–≥–æ–¥ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
	err = h.db.ConsumeItem(player.ID, "–õ–µ—Å–Ω–∞—è —è–≥–æ–¥–∞", 1)
	if err != nil {
		log.Printf("Error consuming berry: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ —è–≥–æ–¥—ã.")
		h.sendMessage(msg)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—ã—Ç–æ—Å—Ç—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Ä–æ—Å—Ç–∞
	oldSatiety := player.Satiety

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—ã—Ç–æ—Å—Ç—å –Ω–∞ 5
	err = h.db.UpdatePlayerSatiety(player.ID, 5)
	if err != nil {
		log.Printf("Error updating satiety: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—ã—Ç–æ—Å—Ç–∏.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
	updatedPlayer, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting updated player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
		h.sendMessage(msg)
		return
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç —Å—ã—Ç–æ—Å—Ç–∏
	actualSatietyGain := updatedPlayer.Satiety - oldSatiety

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏
	responseText := fmt.Sprintf("–°—ä–µ–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç \"–Ø–≥–æ–¥–∞\", —Å—ã—Ç–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ %d –µ–¥.\n–°—ã—Ç–æ—Å—Ç—å: %d/100", actualSatietyGain, updatedPlayer.Satiety)
	msg := tgbotapi.NewMessage(message.Chat.ID, responseText)
	h.sendMessage(msg)
}

func (h *BotHandlers) handleGathering(message *tgbotapi.Message) {
	gatheringText := `üåø –¢—ã —Å–æ–±—Ä–∞–ª—Å—è –≤ –ø—É—Ç—å –∑–∞ —Ä–µ—Å—É—Ä—Å–∞–º–∏.

–í—ã–±–µ—Ä–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è:

üèû –õ–µ—Å ‚Äî –¥—Ä–µ–≤–µ—Å–∏–Ω–∞, –æ—Ö–æ—Ç–∞, —è–≥–æ–¥—ã  
‚õè –®–∞—Ö—Ç–∞ ‚Äî –∫–∞–º–µ–Ω—å, —Ä—É–¥–∞, —É–≥–æ–ª—å  
üåæ –ü–æ–ª–µ ‚Äî —Ç—Ä–∞–≤—ã, –∑–ª–∞–∫–∏, —Ä–µ–¥–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è  
üé£ –û–∑–µ—Ä–æ ‚Äî —Ä—ã–±–∞–ª–∫–∞ –∏ –≤–æ–¥–∞`

	msg := tgbotapi.NewMessage(message.Chat.ID, gatheringText)
	h.sendGatheringKeyboard(msg)
}

func (h *BotHandlers) handleWorkplace(message *tgbotapi.Message) {
	workplaceText := `üî® –¢—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ —Ä–∞–±–æ—á–µ–º—É –º–µ—Å—Ç—É.

–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã.`

	msg := tgbotapi.NewMessage(message.Chat.ID, workplaceText)
	h.sendWorkplaceKeyboard(msg)
}

func (h *BotHandlers) handleWorkbench(message *tgbotapi.Message) {
	workbenchText := `üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:

–ë–µ—Ä–µ–∑–æ–≤—ã–π –±—Ä—É—Å ‚Äî /create_birch_plank
–ü—Ä–æ—Å—Ç–æ–π —Ç–æ–ø–æ—Ä ‚Äî /create_axe
–ü—Ä–æ—Å—Ç–∞—è –∫–∏—Ä–∫–∞ ‚Äî /create_pickaxe
–ü—Ä–æ—Å—Ç–æ–π –ª—É–∫ ‚Äî /create_bow
–°—Ç—Ä–µ–ª—ã ‚Äî /create_arrows
–ü—Ä–æ—Å—Ç–æ–π –Ω–æ–∂ ‚Äî /create_knife
–ü—Ä–æ—Å—Ç–∞—è —É–¥–æ—á–∫–∞ ‚Äî /create_fishing_rod`

	msg := tgbotapi.NewMessage(message.Chat.ID, workbenchText)
	h.sendMessage(msg)
}

func (h *BotHandlers) handleFurnace(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üß± –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.sendMessage(msg)
}

func (h *BotHandlers) handleCampfire(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üî• –§—É–Ω–∫—Ü–∏—è –∫–æ—Å—Ç—Ä–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.sendMessage(msg)
}

func (h *BotHandlers) handleBack(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–∞ –∏–ª–∏ —Ä—É–±–∫–∞
	if _, isMining := h.miningTimers[userID]; isMining {
		// –ï—Å–ª–∏ –∏–¥–µ—Ç –¥–æ–±—ã—á–∞, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–π—Ç–∏
		msg := tgbotapi.NewMessage(chatID, "–ò–¥–µ—Ç –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–∞.")
		h.sendMessage(msg)
		return
	}

	if _, isChopping := h.choppingTimers[userID]; isChopping {
		// –ï—Å–ª–∏ –∏–¥–µ—Ç —Ä—É–±–∫–∞, –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–π—Ç–∏
		msg := tgbotapi.NewMessage(chatID, "–ò–¥–µ—Ç —Ä—É–±–∫–∞ –¥–µ—Ä–µ–≤–∞.")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —à–∞—Ö—Ç—ã
	if session, exists := h.mineSessions[userID]; exists {
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º —à–∞—Ö—Ç—ã
		deleteFieldMsg := tgbotapi.NewDeleteMessage(chatID, session.FieldMessageID)
		h.requestAPI(deleteFieldMsg)

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞—Ö—Ç–µ
		deleteInfoMsg := tgbotapi.NewDeleteMessage(chatID, session.InfoMessageID)
		h.requestAPI(deleteInfoMsg)

		// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é —à–∞—Ö—Ç—ã
		delete(h.mineSessions, userID)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥–æ–±—ã—á–∏
		msg := tgbotapi.NewMessage(chatID, "üåø –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:")
		h.sendGatheringKeyboard(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –ª–µ—Å–∞
	if session, exists := h.forestSessions[userID]; exists {
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º –ª–µ—Å–∞
		deleteFieldMsg := tgbotapi.NewDeleteMessage(chatID, session.FieldMessageID)
		h.requestAPI(deleteFieldMsg)

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–µ—Å–µ
		deleteInfoMsg := tgbotapi.NewDeleteMessage(chatID, session.InfoMessageID)
		h.requestAPI(deleteInfoMsg)

		// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –ª–µ—Å–∞
		delete(h.forestSessions, userID)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ª–µ—Å–∞
		msg := tgbotapi.NewMessage(chatID, "üå≤ –¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –≥—É—Å—Ç–æ–π –ª–µ—Å. –ü–æ–¥ –Ω–æ–≥–∞–º–∏ —Ö—Ä—É—Å—Ç–∏—Ç —Ç—Ä–∞–≤–∞, –≤ –∫—Ä–æ–Ω–∞—Ö –ø–æ—é—Ç –ø—Ç–∏—Ü—ã, –∞ –≥–¥–µ-—Ç–æ –≤–¥–∞–ª–µ–∫–µ —Å–ª—ã—à–µ–Ω —Ç—Ä–µ—Å–∫ –≤–µ—Ç–∫–∏ ‚Äî —Ç—ã –∑–¥–µ—Å—å –Ω–µ –æ–¥–∏–Ω...\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\nü™ì –†—É–±–∏—Ç—å –¥–µ—Ä–µ–≤—å—è\nüéØ –û—Ö–æ—Ç–∏—Ç—å—Å—è –Ω–∞ –¥–∏—á—å\nüåø –°–æ–±–∏—Ä–∞—Ç—å —Ç—Ä–∞–≤—ã –∏ —è–≥–æ–¥—ã")
		h.sendForestKeyboard(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
	if location, exists := h.playerLocation[userID]; exists && location == "forest" {
		// –ò–≥—Ä–æ–∫ –≤ –ª–µ—Å—É - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥–æ–±—ã—á–∏
		delete(h.playerLocation, userID) // –£–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
		msg := tgbotapi.NewMessage(chatID, "üåø –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:")
		h.sendGatheringKeyboard(msg)
	} else {
		// –û–±—ã—á–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		msg := tgbotapi.NewMessage(chatID, "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.")
		h.sendWithKeyboard(msg)
	}
}

func (h *BotHandlers) handleMine(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫—É–ª–¥–∞—É–Ω —à–∞—Ö—Ç—ã
	if cooldownEnd, exists := h.mineCooldowns[userID]; exists {
		if time.Now().Before(cooldownEnd) {
			// –ö—É–ª–¥–∞—É–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
			remainingTime := time.Until(cooldownEnd)
			msg := tgbotapi.NewMessage(message.Chat.ID,
				fmt.Sprintf("–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞—Ö—Ç—ã –æ—Å—Ç–∞–ª–æ—Å—å %d —Å–µ–∫.", int(remainingTime.Seconds())))
			h.sendMessage(msg)
			return
		} else {
			// –ö—É–ª–¥–∞—É–Ω –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
			delete(h.mineCooldowns, userID)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ç–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
	if player.Satiety <= 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°—ã—Ç–æ—Å—Ç—å 0. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–µ—Å—Ç—å.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —à–∞—Ö—Ç—É
	mine, err := h.db.GetOrCreateMine(player.ID)
	if err != nil {
		log.Printf("Error getting mine: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —à–∞—Ö—Ç–æ–π.")
		h.sendMessage(msg)
		return
	}

	// –ï—Å–ª–∏ —à–∞—Ö—Ç–∞ –±—ã–ª–∞ –∏—Å—Ç–æ—â–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
	if mine.IsExhausted {
		if err := h.db.SetMineExhausted(player.ID, false); err != nil {
			log.Printf("Error setting mine exhausted: %v", err)
		}
		mine.IsExhausted = false
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —à–∞—Ö—Ç—ã
	h.createNewMineSession(userID, message.Chat.ID, mine)
}

func (h *BotHandlers) createNewMineSession(userID int64, chatID int64, mine *models.Mine) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–ª–µ
	field := h.generateRandomMineField()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –∏ –ø–æ–ª—É—á–∞–µ–º MessageID
	fieldMessageID, infoMessageID := h.showMineField(chatID, mine, field)

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
	session := &models.MineSession{
		PlayerID:       userID,
		Resources:      field,
		IsActive:       true,
		IsMining:       false,
		StartedAt:      time.Now(),
		FieldMessageID: fieldMessageID,
		InfoMessageID:  infoMessageID,
	}

	h.mineSessions[userID] = session
}

func (h *BotHandlers) showMineField(chatID int64, mine *models.Mine, field [][]string) (int, int) {
	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < 3; i++ {
		var row []tgbotapi.InlineKeyboardButton
		for j := 0; j < 3; j++ {
			cell := field[i][j]
			var callbackData string

			switch cell {
			case "ü™®":
				callbackData = fmt.Sprintf("mine_stone_%d_%d", i, j)
			case "‚ö´":
				callbackData = fmt.Sprintf("mine_coal_%d_%d", i, j)
			default:
				callbackData = fmt.Sprintf("mine_empty_%d_%d", i, j)
				cell = " "
			}

			button := tgbotapi.NewInlineKeyboardButtonData(cell, callbackData)
			row = append(row, button)
		}
		keyboard = append(keyboard, row)
	}

	// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ —à–∞—Ö—Ç—ã —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
	fieldMsg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –¥–æ–±—ã—á–∏:")
	fieldMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	fieldResponse, _ := h.sendChattableWithResponse(fieldMsg)

	// –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := mine.Level*100 - mine.Experience

	infoText := fmt.Sprintf(`‚õè –®–∞—Ö—Ç–∞ (–£—Ä–æ–≤–µ–Ω—å %d)
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
ü™® –ö–∞–º–µ–Ω—å
‚ö´ –£–≥–æ–ª—å`, mine.Level, expToNext)

	mineKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	mineKeyboard.ResizeKeyboard = true

	infoMsg := tgbotapi.NewMessage(chatID, infoText)
	infoMsg.ReplyMarkup = mineKeyboard
	infoResponse, _ := h.sendChattableWithResponse(infoMsg)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—è –∏ ID –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	return fieldResponse.MessageID, infoResponse.MessageID
}

func (h *BotHandlers) generateRandomMineField() [][]string {
	// –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ 3x3
	field := make([][]string, 3)
	for i := range field {
		field[i] = make([]string, 3)
	}

	// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
	availableResources := []string{"ü™®", "‚ö´"}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
	now := time.Now()
	seed := now.UnixNano()

	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
	positions := [][2]int{
		{0, 0}, {0, 1}, {0, 2},
		{1, 0}, {1, 1}, {1, 2},
		{2, 0}, {2, 1}, {2, 2},
	}

	// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
	for i := len(positions) - 1; i > 0; i-- {
		j := int((seed + int64(i*13)) % int64(i+1))
		positions[i], positions[j] = positions[j], positions[i]
	}

	// –†–∞–∑–º–µ—â–∞–µ–º 3 —Ä–µ—Å—É—Ä—Å–∞ –≤ –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–∑–∏—Ü–∏—è—Ö
	for i := 0; i < 3; i++ {
		pos := positions[i]
		// –í—ã–±–∏—Ä–∞–µ–º —Ä–µ—Å—É—Ä—Å –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ
		resourceIndex := int((seed + int64(i*17) + int64(pos[0]*3) + int64(pos[1])) % int64(len(availableResources)))
		resourceType := availableResources[resourceIndex]
		field[pos[0]][pos[1]] = resourceType
	}

	return field
}

func (h *BotHandlers) createProgressBar(current, total int) string {
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∏–∑ 10 –±–ª–æ–∫–æ–≤
	barLength := 10
	filled := (current * barLength) / total
	if filled > barLength {
		filled = barLength
	}

	progressBar := ""
	for i := 0; i < barLength; i++ {
		if i < filled {
			progressBar += "üü©" // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –±–ª–æ–∫
		} else {
			progressBar += "‚¨ú" // –ü—É—Å—Ç–æ–π –±–ª–æ–∫
		}
	}

	return progressBar
}

func (h *BotHandlers) updateMiningProgress(userID int64, chatID int64, messageID int, resourceName string, totalDuration int, durability int, row, col int) {
	startTime := time.Now()
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			elapsed := time.Since(startTime).Seconds()
			progress := int(elapsed)

			if progress >= totalDuration {
				// –î–æ–±—ã—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
				h.completeMining(userID, chatID, resourceName, durability, messageID, row, col)
				return
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
			percentage := int((elapsed / float64(totalDuration)) * 100)
			progressBar := h.createProgressBar(progress, totalDuration)

			newText := fmt.Sprintf(`–ù–∞—á–∞–ª–∞—Å—å –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–∞ "%s". –í—Ä–µ–º—è –¥–æ–±—ã—á–∏ %d —Å–µ–∫.
			
%s %d%%`, resourceName, totalDuration, progressBar, percentage)

			// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			editMsg := tgbotapi.NewEditMessageText(chatID, messageID, newText)
			h.editMessage(editMsg)

		case <-time.After(time.Duration(totalDuration+1) * time.Second):
			// –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
			return
		}
	}
}

func (h *BotHandlers) handleField(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üåæ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.sendMessage(msg)
}

func (h *BotHandlers) handleLake(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üé£ –§—É–Ω–∫—Ü–∏—è –æ–∑–µ—Ä–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.sendMessage(msg)
}

func (h *BotHandlers) handleForest(message *tgbotapi.Message) {
	userID := message.From.ID

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
	h.playerLocation[userID] = "forest"

	forestText := `üå≤ –¢—ã –≤—Ö–æ–¥–∏—à—å –≤ –≥—É—Å—Ç–æ–π –ª–µ—Å. –ü–æ–¥ –Ω–æ–≥–∞–º–∏ —Ö—Ä—É—Å—Ç–∏—Ç —Ç—Ä–∞–≤–∞, –≤ –∫—Ä–æ–Ω–∞—Ö –ø–æ—é—Ç –ø—Ç–∏—Ü—ã, –∞ –≥–¥–µ-—Ç–æ –≤–¥–∞–ª–µ–∫–µ —Å–ª—ã—à–µ–Ω —Ç—Ä–µ—Å–∫ –≤–µ—Ç–∫–∏ ‚Äî —Ç—ã –∑–¥–µ—Å—å –Ω–µ –æ–¥–∏–Ω...

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
ü™ì –†—É–±–∏—Ç—å –¥–µ—Ä–µ–≤—å—è  
üéØ –û—Ö–æ—Ç–∏—Ç—å—Å—è –Ω–∞ –¥–∏—á—å  
üåø –°–æ–±–∏—Ä–∞—Ç—å —Ç—Ä–∞–≤—ã –∏ —è–≥–æ–¥—ã`

	msg := tgbotapi.NewMessage(message.Chat.ID, forestText)
	h.sendForestKeyboard(msg)
}

func (h *BotHandlers) handleHunting(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üéØ –§—É–Ω–∫—Ü–∏—è –æ—Ö–æ—Ç—ã –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.sendMessage(msg)
}

func (h *BotHandlers) handleChopping(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫—É–ª–¥–∞—É–Ω –ª–µ—Å–∞
	if cooldownEnd, exists := h.forestCooldowns[userID]; exists {
		if time.Now().Before(cooldownEnd) {
			// –ö—É–ª–¥–∞—É–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
			remainingTime := time.Until(cooldownEnd)
			msg := tgbotapi.NewMessage(message.Chat.ID,
				fmt.Sprintf("–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å %d —Å–µ–∫.", int(remainingTime.Seconds())))
			h.sendMessage(msg)
			return
		} else {
			// –ö—É–ª–¥–∞—É–Ω –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
			delete(h.forestCooldowns, userID)
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ç–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
	if player.Satiety <= 0 {
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°—ã—Ç–æ—Å—Ç—å 0. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–µ—Å—Ç—å.")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–µ—Å
	forest, err := h.db.GetOrCreateForest(player.ID)
	if err != nil {
		log.Printf("Error getting forest: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ª–µ—Å–æ–º.")
		h.sendMessage(msg)
		return
	}

	// –ï—Å–ª–∏ –ª–µ—Å –±—ã–ª –∏—Å—Ç–æ—â–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
	if forest.IsExhausted {
		if err := h.db.SetForestExhausted(player.ID, false); err != nil {
			log.Printf("Error setting forest exhausted: %v", err)
		}
		forest.IsExhausted = false
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ª–µ—Å–∞
	h.createNewForestSession(userID, message.Chat.ID, forest)
}

func (h *BotHandlers) createNewForestSession(userID int64, chatID int64, forest *models.Forest) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–ª–µ
	field := h.generateRandomForestField()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –∏ –ø–æ–ª—É—á–∞–µ–º MessageID
	fieldMessageID, infoMessageID := h.showForestField(chatID, forest, field)

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
	session := &models.ForestSession{
		PlayerID:       userID,
		Resources:      field,
		IsActive:       true,
		IsChopping:     false,
		StartedAt:      time.Now(),
		FieldMessageID: fieldMessageID,
		InfoMessageID:  infoMessageID,
	}

	h.forestSessions[userID] = session
}

func (h *BotHandlers) generateRandomForestField() [][]string {
	// –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ 3x3
	field := make([][]string, 3)
	for i := range field {
		field[i] = make([]string, 3)
	}

	// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –ª–µ—Å–∞
	availableResources := []string{"üå≥"}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
	now := time.Now()
	seed := now.UnixNano()

	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
	positions := [][2]int{
		{0, 0}, {0, 1}, {0, 2},
		{1, 0}, {1, 1}, {1, 2},
		{2, 0}, {2, 1}, {2, 2},
	}

	// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
	for i := len(positions) - 1; i > 0; i-- {
		j := int((seed + int64(i*13)) % int64(i+1))
		positions[i], positions[j] = positions[j], positions[i]
	}

	// –†–∞–∑–º–µ—â–∞–µ–º 3 —Ä–µ—Å—É—Ä—Å–∞ –≤ –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–∑–∏—Ü–∏—è—Ö
	for i := 0; i < 3; i++ {
		pos := positions[i]
		// –í—ã–±–∏—Ä–∞–µ–º —Ä–µ—Å—É—Ä—Å –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ
		resourceIndex := int((seed + int64(i*17) + int64(pos[0]*3) + int64(pos[1])) % int64(len(availableResources)))
		resourceType := availableResources[resourceIndex]
		field[pos[0]][pos[1]] = resourceType
	}

	return field
}

func (h *BotHandlers) showForestField(chatID int64, forest *models.Forest, field [][]string) (int, int) {
	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < 3; i++ {
		var row []tgbotapi.InlineKeyboardButton
		for j := 0; j < 3; j++ {
			cell := field[i][j]
			var callbackData string

			switch cell {
			case "üå≥":
				callbackData = fmt.Sprintf("forest_birch_%d_%d", i, j)
			default:
				callbackData = fmt.Sprintf("forest_empty_%d_%d", i, j)
				cell = " "
			}

			button := tgbotapi.NewInlineKeyboardButtonData(cell, callbackData)
			row = append(row, button)
		}
		keyboard = append(keyboard, row)
	}

	// –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ª–µ—Å–∞ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
	fieldMsg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è —Ä—É–±–∫–∏:")
	fieldMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	fieldResponse, _ := h.sendChattableWithResponse(fieldMsg)

	// –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := forest.Level*100 - forest.Experience

	infoText := fmt.Sprintf(`ü™ì –†—É–±–∫–∞ (–£—Ä–æ–≤–µ–Ω—å %d)
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
üå≥ –ë–µ—Ä–µ–∑–∞`, forest.Level, expToNext)

	forestKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	forestKeyboard.ResizeKeyboard = true

	infoMsg := tgbotapi.NewMessage(chatID, infoText)
	infoMsg.ReplyMarkup = forestKeyboard
	infoResponse, _ := h.sendChattableWithResponse(infoMsg)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ–ª—è –∏ ID –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	return fieldResponse.MessageID, infoResponse.MessageID
}

func (h *BotHandlers) handleForestGathering(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "üåø –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
	h.sendMessage(msg)
}

func (h *BotHandlers) handleCreateAxe(message *tgbotapi.Message) {
	h.showRecipe(message, "–ü—Ä–æ—Å—Ç–æ–π —Ç–æ–ø–æ—Ä")
}

func (h *BotHandlers) handleCreatePickaxe(message *tgbotapi.Message) {
	h.showRecipe(message, "–ü—Ä–æ—Å—Ç–∞—è –∫–∏—Ä–∫–∞")
}

func (h *BotHandlers) handleCreateBow(message *tgbotapi.Message) {
	h.showRecipe(message, "–ü—Ä–æ—Å—Ç–æ–π –ª—É–∫")
}

func (h *BotHandlers) handleCreateArrows(message *tgbotapi.Message) {
	h.showRecipe(message, "–°—Ç—Ä–µ–ª—ã")
}

func (h *BotHandlers) handleCreateKnife(message *tgbotapi.Message) {
	h.showRecipe(message, "–ü—Ä–æ—Å—Ç–æ–π –Ω–æ–∂")
}

func (h *BotHandlers) handleCreateFishingRod(message *tgbotapi.Message) {
	h.showRecipe(message, "–ü—Ä–æ—Å—Ç–∞—è —É–¥–æ—á–∫–∞")
}

func (h *BotHandlers) handleCreateBirchPlank(message *tgbotapi.Message) {
	h.showRecipe(message, "–ë–µ—Ä–µ–∑–æ–≤—ã–π –±—Ä—É—Å")
}

func (h *BotHandlers) showRecipe(message *tgbotapi.Message, itemName string) {
	userID := message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
		h.sendMessage(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–ø—Ç
	recipe, err := h.db.GetRecipeRequirements(itemName)
	if err != nil {
		log.Printf("Error getting recipe: %v", err)
		msg := tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞.")
		h.sendMessage(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞
	recipeText := fmt.Sprintf(`–î–ª—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ "%s" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ª–µ–¥—É—é—â–µ–µ:`, itemName)
	canCraft := true

	for _, ingredient := range recipe {
		playerQuantity, err := h.db.GetItemQuantityInInventory(player.ID, ingredient.ItemName)
		if err != nil {
			log.Printf("Error getting inventory quantity: %v", err)
			playerQuantity = 0
		}

		if playerQuantity < ingredient.Quantity {
			canCraft = false
		}

		recipeText += fmt.Sprintf("\n%s - %d/%d —à—Ç.", ingredient.ItemName, playerQuantity, ingredient.Quantity)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å"
	var buttonText string
	if canCraft {
		buttonText = "–°–æ–∑–¥–∞—Ç—å ‚úÖ"
	} else {
		buttonText = "–°–æ–∑–¥–∞—Ç—å ‚ùå"
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, recipeText)

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞—Ç—å
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, fmt.Sprintf("craft_%s", itemName)),
		),
	)
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	data := callback.Data

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback'–∏ –æ—Ç —à–∞—Ö—Ç—ã
	if strings.HasPrefix(data, "mine_stone_") {
		parts := strings.Split(data, "_")
		if len(parts) == 4 {
			row, col := parts[2], parts[3]
			h.startMiningAtPosition(userID, callback.Message.Chat.ID, "–ö–∞–º–µ–Ω—å", 10, callback.ID, row, col)
		}
	} else if strings.HasPrefix(data, "mine_coal_") {
		parts := strings.Split(data, "_")
		if len(parts) == 4 {
			row, col := parts[2], parts[3]
			h.startMiningAtPosition(userID, callback.Message.Chat.ID, "–£–≥–æ–ª—å", 20, callback.ID, row, col)
		}
	} else if strings.HasPrefix(data, "mine_empty_") {
		// –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–ó–¥–µ—Å—å –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤!")
		h.requestAPI(callbackConfig)
	} else if strings.HasPrefix(data, "forest_birch_") {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback'–∏ –æ—Ç –ª–µ—Å–∞
		parts := strings.Split(data, "_")
		if len(parts) == 4 {
			row, col := parts[2], parts[3]
			h.startChoppingAtPosition(userID, callback.Message.Chat.ID, "–ë–µ—Ä–µ–∑–∞", 10, callback.ID, row, col)
		}
	} else if strings.HasPrefix(data, "forest_empty_") {
		// –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–ó–¥–µ—Å—å –Ω–µ—Ç –¥–µ—Ä–µ–≤—å–µ–≤!")
		h.requestAPI(callbackConfig)
	} else {
		// –û—Å—Ç–∞–ª—å–Ω—ã–µ callback (–∫—Ä–∞—Ñ—Ç –∏ —Ç.–¥.)
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, "üî® –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callback.ID, "")
		h.requestAPI(callbackConfig)
	}
}

func (h *BotHandlers) startMiningAtPosition(userID int64, chatID int64, resourceName string, duration int, callbackID string, rowStr, colStr string) {
	row, _ := strconv.Atoi(rowStr)
	col, _ := strconv.Atoi(colStr)

	h.startMining(userID, chatID, resourceName, duration, callbackID, row, col)
}

func (h *BotHandlers) startMining(userID int64, chatID int64, resourceName string, duration int, callbackID string, row, col int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∫–∏
	hasTool, durability, err := h.db.HasToolInInventory(player.ID, "–ü—Ä–æ—Å—Ç–∞—è –∫–∏—Ä–∫–∞")
	if err != nil {
		log.Printf("Error checking tool: %v", err)
		return
	}

	if !hasTool {
		msg := tgbotapi.NewMessage(chatID, `–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "–ü—Ä–æ—Å—Ç–∞—è –∫–∏—Ä–∫–∞".`)
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackConfig := tgbotapi.NewCallback(callbackID, "")
	h.requestAPI(callbackConfig)

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–æ–±—ã—á–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if session, exists := h.mineSessions[userID]; exists && session.ResultMessageID != 0 {
		deleteResultMsg := tgbotapi.NewDeleteMessage(chatID, session.ResultMessageID)
		h.requestAPI(deleteResultMsg)
		session.ResultMessageID = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –¥–æ–±—ã—á–∏ (–Ω–µ —É–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
	initialText := fmt.Sprintf(`–ù–∞—á–∞–ª–∞—Å—å –¥–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–∞ "%s". –í—Ä–µ–º—è –¥–æ–±—ã—á–∏ %d —Å–µ–∫.
		
%s 0%%`, resourceName, duration, h.createProgressBar(0, 10))

	miningMsg := tgbotapi.NewMessage(chatID, initialText)
	sentMsg, _ := h.sendMessageWithResponse(miningMsg)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
	go h.updateMiningProgress(userID, chatID, sentMsg.MessageID, resourceName, duration, durability, row, col)

	// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–∞–π–º–µ—Ä–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤ updateMiningProgress)
	timer := time.NewTimer(time.Duration(duration) * time.Second)
	h.miningTimers[userID] = timer
}

func (h *BotHandlers) completeMining(userID int64, chatID int64, resourceName string, oldDurability int, messageID int, row, col int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
	if err := h.db.AddItemToInventory(player.ID, resourceName, 1); err != nil {
		log.Printf("Error adding item to inventory: %v", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å –∫–∏—Ä–∫–∏ –∏ —Å—ã—Ç–æ—Å—Ç—å (–ø—Ä–∏ –¥–æ–±—ã—á–µ –∏–≥—Ä–æ–∫ —Ç—Ä–∞—Ç–∏—Ç —ç–Ω–µ—Ä–≥–∏—é)
	if err := h.db.UpdateItemDurability(player.ID, "–ü—Ä–æ—Å—Ç–∞—è –∫–∏—Ä–∫–∞", 1); err != nil {
		log.Printf("Error updating item durability: %v", err)
	}
	if err := h.db.UpdatePlayerSatiety(player.ID, -1); err != nil {
		log.Printf("Error updating player satiety: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç —à–∞—Ö—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
	levelUp, newLevel, err := h.db.UpdateMineExperience(player.ID, 2)
	if err != nil {
		log.Printf("Error updating mine experience: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	updatedPlayer, _ := h.db.GetPlayer(userID)
	mine, _ := h.db.GetOrCreateMine(player.ID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±—ã—á–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	resultText := fmt.Sprintf(`‚úÖ –¢—ã –¥–æ–±—ã–ª %s!
–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: 2
–°—ã—Ç–æ—Å—Ç—å: %d/100
–ü—Ä–æ—á–Ω–æ—Å—Ç—å –∫–∏—Ä–∫–∏: %d/100
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞`,
		resourceName,
		updatedPlayer.Satiety,
		oldDurability-1,
		mine.Level*100-mine.Experience)

	msg := tgbotapi.NewMessage(chatID, resultText)
	resultResponse, _ := h.sendMessageWithResponse(msg)

	// –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏
	if levelUp {
		levelUpText := fmt.Sprintf("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–≤–µ–Ω—å —à–∞—Ö—Ç—ã –ø–æ–≤—ã—à–µ–Ω –¥–æ %d —É—Ä–æ–≤–Ω—è!", newLevel)
		levelUpMsg := tgbotapi.NewMessage(chatID, levelUpText)
		h.sendMessage(levelUpMsg)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ —Å–µ—Å—Å–∏–∏
	if session, exists := h.mineSessions[userID]; exists {
		session.ResultMessageID = resultResponse.MessageID
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π, –Ω–µ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å

	// –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä
	delete(h.miningTimers, userID)

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ - —É–±–∏—Ä–∞–µ–º –¥–æ–±—ã—Ç—ã–π —Ä–µ—Å—É—Ä—Å
	if session, exists := h.mineSessions[userID]; exists {
		session.Resources[row][col] = ""

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ä–µ—Å—É—Ä—Å—ã –≤ –ø–æ–ª–µ
		totalResources := 0
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				if session.Resources[i][j] != "" {
					totalResources++
				}
			}
		}

		if totalResources > 0 {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—è
			h.updateMineField(chatID, session.Resources, session.FieldMessageID)
			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
			h.updateMineInfoMessage(userID, chatID, mine, session.InfoMessageID)
		} else {
			// –ü–æ–ª–µ –∏—Å—Ç–æ—â–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
			if err := h.db.ExhaustMine(userID); err != nil {
				log.Printf("Error exhausting mine: %v", err)
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∫—É–ª–¥–∞—É–Ω–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
			h.mineCooldowns[userID] = time.Now().Add(60 * time.Second)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º —à–∞—Ö—Ç—ã
			deleteFieldMsg := tgbotapi.NewDeleteMessage(chatID, session.FieldMessageID)
			h.requestAPI(deleteFieldMsg)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞—Ö—Ç–µ
			deleteInfoMsg := tgbotapi.NewDeleteMessage(chatID, session.InfoMessageID)
			h.requestAPI(deleteInfoMsg)

			exhaustMsg := tgbotapi.NewMessage(chatID, `‚ö†Ô∏è –®–∞—Ö—Ç–∞ –∏—Å—Ç–æ—â–µ–Ω–∞! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å 1 –º–∏–Ω—É—Ç—É –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤.
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚õè –®–∞—Ö—Ç–∞" —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.`)
			h.sendGatheringKeyboard(exhaustMsg)

			// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
			delete(h.mineSessions, userID)
		}
	}
}

func (h *BotHandlers) updateMineField(chatID int64, field [][]string, messageID int) {
	text := "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –¥–æ–±—ã—á–∏:"

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < 3; i++ {
		var row []tgbotapi.InlineKeyboardButton
		for j := 0; j < 3; j++ {
			cell := field[i][j]
			var callbackData string

			switch cell {
			case "ü™®":
				callbackData = fmt.Sprintf("mine_stone_%d_%d", i, j)
			case "‚ö´":
				callbackData = fmt.Sprintf("mine_coal_%d_%d", i, j)
			default:
				callbackData = fmt.Sprintf("mine_empty_%d_%d", i, j)
				cell = " "
			}

			button := tgbotapi.NewInlineKeyboardButtonData(cell, callbackData)
			row = append(row, button)
		}
		keyboard = append(keyboard, row)
	}

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, messageID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	h.editMessage(editMsg)
}

func (h *BotHandlers) updateMineInfoMessage(userID int64, chatID int64, mine *models.Mine, messageID int) {
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := mine.Level*100 - mine.Experience

	infoText := fmt.Sprintf(`‚õè –®–∞—Ö—Ç–∞ (–£—Ä–æ–≤–µ–Ω—å %d)
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
ü™® –ö–∞–º–µ–Ω—å
‚ö´ –£–≥–æ–ª—å`, mine.Level, expToNext)

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	mineKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	mineKeyboard.ResizeKeyboard = true

	newMsg := tgbotapi.NewMessage(chatID, infoText)
	newMsg.ReplyMarkup = mineKeyboard
	newResponse, _ := h.sendMessageWithResponse(newMsg)

	// –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
	if session, exists := h.mineSessions[userID]; exists {
		session.InfoMessageID = newResponse.MessageID
	}
}

func (h *BotHandlers) sendWithKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
			tgbotapi.NewKeyboardButton("üåø –î–æ–±—ã—á–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üî® –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) sendWorkplaceKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üõ† –í–µ—Ä—Å—Ç–∞–∫"),
			tgbotapi.NewKeyboardButton("üß± –ü–µ—á—å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üî• –ö–æ—Å—Ç–µ—Ä"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) sendMineKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —à–∞—Ö—Ç—ã
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) sendGatheringKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–±—ã—á–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚õè –®–∞—Ö—Ç–∞"),
			tgbotapi.NewKeyboardButton("üåæ –ü–æ–ª–µ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üé£ –û–∑–µ—Ä–æ"),
			tgbotapi.NewKeyboardButton("üèû –õ–µ—Å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

func (h *BotHandlers) sendForestKeyboard(msg tgbotapi.MessageConfig) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ª–µ—Å–∞
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üéØ –û—Ö–æ—Ç–∞"),
			tgbotapi.NewKeyboardButton("üåø –°–±–æ—Ä"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("ü™ì –†—É–±–∫–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	h.sendMessage(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func (h *BotHandlers) sendMessage(msg tgbotapi.MessageConfig) {
	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("Failed to send message: %v", err)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func (h *BotHandlers) sendMessageWithResponse(msg tgbotapi.MessageConfig) (tgbotapi.Message, error) {
	response, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("Failed to send message: %v", err)
	}
	return response, err
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func (h *BotHandlers) editMessage(editMsg tgbotapi.Chattable) {
	if _, err := h.bot.Send(editMsg); err != nil {
		log.Printf("Failed to edit message: %v", err)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª—é–±–æ–≥–æ Chattable —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func (h *BotHandlers) sendChattableWithResponse(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	response, err := h.bot.Send(c)
	if err != nil {
		log.Printf("Failed to send chattable: %v", err)
	}
	return response, err
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func (h *BotHandlers) requestAPI(c tgbotapi.Chattable) {
	if _, err := h.bot.Request(c); err != nil {
		log.Printf("Failed to send API request: %v", err)
	}
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É–±–∫–∏ –ª–µ—Å–∞
func (h *BotHandlers) startChoppingAtPosition(userID int64, chatID int64, resourceName string, duration int, callbackID string, rowStr, colStr string) {
	row, _ := strconv.Atoi(rowStr)
	col, _ := strconv.Atoi(colStr)

	h.startChopping(userID, chatID, resourceName, duration, callbackID, row, col)
}

func (h *BotHandlers) startChopping(userID int64, chatID int64, resourceName string, duration int, callbackID string, row, col int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ø–æ—Ä–∞
	hasTool, durability, err := h.db.HasToolInInventory(player.ID, "–ü—Ä–æ—Å—Ç–æ–π —Ç–æ–ø–æ—Ä")
	if err != nil {
		log.Printf("Error checking tool: %v", err)
		return
	}

	if !hasTool {
		msg := tgbotapi.NewMessage(chatID, `–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ "–ü—Ä–æ—Å—Ç–æ–π —Ç–æ–ø–æ—Ä".`)
		h.sendMessage(msg)
		callbackConfig := tgbotapi.NewCallback(callbackID, "")
		h.requestAPI(callbackConfig)
		return
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackConfig := tgbotapi.NewCallback(callbackID, "")
	h.requestAPI(callbackConfig)

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä—É–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if session, exists := h.forestSessions[userID]; exists && session.ResultMessageID != 0 {
		deleteResultMsg := tgbotapi.NewDeleteMessage(chatID, session.ResultMessageID)
		h.requestAPI(deleteResultMsg)
		session.ResultMessageID = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä—É–±–∫–∏
	initialText := fmt.Sprintf(`–ò–¥–µ—Ç —Ä—É–±–∫–∞ –¥–µ—Ä–µ–≤–∞ "%s". –í—Ä–µ–º—è —Ä—É–±–∫–∏ %d —Å–µ–∫.
		
%s 0%%`, resourceName, duration, h.createProgressBar(0, 10))

	choppingMsg := tgbotapi.NewMessage(chatID, initialText)
	sentMsg, _ := h.sendMessageWithResponse(choppingMsg)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
	go h.updateChoppingProgress(userID, chatID, sentMsg.MessageID, resourceName, duration, durability, row, col)

	// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–∞–π–º–µ—Ä–∞
	timer := time.NewTimer(time.Duration(duration) * time.Second)
	h.choppingTimers[userID] = timer
}

func (h *BotHandlers) updateChoppingProgress(userID int64, chatID int64, messageID int, resourceName string, totalDuration int, durability int, row, col int) {
	startTime := time.Now()

	for {
		elapsed := time.Since(startTime)
		if elapsed >= time.Duration(totalDuration)*time.Second {
			break
		}

		percentage := int((elapsed.Seconds() / float64(totalDuration)) * 100)
		progressText := fmt.Sprintf(`–ò–¥–µ—Ç —Ä—É–±–∫–∞ –¥–µ—Ä–µ–≤–∞ "%s". –í—Ä–µ–º—è —Ä—É–±–∫–∏ %d —Å–µ–∫.
			
%s %d%%`, resourceName, totalDuration, h.createProgressBar(percentage, 100), percentage)

		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, progressText)
		h.editMessage(editMsg)

		time.Sleep(1 * time.Second)
	}

	// –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 100% –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
	finalText := fmt.Sprintf(`–ò–¥–µ—Ç —Ä—É–±–∫–∞ –¥–µ—Ä–µ–≤–∞ "%s". –í—Ä–µ–º—è —Ä—É–±–∫–∏ %d —Å–µ–∫.
		
%s 100%%`, resourceName, totalDuration, h.createProgressBar(100, 100))

	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, finalText)
	h.editMessage(editMsg)

	// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä—É–±–∫—É
	h.completeChopping(userID, chatID, resourceName, durability, messageID, row, col)
}

func (h *BotHandlers) completeChopping(userID int64, chatID int64, resourceName string, oldDurability int, messageID int, row, col int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
	player, err := h.db.GetPlayer(userID)
	if err != nil {
		log.Printf("Error getting player: %v", err)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
	if err := h.db.AddItemToInventory(player.ID, resourceName, 1); err != nil {
		log.Printf("Error adding item to inventory: %v", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å —Ç–æ–ø–æ—Ä–∞ –∏ —Å—ã—Ç–æ—Å—Ç—å
	if err := h.db.UpdateItemDurability(player.ID, "–ü—Ä–æ—Å—Ç–æ–π —Ç–æ–ø–æ—Ä", 1); err != nil {
		log.Printf("Error updating item durability: %v", err)
	}
	if err := h.db.UpdatePlayerSatiety(player.ID, -1); err != nil {
		log.Printf("Error updating player satiety: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –ª–µ—Å—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
	levelUp, newLevel, err := h.db.UpdateForestExperience(player.ID, 2)
	if err != nil {
		log.Printf("Error updating forest experience: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	updatedPlayer, _ := h.db.GetPlayer(userID)
	forest, _ := h.db.GetOrCreateForest(player.ID)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä—É–±–∫–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	resultText := fmt.Sprintf(`‚úÖ –¢—ã —Å—Ä—É–±–∏–ª –¥–µ—Ä–µ–≤–æ "%s"!
–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: 2
–°—ã—Ç–æ—Å—Ç—å: %d/100
–ü—Ä–æ—á–Ω–æ—Å—Ç—å —Ç–æ–ø–æ—Ä–∞: %d/100
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞`,
		resourceName,
		updatedPlayer.Satiety,
		oldDurability-1,
		forest.Level*100-forest.Experience)

	msg := tgbotapi.NewMessage(chatID, resultText)
	resultResponse, _ := h.sendMessageWithResponse(msg)

	// –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏
	if levelUp {
		levelUpText := fmt.Sprintf("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–≤–µ–Ω—å –ª–µ—Å–∞ –ø–æ–≤—ã—à–µ–Ω –¥–æ %d —É—Ä–æ–≤–Ω—è!", newLevel)
		levelUpMsg := tgbotapi.NewMessage(chatID, levelUpText)
		h.sendMessage(levelUpMsg)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ —Å–µ—Å—Å–∏–∏
	if session, exists := h.forestSessions[userID]; exists {
		session.ResultMessageID = resultResponse.MessageID
	}

	// –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä
	delete(h.choppingTimers, userID)

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ - —É–±–∏—Ä–∞–µ–º —Å—Ä—É–±–ª–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
	if session, exists := h.forestSessions[userID]; exists {
		session.Resources[row][col] = ""

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ä–µ—Å—É—Ä—Å—ã –≤ –ø–æ–ª–µ
		totalResources := 0
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				if session.Resources[i][j] != "" {
					totalResources++
				}
			}
		}

		if totalResources > 0 {
			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—è
			h.updateForestField(chatID, session.Resources, session.FieldMessageID)
			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
			h.updateForestInfoMessage(userID, chatID, forest, session.InfoMessageID)
		} else {
			// –ü–æ–ª–µ –∏—Å—Ç–æ—â–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
			if err := h.db.ExhaustForest(userID); err != nil {
				log.Printf("Error exhausting forest: %v", err)
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∫—É–ª–¥–∞—É–Ω–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
			h.forestCooldowns[userID] = time.Now().Add(60 * time.Second)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º –ª–µ—Å–∞
			deleteFieldMsg := tgbotapi.NewDeleteMessage(chatID, session.FieldMessageID)
			h.requestAPI(deleteFieldMsg)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–µ—Å–µ
			deleteInfoMsg := tgbotapi.NewDeleteMessage(chatID, session.InfoMessageID)
			h.requestAPI(deleteInfoMsg)

			exhaustMsg := tgbotapi.NewMessage(chatID, `‚ö†Ô∏è –õ–µ—Å –∏—Å—Ç–æ—â–µ–Ω! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å 1 –º–∏–Ω—É—Ç—É –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤.
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "ü™ì –†—É–±–∫–∞" —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.`)
			h.sendForestKeyboard(exhaustMsg)

			// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
			delete(h.forestSessions, userID)
		}
	}
}

func (h *BotHandlers) updateForestField(chatID int64, field [][]string, messageID int) {
	text := "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è —Ä—É–±–∫–∏:"

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	var keyboard [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < 3; i++ {
		var row []tgbotapi.InlineKeyboardButton
		for j := 0; j < 3; j++ {
			cell := field[i][j]
			var callbackData string

			switch cell {
			case "üå≥":
				callbackData = fmt.Sprintf("forest_birch_%d_%d", i, j)
			default:
				callbackData = fmt.Sprintf("forest_empty_%d_%d", i, j)
				cell = " "
			}

			button := tgbotapi.NewInlineKeyboardButtonData(cell, callbackData)
			row = append(row, button)
		}
		keyboard = append(keyboard, row)
	}

	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, messageID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
	h.editMessage(editMsg)
}

func (h *BotHandlers) updateForestInfoMessage(userID int64, chatID int64, forest *models.Forest, messageID int) {
	// –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
	expToNext := forest.Level*100 - forest.Experience

	infoText := fmt.Sprintf(`ü™ì –†—É–±–∫–∞ (–£—Ä–æ–≤–µ–Ω—å %d)
–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: %d –æ–ø—ã—Ç–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:
üå≥ –ë–µ—Ä–µ–∑–∞`, forest.Level, expToNext)

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	deleteMsg := tgbotapi.NewDeleteMessage(chatID, messageID)
	h.requestAPI(deleteMsg)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	forestKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	forestKeyboard.ResizeKeyboard = true

	newMsg := tgbotapi.NewMessage(chatID, infoText)
	newMsg.ReplyMarkup = forestKeyboard
	newResponse, _ := h.sendMessageWithResponse(newMsg)

	// –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
	if session, exists := h.forestSessions[userID]; exists {
		session.InfoMessageID = newResponse.MessageID
	}
}
